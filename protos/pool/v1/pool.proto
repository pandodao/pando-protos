syntax = "proto3";

package pool.v1; 
option go_package = "github.com/fox-one/pando-protos/pool/v1;pool";

service PoolService {
  rpc ListAssets(ListAssetsRequest) returns (ListAssetsResponse);

  rpc GetEvent(GetEventRequest) returns (GetEventResponse);
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse);

  rpc ListEarningProducts(ListEarningProductsRequest) returns (ListEarningProductsResponse);
  rpc GetEarningProduct(GetEarningProductRequest) returns (GetEarningProductResponse);
  rpc ListMyEarningProducts(ListMyEarningProductsRequest) returns (ListMyEarningProductsResponse);
  rpc GetMyEarningProduct(GetMyEarningProductRequest) returns (GetMyEarningProductResponse);
}

message EventError {
  enum Enum {
    NOT_SET = 0;
    // buy or queue
    EARNING_PRODUCT_STATUS_MISMATCH = 1;
    // buy or queue
    EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED = 2;
    // buy
    EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED = 3;
    // buy
    EARNING_PRODUCT_INSUFFICIENT = 4;
  }
}

message EventAction {
  enum Enum {
    NOT_SET = 0;
    BUY = 1;
    REDEEM = 2;
    DEPOSIT = 3;
    INTEREST_PAYMENT = 4;
    QUEUE = 5;
    CANCEL_QUEUE = 6;
  }
}

message EventStatus {
  enum Enum {
    NOT_SET = 0;
    INIT = 1;
    PROCESSING = 2;
    SUCCESSFUL = 3;
    FAILED = 4;
  }
}

message EarningProductStatus {
  enum Enum {
    NOT_SET = 0;
    AVAILABLE = 1;
    QUEUED = 2;
  }
}

message EarningProductType {
  enum Enum {
    NOT_SET = 0;
    DEFI_NODE = 1;
  }
}

message UserEarningProductStatus {
  enum Enum {
    NOT_SET = 0;
    ACTIVE = 1;
    INACTIVE = 2;
  }
}

message EarningSnapshotBuyData {
  int64 product_id = 1;
}

message EarningSnapshotRedeemData {
  int64 earning_id = 1;
  string amount = 2;
}

message EarningSnapshotQueueData {
  int64 product_id = 1;
}

message EarningSnapshotCancelQueueData {
  int64 event_id = 1;
}

message ListAssetsRequest {}

message Asset {
  string asset_id = 1;
  string chain_id = 2;
  string symbol = 3;
  string name = 4;
  string logo = 5;
  string price_usd = 6;
  string price_btc = 7;
  int64 order = 8;
  int32 updated_at = 9;
}

message ListAssetsResponse {
  repeated Asset assets = 1;
}

message EarningProduct {
  int64 id = 1;
  string name = 2;
  string description = 3;
  string asset_id = 4;
  string interest_rate =5;
  string min_amount_per_order = 6;
  string max_amount_per_order = 7;
  string capacity = 8;
  string amount = 9;
  int64 version = 10;
  int32 created_at = 11;
  EarningProductType.Enum type = 12;
  EarningProductStatus.Enum status = 13;
  string queued_amount = 14;
}

message ListEarningProductsRequest {
  EarningProductType.Enum type = 1;
}

message ListEarningProductsResponse {
  repeated EarningProduct products = 1;
}

message GetEarningProductRequest {
  int64 id = 1;
}

message GetEarningProductResponse {
  EarningProduct product = 1;
}

message UserEarningProduct {
  int64 id = 1;
  string user_id = 2;
  int64 earning_product_id = 3;
  UserEarningProductStatus.Enum status = 4;
  string amount = 5;
  int64 version = 6;
  int32 created_at = 7;
  int32 updated_at = 8;
  string queued_amount = 9;
  string total_revenue = 10;
}

message ListMyEarningProductsRequest {}

message ListMyEarningProductsResponse {
  repeated UserEarningProduct products = 1;
}

message GetMyEarningProductRequest {
  int64 id = 1;
}

message GetMyEarningProductResponse {
  UserEarningProduct product = 1;
}

message GetEventRequest {
  string follow_id = 1;
}

message Event {
  int64 id = 1;
  string user_id = 2;
  EventAction.Enum action = 3;
  int64 product_id = 4;
  string asset_id = 5;
  string amount = 6;
  // set only if the action is queue
  string filled_amount = 7;
  string extra = 8;
  EventStatus.Enum status = 9;
  string follow_id = 10;
  int32 created_at = 11;
  // set only if the status is failed
  EventError.Enum error = 12;
}

message GetEventResponse {
  Event event = 1;
}

message ListEventsRequest {
  int64 earning_product_id = 1;
  EventAction.Enum action = 2;
  EventStatus.Enum status = 3;
}

message ListEventsResponse {
  repeated Event events = 1;
}
