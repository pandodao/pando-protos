syntax = "proto3";

package swapnode.v2; 
option go_package = "github.com/fox-one/pando-protos/swapnode/v2;swapnode";

import "google/protobuf/timestamp.proto";

message User {
    repeated string members = 1;
    uint32 threshold = 2;
}

message Pair {
    uint32 id = 1;
    google.protobuf.Timestamp created_at = 2;
    google.protobuf.Timestamp updated_at = 3;
    uint64 version = 4;
    string base_asset_id = 5;
    string quote_asset_id = 6;
    string base_amount = 7;
    string quote_amount = 8;
    string base_profit = 9;
    string quote_profit = 10;
    string liquidity = 11;
    string max_liquidity = 12;
    string liquidity_asset_id = 13;
    string swap_method = 14;
    string profit_rate = 15;
    string fee = 16;
}

message Transaction {
    uint64 group = 1;
    uint32 index = 2;
    google.protobuf.Timestamp created_at = 3;
    uint32 pair_id = 4;
    string base_amount = 5;
    string quote_amount = 6;
    string fee_amount = 7;
    string profit_amount = 8;
    string liquidity = 9;
}

message Transfer {
    enum Status {
        STATUS_NOT_SET = 0;
        AUDITING = 1;
        APPROVED = 2;
        ASSIGNED = 3;
        HANDLED = 4;
        PASSED  = 5;
        REJECTED = 6;
    }

    string id = 1;
    google.protobuf.Timestamp created_at = 2;
    uint64 group = 3;
    string asset_id = 4;
    string amount = 5;
    string memo = 6;
    Status status = 7;
    User opponent = 8;
    string tx_hash = 9;
}

message Deposit {
    enum Status {
        STATUS_NOT_SET = 0;
        PENDING = 1;
        CANCELLED = 2;
        DONE = 3;
    }

    uint64 id = 1;
    google.protobuf.Timestamp created_at = 2;
    google.protobuf.Timestamp updated_at = 3;
    google.protobuf.Timestamp expired_at = 4;
    uint64 version = 5;
    Status status = 6;
    uint32 pair_id = 7;
    string base_amount = 8;
    string quote_amount = 9;
    string slippage = 10;
    string liquidity = 11;
    string fee_amount = 12;
}

message Order {
    message Path {
        uint32 weight = 1;
        repeated uint32 pairs = 2;
    }

    uint64 id = 1;
    google.protobuf.Timestamp created_at = 2;
    string pay_asset_id = 3;
    string fill_asset_id = 4;
    string pay_amount = 5;
    string fill_amount = 6;
    string min_amount = 7;
    repeated Path paths = 8;
}

enum Action {
        ACTION_NOT_SET = 0;
        LIQUIDITY_ADD = 1;
        LIQUIDITY_REMOVE = 2;
        LIQUIDITY_SWAP = 3;
        DEPOSIT_EXPIRE = 4;
        AUDIT_REVIEW = 5;
        PROPOSAL_VOTE = 6;
        ADD_PAIR = 7;
        UPDATE_PAIR = 8;
        WITHDRAW = 9;
        SET_PROPERTY = 10;
        FLUSH_PROFIT = 11;
        SWAP_METHOD = 12;
    }

message Request {
    uint64 id = 1;
    google.protobuf.Timestamp created_at = 2;
    uint32 system_version = 3;
    uint32 protocol_version = 4;
    Action action = 5;
    User user = 6;
    string follow_id = 7;
    int32 code = 8;
}

message Proposal {
    message AddPair {
        string base_asset = 1;
        string quote_asset = 2;
        string method = 3;
        string profit_rate = 4;
        string fee = 5;
    }

    message UpdatePair {
        string base_asset = 1;
        string quote_asset = 2;
        string method = 3;
        string profit_rate = 4;
        string fee = 5;
    }

    message SetProperty {
        string key = 1;
        string value = 2;
    }

    message FlushProfit {
        string base_asset = 1;
        string quote_asset = 2;
    }

    message Withdraw {
        string opponent = 1;
        string asset = 2;
        string amount = 3;
    }

    message SwapMethod {
        string base_asset = 1;
        string quote_asset = 2;
        string method = 3;
    }

    uint64 id = 1;
    google.protobuf.Timestamp created_at = 2;
    google.protobuf.Timestamp updated_at = 3;
    google.protobuf.Timestamp passed_at = 4;
    uint64 version = 5;
    string creator = 6;
    string asset_id = 7;
    string amount = 8;
    Action action = 9;
    repeated string votes = 10;
    oneof content {
        AddPair add_pair = 11;
        UpdatePair update_pair = 12;
        SetProperty set_property = 13;
        FlushProfit flush_profit = 14;
        Withdraw withdraw = 15;
        SwapMethod swap_method = 16;
    }
}

message GetInfoRequest {}

message GetInfoResponse {
    repeated string members = 1;
    int32 threshold = 2;
    string version = 3;
    string mix_address = 4;
}

message ListRequestsRequest {
    uint64 offset = 1;
    int32 limit = 2;
}

message ListRequestsResponse {
    repeated Request requests = 1;
}

message FindRequestRequest {
    User user = 1;
    string follow_id = 2;
}

message FindRequestResponse {
    Request request = 1;
}

message FindDepositRequest {
    uint64 id = 1;
}

message FindDepositResponse {
    Deposit deposit = 1;
}

message ListPairsRequest {}

message ListPairsResponse {
    repeated Pair pairs = 1;
}

message ListTransactionsRequest {
    uint64 group = 1;
}

message ListTransactionsResponse {
    repeated Transaction transactions = 1;
}

message ListTransfersRequest {
    uint64 group = 1;
}

message ListTransfersResponse {
    repeated Transfer transfers = 1;
}

message FindOrderRequest {
    uint64 id = 1;
}

message FindOrderResponse {
    Order order = 1;
}

message FindProposalRequest {
    uint64 id = 1;
}

message FindProposalResponse {
    Proposal proposal = 1;
}

message FindPairRequest {
    uint32 id = 1;
    string base_asset_id = 2;
    string quote_asset_id = 3;
    string liquidity_asset_id = 4;
}

message FindPairResponse {
    Pair pair = 1;
}

service SwapNodeService {
    rpc GetInfo(GetInfoRequest) returns (GetInfoResponse);
    rpc ListRequests(ListRequestsRequest) returns (ListRequestsResponse);
    rpc FindRequest(FindRequestRequest) returns (FindRequestResponse);
    rpc FindDeposit(FindDepositRequest) returns (FindDepositResponse);
    rpc ListPairs(ListPairsRequest) returns (ListPairsResponse);
    rpc ListTransactions(ListTransactionsRequest) returns (ListTransactionsResponse);
    rpc ListTransfers(ListTransfersRequest) returns (ListTransfersResponse);
    rpc FindOrder(FindOrderRequest) returns (FindOrderResponse);
    rpc FindProposal(FindProposalRequest) returns (FindProposalResponse);
    rpc FindPair(FindPairRequest) returns (FindPairResponse);
}

