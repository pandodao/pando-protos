// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: pigeon/v1/pigeon.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface Message {
  messageId: string;
  recipientId: string;
  category: string;
  data: string;
  representativeId: string;
  quoteMessageId: string;
  activeAt: protoscript.Timestamp;
}

export interface SendMessageRequest {
  message: Message;
  blockBot: boolean;
  source: string;
}

export interface SendMessageResponse {}

export interface SendMessagesRequest {
  messages: Message[];
  blockBot: boolean;
  source: string;
}

export interface SendMessagesResponse {}

//========================================//
//     PigeonService Protobuf Client      //
//========================================//

export async function SendMessage(
  sendMessageRequest: SendMessageRequest,
  config?: ClientConfiguration,
): Promise<SendMessageResponse> {
  const response = await PBrequest(
    "/pigeon.v1.PigeonService/SendMessage",
    SendMessageRequest.encode(sendMessageRequest),
    config,
  );
  return SendMessageResponse.decode(response);
}

export async function SendMessages(
  sendMessagesRequest: SendMessagesRequest,
  config?: ClientConfiguration,
): Promise<SendMessagesResponse> {
  const response = await PBrequest(
    "/pigeon.v1.PigeonService/SendMessages",
    SendMessagesRequest.encode(sendMessagesRequest),
    config,
  );
  return SendMessagesResponse.decode(response);
}

//========================================//
//       PigeonService JSON Client        //
//========================================//

export async function SendMessageJSON(
  sendMessageRequest: SendMessageRequest,
  config?: ClientConfiguration,
): Promise<SendMessageResponse> {
  const response = await JSONrequest(
    "/pigeon.v1.PigeonService/SendMessage",
    SendMessageRequestJSON.encode(sendMessageRequest),
    config,
  );
  return SendMessageResponseJSON.decode(response);
}

export async function SendMessagesJSON(
  sendMessagesRequest: SendMessagesRequest,
  config?: ClientConfiguration,
): Promise<SendMessagesResponse> {
  const response = await JSONrequest(
    "/pigeon.v1.PigeonService/SendMessages",
    SendMessagesRequestJSON.encode(sendMessagesRequest),
    config,
  );
  return SendMessagesResponseJSON.decode(response);
}

//========================================//
//             PigeonService              //
//========================================//

export interface PigeonService<Context = unknown> {
  SendMessage: (
    sendMessageRequest: SendMessageRequest,
    context: Context,
  ) => Promise<SendMessageResponse> | SendMessageResponse;
  SendMessages: (
    sendMessagesRequest: SendMessagesRequest,
    context: Context,
  ) => Promise<SendMessagesResponse> | SendMessagesResponse;
}

export function createPigeonService<Context>(service: PigeonService<Context>) {
  return {
    name: "pigeon.v1.PigeonService",
    methods: {
      SendMessage: {
        name: "SendMessage",
        handler: service.SendMessage,
        input: { protobuf: SendMessageRequest, json: SendMessageRequestJSON },
        output: {
          protobuf: SendMessageResponse,
          json: SendMessageResponseJSON,
        },
      },
      SendMessages: {
        name: "SendMessages",
        handler: service.SendMessages,
        input: { protobuf: SendMessagesRequest, json: SendMessagesRequestJSON },
        output: {
          protobuf: SendMessagesResponse,
          json: SendMessagesResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Message = {
  /**
   * Serializes Message to protobuf.
   */
  encode: function (msg: PartialDeep<Message>): Uint8Array {
    return Message._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Message from protobuf.
   */
  decode: function (bytes: ByteSource): Message {
    return Message._readMessage(
      Message.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Message with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Message>): Message {
    return {
      messageId: "",
      recipientId: "",
      category: "",
      data: "",
      representativeId: "",
      quoteMessageId: "",
      activeAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Message>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.messageId) {
      writer.writeString(1, msg.messageId);
    }
    if (msg.recipientId) {
      writer.writeString(2, msg.recipientId);
    }
    if (msg.category) {
      writer.writeString(3, msg.category);
    }
    if (msg.data) {
      writer.writeString(4, msg.data);
    }
    if (msg.representativeId) {
      writer.writeString(5, msg.representativeId);
    }
    if (msg.quoteMessageId) {
      writer.writeString(6, msg.quoteMessageId);
    }
    if (msg.activeAt) {
      writer.writeMessage(7, msg.activeAt, protoscript.Timestamp._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Message,
    reader: protoscript.BinaryReader,
  ): Message {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.messageId = reader.readString();
          break;
        }
        case 2: {
          msg.recipientId = reader.readString();
          break;
        }
        case 3: {
          msg.category = reader.readString();
          break;
        }
        case 4: {
          msg.data = reader.readString();
          break;
        }
        case 5: {
          msg.representativeId = reader.readString();
          break;
        }
        case 6: {
          msg.quoteMessageId = reader.readString();
          break;
        }
        case 7: {
          reader.readMessage(msg.activeAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SendMessageRequest = {
  /**
   * Serializes SendMessageRequest to protobuf.
   */
  encode: function (msg: PartialDeep<SendMessageRequest>): Uint8Array {
    return SendMessageRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SendMessageRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SendMessageRequest {
    return SendMessageRequest._readMessage(
      SendMessageRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SendMessageRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SendMessageRequest>): SendMessageRequest {
    return {
      message: Message.initialize(),
      blockBot: false,
      source: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SendMessageRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.message) {
      writer.writeMessage(1, msg.message, Message._writeMessage);
    }
    if (msg.blockBot) {
      writer.writeBool(2, msg.blockBot);
    }
    if (msg.source) {
      writer.writeString(3, msg.source);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessageRequest,
    reader: protoscript.BinaryReader,
  ): SendMessageRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.message, Message._readMessage);
          break;
        }
        case 2: {
          msg.blockBot = reader.readBool();
          break;
        }
        case 3: {
          msg.source = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SendMessageResponse = {
  /**
   * Serializes SendMessageResponse to protobuf.
   */
  encode: function (_msg?: PartialDeep<SendMessageResponse>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes SendMessageResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): SendMessageResponse {
    return {};
  },

  /**
   * Initializes SendMessageResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SendMessageResponse>,
  ): SendMessageResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SendMessageResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: SendMessageResponse,
    _reader: protoscript.BinaryReader,
  ): SendMessageResponse {
    return _msg;
  },
};

export const SendMessagesRequest = {
  /**
   * Serializes SendMessagesRequest to protobuf.
   */
  encode: function (msg: PartialDeep<SendMessagesRequest>): Uint8Array {
    return SendMessagesRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SendMessagesRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SendMessagesRequest {
    return SendMessagesRequest._readMessage(
      SendMessagesRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SendMessagesRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SendMessagesRequest>,
  ): SendMessagesRequest {
    return {
      messages: [],
      blockBot: false,
      source: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SendMessagesRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.messages?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.messages as any,
        Message._writeMessage,
      );
    }
    if (msg.blockBot) {
      writer.writeBool(2, msg.blockBot);
    }
    if (msg.source) {
      writer.writeString(3, msg.source);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessagesRequest,
    reader: protoscript.BinaryReader,
  ): SendMessagesRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Message.initialize();
          reader.readMessage(m, Message._readMessage);
          msg.messages.push(m);
          break;
        }
        case 2: {
          msg.blockBot = reader.readBool();
          break;
        }
        case 3: {
          msg.source = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SendMessagesResponse = {
  /**
   * Serializes SendMessagesResponse to protobuf.
   */
  encode: function (_msg?: PartialDeep<SendMessagesResponse>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes SendMessagesResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): SendMessagesResponse {
    return {};
  },

  /**
   * Initializes SendMessagesResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SendMessagesResponse>,
  ): SendMessagesResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SendMessagesResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: SendMessagesResponse,
    _reader: protoscript.BinaryReader,
  ): SendMessagesResponse {
    return _msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const MessageJSON = {
  /**
   * Serializes Message to JSON.
   */
  encode: function (msg: PartialDeep<Message>): string {
    return JSON.stringify(MessageJSON._writeMessage(msg));
  },

  /**
   * Deserializes Message from JSON.
   */
  decode: function (json: string): Message {
    return MessageJSON._readMessage(MessageJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Message with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Message>): Message {
    return {
      messageId: "",
      recipientId: "",
      category: "",
      data: "",
      representativeId: "",
      quoteMessageId: "",
      activeAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Message>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messageId) {
      json["messageId"] = msg.messageId;
    }
    if (msg.recipientId) {
      json["recipientId"] = msg.recipientId;
    }
    if (msg.category) {
      json["category"] = msg.category;
    }
    if (msg.data) {
      json["data"] = msg.data;
    }
    if (msg.representativeId) {
      json["representativeId"] = msg.representativeId;
    }
    if (msg.quoteMessageId) {
      json["quoteMessageId"] = msg.quoteMessageId;
    }
    if (msg.activeAt && msg.activeAt.seconds && msg.activeAt.nanos) {
      json["activeAt"] = protoscript.serializeTimestamp(msg.activeAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Message, json: any): Message {
    const _messageId_ = json["messageId"] ?? json["message_id"];
    if (_messageId_) {
      msg.messageId = _messageId_;
    }
    const _recipientId_ = json["recipientId"] ?? json["recipient_id"];
    if (_recipientId_) {
      msg.recipientId = _recipientId_;
    }
    const _category_ = json["category"];
    if (_category_) {
      msg.category = _category_;
    }
    const _data_ = json["data"];
    if (_data_) {
      msg.data = _data_;
    }
    const _representativeId_ =
      json["representativeId"] ?? json["representative_id"];
    if (_representativeId_) {
      msg.representativeId = _representativeId_;
    }
    const _quoteMessageId_ = json["quoteMessageId"] ?? json["quote_message_id"];
    if (_quoteMessageId_) {
      msg.quoteMessageId = _quoteMessageId_;
    }
    const _activeAt_ = json["activeAt"] ?? json["active_at"];
    if (_activeAt_) {
      msg.activeAt = protoscript.parseTimestamp(_activeAt_);
    }
    return msg;
  },
};

export const SendMessageRequestJSON = {
  /**
   * Serializes SendMessageRequest to JSON.
   */
  encode: function (msg: PartialDeep<SendMessageRequest>): string {
    return JSON.stringify(SendMessageRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SendMessageRequest from JSON.
   */
  decode: function (json: string): SendMessageRequest {
    return SendMessageRequestJSON._readMessage(
      SendMessageRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SendMessageRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SendMessageRequest>): SendMessageRequest {
    return {
      message: MessageJSON.initialize(),
      blockBot: false,
      source: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SendMessageRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.message) {
      const _message_ = MessageJSON._writeMessage(msg.message);
      if (Object.keys(_message_).length > 0) {
        json["message"] = _message_;
      }
    }
    if (msg.blockBot) {
      json["blockBot"] = msg.blockBot;
    }
    if (msg.source) {
      json["source"] = msg.source;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessageRequest,
    json: any,
  ): SendMessageRequest {
    const _message_ = json["message"];
    if (_message_) {
      MessageJSON._readMessage(msg.message, _message_);
    }
    const _blockBot_ = json["blockBot"] ?? json["block_bot"];
    if (_blockBot_) {
      msg.blockBot = _blockBot_;
    }
    const _source_ = json["source"];
    if (_source_) {
      msg.source = _source_;
    }
    return msg;
  },
};

export const SendMessageResponseJSON = {
  /**
   * Serializes SendMessageResponse to JSON.
   */
  encode: function (_msg?: PartialDeep<SendMessageResponse>): string {
    return "{}";
  },

  /**
   * Deserializes SendMessageResponse from JSON.
   */
  decode: function (_json?: string): SendMessageResponse {
    return {};
  },

  /**
   * Initializes SendMessageResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SendMessageResponse>,
  ): SendMessageResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SendMessageResponse>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessageResponse,
    _json: any,
  ): SendMessageResponse {
    return msg;
  },
};

export const SendMessagesRequestJSON = {
  /**
   * Serializes SendMessagesRequest to JSON.
   */
  encode: function (msg: PartialDeep<SendMessagesRequest>): string {
    return JSON.stringify(SendMessagesRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SendMessagesRequest from JSON.
   */
  decode: function (json: string): SendMessagesRequest {
    return SendMessagesRequestJSON._readMessage(
      SendMessagesRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SendMessagesRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SendMessagesRequest>,
  ): SendMessagesRequest {
    return {
      messages: [],
      blockBot: false,
      source: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SendMessagesRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messages?.length) {
      json["messages"] = msg.messages.map(MessageJSON._writeMessage);
    }
    if (msg.blockBot) {
      json["blockBot"] = msg.blockBot;
    }
    if (msg.source) {
      json["source"] = msg.source;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessagesRequest,
    json: any,
  ): SendMessagesRequest {
    const _messages_ = json["messages"];
    if (_messages_) {
      for (const item of _messages_) {
        const m = MessageJSON.initialize();
        MessageJSON._readMessage(m, item);
        msg.messages.push(m);
      }
    }
    const _blockBot_ = json["blockBot"] ?? json["block_bot"];
    if (_blockBot_) {
      msg.blockBot = _blockBot_;
    }
    const _source_ = json["source"];
    if (_source_) {
      msg.source = _source_;
    }
    return msg;
  },
};

export const SendMessagesResponseJSON = {
  /**
   * Serializes SendMessagesResponse to JSON.
   */
  encode: function (_msg?: PartialDeep<SendMessagesResponse>): string {
    return "{}";
  },

  /**
   * Deserializes SendMessagesResponse from JSON.
   */
  decode: function (_json?: string): SendMessagesResponse {
    return {};
  },

  /**
   * Initializes SendMessagesResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SendMessagesResponse>,
  ): SendMessagesResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SendMessagesResponse>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessagesResponse,
    _json: any,
  ): SendMessagesResponse {
    return msg;
  },
};
