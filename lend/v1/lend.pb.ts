// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: lend/v1/lend.proto
/* eslint-disable */

import type { ByteSource, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";

//========================================//
//      LendService Protobuf Client       //
//========================================//

export async function Config(
  configRequest: ConfigRequest,
  config?: ClientConfiguration
): Promise<ConfigResponse> {
  const response = await PBrequest(
    "/lend.v1.LendService/Config",
    ConfigRequest.encode(configRequest),
    config
  );
  return ConfigResponse.decode(response);
}

export async function ListAssets(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration
): Promise<ListAssetsResponse> {
  const response = await PBrequest(
    "/lend.v1.LendService/ListAssets",
    ListAssetsRequest.encode(listAssetsRequest),
    config
  );
  return ListAssetsResponse.decode(response);
}

export async function State(
  stateRequest: StateRequest,
  config?: ClientConfiguration
): Promise<StateResponse> {
  const response = await PBrequest(
    "/lend.v1.LendService/State",
    StateRequest.encode(stateRequest),
    config
  );
  return StateResponse.decode(response);
}

export async function Info(
  infoRequest: InfoRequest,
  config?: ClientConfiguration
): Promise<InfoResponse> {
  const response = await PBrequest(
    "/lend.v1.LendService/Info",
    InfoRequest.encode(infoRequest),
    config
  );
  return InfoResponse.decode(response);
}

export async function CreatePayment(
  createPaymentRequest: CreatePaymentRequest,
  config?: ClientConfiguration
): Promise<CreatePaymentResponse> {
  const response = await PBrequest(
    "/lend.v1.LendService/CreatePayment",
    CreatePaymentRequest.encode(createPaymentRequest),
    config
  );
  return CreatePaymentResponse.decode(response);
}

export async function GetOperationLog(
  getOperationLogRequest: GetOperationLogRequest,
  config?: ClientConfiguration
): Promise<GetOperationLogResponse> {
  const response = await PBrequest(
    "/lend.v1.LendService/GetOperationLog",
    GetOperationLogRequest.encode(getOperationLogRequest),
    config
  );
  return GetOperationLogResponse.decode(response);
}

export async function ListOperationLogs(
  listOperationLogsRequest: ListOperationLogsRequest,
  config?: ClientConfiguration
): Promise<ListOperationLogsResponse> {
  const response = await PBrequest(
    "/lend.v1.LendService/ListOperationLogs",
    ListOperationLogsRequest.encode(listOperationLogsRequest),
    config
  );
  return ListOperationLogsResponse.decode(response);
}

export async function GetLiquidation(
  getLiquidationRequest: GetLiquidationRequest,
  config?: ClientConfiguration
): Promise<GetLiquidationResponse> {
  const response = await PBrequest(
    "/lend.v1.LendService/GetLiquidation",
    GetLiquidationRequest.encode(getLiquidationRequest),
    config
  );
  return GetLiquidationResponse.decode(response);
}

//========================================//
//        LendService JSON Client         //
//========================================//

export async function ConfigJSON(
  configRequest: ConfigRequest,
  config?: ClientConfiguration
): Promise<ConfigResponse> {
  const response = await JSONrequest(
    "/lend.v1.LendService/Config",
    ConfigRequestJSON.encode(configRequest),
    config
  );
  return ConfigResponseJSON.decode(response);
}

export async function ListAssetsJSON(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration
): Promise<ListAssetsResponse> {
  const response = await JSONrequest(
    "/lend.v1.LendService/ListAssets",
    ListAssetsRequestJSON.encode(listAssetsRequest),
    config
  );
  return ListAssetsResponseJSON.decode(response);
}

export async function StateJSON(
  stateRequest: StateRequest,
  config?: ClientConfiguration
): Promise<StateResponse> {
  const response = await JSONrequest(
    "/lend.v1.LendService/State",
    StateRequestJSON.encode(stateRequest),
    config
  );
  return StateResponseJSON.decode(response);
}

export async function InfoJSON(
  infoRequest: InfoRequest,
  config?: ClientConfiguration
): Promise<InfoResponse> {
  const response = await JSONrequest(
    "/lend.v1.LendService/Info",
    InfoRequestJSON.encode(infoRequest),
    config
  );
  return InfoResponseJSON.decode(response);
}

export async function CreatePaymentJSON(
  createPaymentRequest: CreatePaymentRequest,
  config?: ClientConfiguration
): Promise<CreatePaymentResponse> {
  const response = await JSONrequest(
    "/lend.v1.LendService/CreatePayment",
    CreatePaymentRequestJSON.encode(createPaymentRequest),
    config
  );
  return CreatePaymentResponseJSON.decode(response);
}

export async function GetOperationLogJSON(
  getOperationLogRequest: GetOperationLogRequest,
  config?: ClientConfiguration
): Promise<GetOperationLogResponse> {
  const response = await JSONrequest(
    "/lend.v1.LendService/GetOperationLog",
    GetOperationLogRequestJSON.encode(getOperationLogRequest),
    config
  );
  return GetOperationLogResponseJSON.decode(response);
}

export async function ListOperationLogsJSON(
  listOperationLogsRequest: ListOperationLogsRequest,
  config?: ClientConfiguration
): Promise<ListOperationLogsResponse> {
  const response = await JSONrequest(
    "/lend.v1.LendService/ListOperationLogs",
    ListOperationLogsRequestJSON.encode(listOperationLogsRequest),
    config
  );
  return ListOperationLogsResponseJSON.decode(response);
}

export async function GetLiquidationJSON(
  getLiquidationRequest: GetLiquidationRequest,
  config?: ClientConfiguration
): Promise<GetLiquidationResponse> {
  const response = await JSONrequest(
    "/lend.v1.LendService/GetLiquidation",
    GetLiquidationRequestJSON.encode(getLiquidationRequest),
    config
  );
  return GetLiquidationResponseJSON.decode(response);
}

//========================================//
//              LendService               //
//========================================//

export interface LendService<Context = unknown> {
  Config: (
    configRequest: ConfigRequest,
    context: Context
  ) => Promise<ConfigResponse> | ConfigResponse;
  ListAssets: (
    listAssetsRequest: ListAssetsRequest,
    context: Context
  ) => Promise<ListAssetsResponse> | ListAssetsResponse;
  State: (
    stateRequest: StateRequest,
    context: Context
  ) => Promise<StateResponse> | StateResponse;
  Info: (
    infoRequest: InfoRequest,
    context: Context
  ) => Promise<InfoResponse> | InfoResponse;
  CreatePayment: (
    createPaymentRequest: CreatePaymentRequest,
    context: Context
  ) => Promise<CreatePaymentResponse> | CreatePaymentResponse;
  GetOperationLog: (
    getOperationLogRequest: GetOperationLogRequest,
    context: Context
  ) => Promise<GetOperationLogResponse> | GetOperationLogResponse;
  ListOperationLogs: (
    listOperationLogsRequest: ListOperationLogsRequest,
    context: Context
  ) => Promise<ListOperationLogsResponse> | ListOperationLogsResponse;
  GetLiquidation: (
    getLiquidationRequest: GetLiquidationRequest,
    context: Context
  ) => Promise<GetLiquidationResponse> | GetLiquidationResponse;
}

export function createLendService<Context>(service: LendService<Context>) {
  return {
    name: "lend.v1.LendService",
    methods: {
      Config: {
        name: "Config",
        handler: service.Config,
        input: { protobuf: ConfigRequest, json: ConfigRequestJSON },
        output: { protobuf: ConfigResponse, json: ConfigResponseJSON },
      },
      ListAssets: {
        name: "ListAssets",
        handler: service.ListAssets,
        input: { protobuf: ListAssetsRequest, json: ListAssetsRequestJSON },
        output: { protobuf: ListAssetsResponse, json: ListAssetsResponseJSON },
      },
      State: {
        name: "State",
        handler: service.State,
        input: { protobuf: StateRequest, json: StateRequestJSON },
        output: { protobuf: StateResponse, json: StateResponseJSON },
      },
      Info: {
        name: "Info",
        handler: service.Info,
        input: { protobuf: InfoRequest, json: InfoRequestJSON },
        output: { protobuf: InfoResponse, json: InfoResponseJSON },
      },
      CreatePayment: {
        name: "CreatePayment",
        handler: service.CreatePayment,
        input: {
          protobuf: CreatePaymentRequest,
          json: CreatePaymentRequestJSON,
        },
        output: {
          protobuf: CreatePaymentResponse,
          json: CreatePaymentResponseJSON,
        },
      },
      GetOperationLog: {
        name: "GetOperationLog",
        handler: service.GetOperationLog,
        input: {
          protobuf: GetOperationLogRequest,
          json: GetOperationLogRequestJSON,
        },
        output: {
          protobuf: GetOperationLogResponse,
          json: GetOperationLogResponseJSON,
        },
      },
      ListOperationLogs: {
        name: "ListOperationLogs",
        handler: service.ListOperationLogs,
        input: {
          protobuf: ListOperationLogsRequest,
          json: ListOperationLogsRequestJSON,
        },
        output: {
          protobuf: ListOperationLogsResponse,
          json: ListOperationLogsResponseJSON,
        },
      },
      GetLiquidation: {
        name: "GetLiquidation",
        handler: service.GetLiquidation,
        input: {
          protobuf: GetLiquidationRequest,
          json: GetLiquidationRequestJSON,
        },
        output: {
          protobuf: GetLiquidationResponse,
          json: GetLiquidationResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export type OperationType =
  | "OPERATION_TYPE_NOT_SET"
  | "PLEDGE"
  | "WITHDRAW"
  | "LOAN"
  | "REPAY"
  | "CANCEL"
  | "LIQUIDATION"
  | "REVIEW"
  | "CHARGE";

export type UserStatus = "USER_STATUS_NOT_SET" | "NORMAL" | "LIQUIDATING";

export type OperationStatus =
  | "OPERATION_STATUS_NOT_SET"
  | "PENDING"
  | "QUEUED"
  | "PROCESSING"
  | "REVIEWING"
  | "SUCCESS"
  | "FAILED"
  | "CANCELLED";

export type PledgeType = "PLEDGE_TYPE_NOT_SET" | "NODE" | "POOL" | "LOCAL";

export interface ReviewData {
  tid: string;
  p: boolean;
  fr: string;
}

export interface TransferWithdrawData {
  pt: PledgeType;
  assetId: string;
  amount: string;
}

export interface TransferPledgeData {
  pt: PledgeType;
}

export interface TransferLoanData {
  amount: string;
}

export interface TransferRepayData {}

export interface TransferCancelData {
  id: string;
}

export interface ConfigRequest {}

export interface ConfigResponse {
  securityPledgeRate: string;
  clearingPledgeRate: string;
  interestRate: string;
  interestDuration: number;
}

export interface Pagination {
  nextCursor: string;
  hasNext: boolean;
}

export interface Asset {
  assetId: string;
  chainId: string;
  symbol: string;
  name: string;
  logo: string;
  price: string;
  priceAt: number;
  pledgeRate: string;
}

export interface ListAssetsRequest {}

export interface ListAssetsResponse {
  assets: Asset[];
}

export interface PledgeItem {
  asset: Asset;
  amount: string;
  name: string;
}

export interface PledgeGroup {
  pledgeType: PledgeType;
  active: boolean;
  items: PledgeItem[];
}

export interface StateRequest {
  operationId: bigint;
}

export interface StateResponse {
  loanAmountQueued: string;
}

export interface InfoRequest {}

export interface InfoResponse {
  loanAmount: string;
  groups: PledgeGroup[];
  loanLimit: string;
  userStatus: UserStatus;
}

export interface CreatePaymentRequest {
  operationTraceId: string;
  traceId: string;
  memo: string;
  assetId: string;
  amount: string;
}

export interface CreatePaymentResponse {
  code: string;
}

export interface GetOperationLogRequest {
  traceId: string;
}

export interface OperationLog {
  id: bigint;
  traceId: string;
  operationType: OperationType;
  loanAmount: string;
  repayAmount: string;
  pledgeType: PledgeType;
  pledgeAmount: string;
  pledgeAsset: Asset;
  status: OperationStatus;
  createdAt: number;
  failedReason: string;
  transferMemo: string;
  transferAssetId: string;
  transferAmount: string;
  isSystem: boolean;
  beforeLoanAmount: string;
  afterLoanAmount: string;
}

export interface GetOperationLogResponse {
  operationLog: OperationLog;
}

export interface ListOperationLogsRequest {
  cursor: bigint;
  limit: bigint;
}

export interface ListOperationLogsResponse {
  operationLogs: OperationLog[];
  pagination: Pagination;
}

export interface GetLiquidationRequest {
  traceId: string;
}

export interface LiquidationPledge {
  id: bigint;
  userId: string;
  type: PledgeType;
  assetId: string;
  amount: string;
  contractId: string;
  name: string;
  traceId: string;
  assetPrice: string;
  assetPriceUpdatedAt: number;
  done: boolean;
  createdAt: number;
}

export interface GetLiquidationResponse {
  op: OperationLog;
  pledges: LiquidationPledge[];
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const OperationType = {
  OPERATION_TYPE_NOT_SET: "OPERATION_TYPE_NOT_SET",
  PLEDGE: "PLEDGE",
  WITHDRAW: "WITHDRAW",
  LOAN: "LOAN",
  REPAY: "REPAY",
  CANCEL: "CANCEL",
  LIQUIDATION: "LIQUIDATION",
  REVIEW: "REVIEW",
  CHARGE: "CHARGE",
  /**
   * @private
   */
  _fromInt: function (i: number): OperationType {
    switch (i) {
      case 0: {
        return "OPERATION_TYPE_NOT_SET";
      }
      case 1: {
        return "PLEDGE";
      }
      case 2: {
        return "WITHDRAW";
      }
      case 3: {
        return "LOAN";
      }
      case 4: {
        return "REPAY";
      }
      case 5: {
        return "CANCEL";
      }
      case 50: {
        return "LIQUIDATION";
      }
      case 100: {
        return "REVIEW";
      }
      case 101: {
        return "CHARGE";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as OperationType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: OperationType): number {
    switch (i) {
      case "OPERATION_TYPE_NOT_SET": {
        return 0;
      }
      case "PLEDGE": {
        return 1;
      }
      case "WITHDRAW": {
        return 2;
      }
      case "LOAN": {
        return 3;
      }
      case "REPAY": {
        return 4;
      }
      case "CANCEL": {
        return 5;
      }
      case "LIQUIDATION": {
        return 50;
      }
      case "REVIEW": {
        return 100;
      }
      case "CHARGE": {
        return 101;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const UserStatus = {
  USER_STATUS_NOT_SET: "USER_STATUS_NOT_SET",
  NORMAL: "NORMAL",
  LIQUIDATING: "LIQUIDATING",
  /**
   * @private
   */
  _fromInt: function (i: number): UserStatus {
    switch (i) {
      case 0: {
        return "USER_STATUS_NOT_SET";
      }
      case 1: {
        return "NORMAL";
      }
      case 2: {
        return "LIQUIDATING";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as UserStatus;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: UserStatus): number {
    switch (i) {
      case "USER_STATUS_NOT_SET": {
        return 0;
      }
      case "NORMAL": {
        return 1;
      }
      case "LIQUIDATING": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const OperationStatus = {
  OPERATION_STATUS_NOT_SET: "OPERATION_STATUS_NOT_SET",
  PENDING: "PENDING",
  /**
   * only for LOAN operation
   */
  QUEUED: "QUEUED",
  PROCESSING: "PROCESSING",
  REVIEWING: "REVIEWING",
  SUCCESS: "SUCCESS",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  /**
   * @private
   */
  _fromInt: function (i: number): OperationStatus {
    switch (i) {
      case 0: {
        return "OPERATION_STATUS_NOT_SET";
      }
      case 1: {
        return "PENDING";
      }
      case 2: {
        return "QUEUED";
      }
      case 3: {
        return "PROCESSING";
      }
      case 4: {
        return "REVIEWING";
      }
      case 5: {
        return "SUCCESS";
      }
      case 6: {
        return "FAILED";
      }
      case 7: {
        return "CANCELLED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as OperationStatus;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: OperationStatus): number {
    switch (i) {
      case "OPERATION_STATUS_NOT_SET": {
        return 0;
      }
      case "PENDING": {
        return 1;
      }
      case "QUEUED": {
        return 2;
      }
      case "PROCESSING": {
        return 3;
      }
      case "REVIEWING": {
        return 4;
      }
      case "SUCCESS": {
        return 5;
      }
      case "FAILED": {
        return 6;
      }
      case "CANCELLED": {
        return 7;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const PledgeType = {
  PLEDGE_TYPE_NOT_SET: "PLEDGE_TYPE_NOT_SET",
  NODE: "NODE",
  POOL: "POOL",
  LOCAL: "LOCAL",
  /**
   * @private
   */
  _fromInt: function (i: number): PledgeType {
    switch (i) {
      case 0: {
        return "PLEDGE_TYPE_NOT_SET";
      }
      case 1: {
        return "NODE";
      }
      case 2: {
        return "POOL";
      }
      case 3: {
        return "LOCAL";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as PledgeType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: PledgeType): number {
    switch (i) {
      case "PLEDGE_TYPE_NOT_SET": {
        return 0;
      }
      case "NODE": {
        return 1;
      }
      case "POOL": {
        return 2;
      }
      case "LOCAL": {
        return 3;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const ReviewData = {
  /**
   * Serializes ReviewData to protobuf.
   */
  encode: function (msg: Partial<ReviewData>): Uint8Array {
    return ReviewData._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes ReviewData from protobuf.
   */
  decode: function (bytes: ByteSource): ReviewData {
    return ReviewData._readMessage(
      ReviewData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ReviewData with all fields set to their default value.
   */
  initialize: function (): ReviewData {
    return {
      tid: "",
      p: false,
      fr: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ReviewData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.tid) {
      writer.writeString(1, msg.tid);
    }
    if (msg.p) {
      writer.writeBool(2, msg.p);
    }
    if (msg.fr) {
      writer.writeString(3, msg.fr);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReviewData, reader: BinaryReader): ReviewData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.tid = reader.readString();
          break;
        }
        case 2: {
          msg.p = reader.readBool();
          break;
        }
        case 3: {
          msg.fr = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TransferWithdrawData = {
  /**
   * Serializes TransferWithdrawData to protobuf.
   */
  encode: function (msg: Partial<TransferWithdrawData>): Uint8Array {
    return TransferWithdrawData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes TransferWithdrawData from protobuf.
   */
  decode: function (bytes: ByteSource): TransferWithdrawData {
    return TransferWithdrawData._readMessage(
      TransferWithdrawData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes TransferWithdrawData with all fields set to their default value.
   */
  initialize: function (): TransferWithdrawData {
    return {
      pt: PledgeType._fromInt(0),
      assetId: "",
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TransferWithdrawData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.pt && PledgeType._toInt(msg.pt)) {
      writer.writeEnum(1, PledgeType._toInt(msg.pt));
    }
    if (msg.assetId) {
      writer.writeString(2, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(3, msg.amount);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TransferWithdrawData,
    reader: BinaryReader
  ): TransferWithdrawData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.pt = PledgeType._fromInt(reader.readEnum());
          break;
        }
        case 2: {
          msg.assetId = reader.readString();
          break;
        }
        case 3: {
          msg.amount = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TransferPledgeData = {
  /**
   * Serializes TransferPledgeData to protobuf.
   */
  encode: function (msg: Partial<TransferPledgeData>): Uint8Array {
    return TransferPledgeData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes TransferPledgeData from protobuf.
   */
  decode: function (bytes: ByteSource): TransferPledgeData {
    return TransferPledgeData._readMessage(
      TransferPledgeData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes TransferPledgeData with all fields set to their default value.
   */
  initialize: function (): TransferPledgeData {
    return {
      pt: PledgeType._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TransferPledgeData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.pt && PledgeType._toInt(msg.pt)) {
      writer.writeEnum(1, PledgeType._toInt(msg.pt));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TransferPledgeData,
    reader: BinaryReader
  ): TransferPledgeData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.pt = PledgeType._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TransferLoanData = {
  /**
   * Serializes TransferLoanData to protobuf.
   */
  encode: function (msg: Partial<TransferLoanData>): Uint8Array {
    return TransferLoanData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes TransferLoanData from protobuf.
   */
  decode: function (bytes: ByteSource): TransferLoanData {
    return TransferLoanData._readMessage(
      TransferLoanData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes TransferLoanData with all fields set to their default value.
   */
  initialize: function (): TransferLoanData {
    return {
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TransferLoanData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.amount) {
      writer.writeString(1, msg.amount);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TransferLoanData,
    reader: BinaryReader
  ): TransferLoanData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.amount = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TransferRepayData = {
  /**
   * Serializes TransferRepayData to protobuf.
   */
  encode: function (_msg?: Partial<TransferRepayData>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes TransferRepayData from protobuf.
   */
  decode: function (_bytes?: ByteSource): TransferRepayData {
    return {};
  },

  /**
   * Initializes TransferRepayData with all fields set to their default value.
   */
  initialize: function (): TransferRepayData {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<TransferRepayData>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: TransferRepayData,
    _reader: BinaryReader
  ): TransferRepayData {
    return _msg;
  },
};

export const TransferCancelData = {
  /**
   * Serializes TransferCancelData to protobuf.
   */
  encode: function (msg: Partial<TransferCancelData>): Uint8Array {
    return TransferCancelData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes TransferCancelData from protobuf.
   */
  decode: function (bytes: ByteSource): TransferCancelData {
    return TransferCancelData._readMessage(
      TransferCancelData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes TransferCancelData with all fields set to their default value.
   */
  initialize: function (): TransferCancelData {
    return {
      id: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TransferCancelData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TransferCancelData,
    reader: BinaryReader
  ): TransferCancelData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ConfigRequest = {
  /**
   * Serializes ConfigRequest to protobuf.
   */
  encode: function (_msg?: Partial<ConfigRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ConfigRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ConfigRequest {
    return {};
  },

  /**
   * Initializes ConfigRequest with all fields set to their default value.
   */
  initialize: function (): ConfigRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ConfigRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ConfigRequest,
    _reader: BinaryReader
  ): ConfigRequest {
    return _msg;
  },
};

export const ConfigResponse = {
  /**
   * Serializes ConfigResponse to protobuf.
   */
  encode: function (msg: Partial<ConfigResponse>): Uint8Array {
    return ConfigResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ConfigResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ConfigResponse {
    return ConfigResponse._readMessage(
      ConfigResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ConfigResponse with all fields set to their default value.
   */
  initialize: function (): ConfigResponse {
    return {
      securityPledgeRate: "",
      clearingPledgeRate: "",
      interestRate: "",
      interestDuration: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ConfigResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.securityPledgeRate) {
      writer.writeString(1, msg.securityPledgeRate);
    }
    if (msg.clearingPledgeRate) {
      writer.writeString(2, msg.clearingPledgeRate);
    }
    if (msg.interestRate) {
      writer.writeString(3, msg.interestRate);
    }
    if (msg.interestDuration) {
      writer.writeUint32(4, msg.interestDuration);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ConfigResponse,
    reader: BinaryReader
  ): ConfigResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.securityPledgeRate = reader.readString();
          break;
        }
        case 2: {
          msg.clearingPledgeRate = reader.readString();
          break;
        }
        case 3: {
          msg.interestRate = reader.readString();
          break;
        }
        case 4: {
          msg.interestDuration = reader.readUint32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Pagination = {
  /**
   * Serializes Pagination to protobuf.
   */
  encode: function (msg: Partial<Pagination>): Uint8Array {
    return Pagination._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Pagination from protobuf.
   */
  decode: function (bytes: ByteSource): Pagination {
    return Pagination._readMessage(
      Pagination.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Pagination with all fields set to their default value.
   */
  initialize: function (): Pagination {
    return {
      nextCursor: "",
      hasNext: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Pagination>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.nextCursor) {
      writer.writeString(1, msg.nextCursor);
    }
    if (msg.hasNext) {
      writer.writeBool(2, msg.hasNext);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pagination, reader: BinaryReader): Pagination {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.nextCursor = reader.readString();
          break;
        }
        case 2: {
          msg.hasNext = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Asset = {
  /**
   * Serializes Asset to protobuf.
   */
  encode: function (msg: Partial<Asset>): Uint8Array {
    return Asset._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Asset from protobuf.
   */
  decode: function (bytes: ByteSource): Asset {
    return Asset._readMessage(Asset.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      price: "",
      priceAt: 0,
      pledgeRate: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Asset>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.assetId) {
      writer.writeString(1, msg.assetId);
    }
    if (msg.chainId) {
      writer.writeString(2, msg.chainId);
    }
    if (msg.symbol) {
      writer.writeString(3, msg.symbol);
    }
    if (msg.name) {
      writer.writeString(4, msg.name);
    }
    if (msg.logo) {
      writer.writeString(5, msg.logo);
    }
    if (msg.price) {
      writer.writeString(6, msg.price);
    }
    if (msg.priceAt) {
      writer.writeInt32(7, msg.priceAt);
    }
    if (msg.pledgeRate) {
      writer.writeString(8, msg.pledgeRate);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, reader: BinaryReader): Asset {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.assetId = reader.readString();
          break;
        }
        case 2: {
          msg.chainId = reader.readString();
          break;
        }
        case 3: {
          msg.symbol = reader.readString();
          break;
        }
        case 4: {
          msg.name = reader.readString();
          break;
        }
        case 5: {
          msg.logo = reader.readString();
          break;
        }
        case 6: {
          msg.price = reader.readString();
          break;
        }
        case 7: {
          msg.priceAt = reader.readInt32();
          break;
        }
        case 8: {
          msg.pledgeRate = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAssetsRequest = {
  /**
   * Serializes ListAssetsRequest to protobuf.
   */
  encode: function (_msg?: Partial<ListAssetsRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ListAssetsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ListAssetsRequest {
    return {};
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (): ListAssetsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ListAssetsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ListAssetsRequest,
    _reader: BinaryReader
  ): ListAssetsRequest {
    return _msg;
  },
};

export const ListAssetsResponse = {
  /**
   * Serializes ListAssetsResponse to protobuf.
   */
  encode: function (msg: Partial<ListAssetsResponse>): Uint8Array {
    return ListAssetsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAssetsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListAssetsResponse {
    return ListAssetsResponse._readMessage(
      ListAssetsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (): ListAssetsResponse {
    return {
      assets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAssetsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.assets?.length) {
      writer.writeRepeatedMessage(1, msg.assets as any, Asset._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    reader: BinaryReader
  ): ListAssetsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Asset.initialize();
          reader.readMessage(m, Asset._readMessage);
          msg.assets.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PledgeItem = {
  /**
   * Serializes PledgeItem to protobuf.
   */
  encode: function (msg: Partial<PledgeItem>): Uint8Array {
    return PledgeItem._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes PledgeItem from protobuf.
   */
  decode: function (bytes: ByteSource): PledgeItem {
    return PledgeItem._readMessage(
      PledgeItem.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PledgeItem with all fields set to their default value.
   */
  initialize: function (): PledgeItem {
    return {
      asset: Asset.initialize(),
      amount: "",
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PledgeItem>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.asset) {
      writer.writeMessage(1, msg.asset, Asset._writeMessage);
    }
    if (msg.amount) {
      writer.writeString(2, msg.amount);
    }
    if (msg.name) {
      writer.writeString(3, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PledgeItem, reader: BinaryReader): PledgeItem {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.asset, Asset._readMessage);
          break;
        }
        case 2: {
          msg.amount = reader.readString();
          break;
        }
        case 3: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PledgeGroup = {
  /**
   * Serializes PledgeGroup to protobuf.
   */
  encode: function (msg: Partial<PledgeGroup>): Uint8Array {
    return PledgeGroup._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes PledgeGroup from protobuf.
   */
  decode: function (bytes: ByteSource): PledgeGroup {
    return PledgeGroup._readMessage(
      PledgeGroup.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PledgeGroup with all fields set to their default value.
   */
  initialize: function (): PledgeGroup {
    return {
      pledgeType: PledgeType._fromInt(0),
      active: false,
      items: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PledgeGroup>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.pledgeType && PledgeType._toInt(msg.pledgeType)) {
      writer.writeEnum(1, PledgeType._toInt(msg.pledgeType));
    }
    if (msg.active) {
      writer.writeBool(2, msg.active);
    }
    if (msg.items?.length) {
      writer.writeRepeatedMessage(
        3,
        msg.items as any,
        PledgeItem._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PledgeGroup, reader: BinaryReader): PledgeGroup {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.pledgeType = PledgeType._fromInt(reader.readEnum());
          break;
        }
        case 2: {
          msg.active = reader.readBool();
          break;
        }
        case 3: {
          const m = PledgeItem.initialize();
          reader.readMessage(m, PledgeItem._readMessage);
          msg.items.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const StateRequest = {
  /**
   * Serializes StateRequest to protobuf.
   */
  encode: function (msg: Partial<StateRequest>): Uint8Array {
    return StateRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes StateRequest from protobuf.
   */
  decode: function (bytes: ByteSource): StateRequest {
    return StateRequest._readMessage(
      StateRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes StateRequest with all fields set to their default value.
   */
  initialize: function (): StateRequest {
    return {
      operationId: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<StateRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.operationId) {
      writer.writeUint64String(1, msg.operationId.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: StateRequest,
    reader: BinaryReader
  ): StateRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.operationId = BigInt(reader.readUint64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const StateResponse = {
  /**
   * Serializes StateResponse to protobuf.
   */
  encode: function (msg: Partial<StateResponse>): Uint8Array {
    return StateResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes StateResponse from protobuf.
   */
  decode: function (bytes: ByteSource): StateResponse {
    return StateResponse._readMessage(
      StateResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes StateResponse with all fields set to their default value.
   */
  initialize: function (): StateResponse {
    return {
      loanAmountQueued: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<StateResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.loanAmountQueued) {
      writer.writeString(1, msg.loanAmountQueued);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: StateResponse,
    reader: BinaryReader
  ): StateResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.loanAmountQueued = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const InfoRequest = {
  /**
   * Serializes InfoRequest to protobuf.
   */
  encode: function (_msg?: Partial<InfoRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes InfoRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): InfoRequest {
    return {};
  },

  /**
   * Initializes InfoRequest with all fields set to their default value.
   */
  initialize: function (): InfoRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<InfoRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: InfoRequest,
    _reader: BinaryReader
  ): InfoRequest {
    return _msg;
  },
};

export const InfoResponse = {
  /**
   * Serializes InfoResponse to protobuf.
   */
  encode: function (msg: Partial<InfoResponse>): Uint8Array {
    return InfoResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes InfoResponse from protobuf.
   */
  decode: function (bytes: ByteSource): InfoResponse {
    return InfoResponse._readMessage(
      InfoResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes InfoResponse with all fields set to their default value.
   */
  initialize: function (): InfoResponse {
    return {
      loanAmount: "",
      groups: [],
      loanLimit: "",
      userStatus: UserStatus._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<InfoResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.loanAmount) {
      writer.writeString(1, msg.loanAmount);
    }
    if (msg.groups?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.groups as any,
        PledgeGroup._writeMessage
      );
    }
    if (msg.loanLimit) {
      writer.writeString(3, msg.loanLimit);
    }
    if (msg.userStatus && UserStatus._toInt(msg.userStatus)) {
      writer.writeEnum(4, UserStatus._toInt(msg.userStatus));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: InfoResponse,
    reader: BinaryReader
  ): InfoResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.loanAmount = reader.readString();
          break;
        }
        case 2: {
          const m = PledgeGroup.initialize();
          reader.readMessage(m, PledgeGroup._readMessage);
          msg.groups.push(m);
          break;
        }
        case 3: {
          msg.loanLimit = reader.readString();
          break;
        }
        case 4: {
          msg.userStatus = UserStatus._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreatePaymentRequest = {
  /**
   * Serializes CreatePaymentRequest to protobuf.
   */
  encode: function (msg: Partial<CreatePaymentRequest>): Uint8Array {
    return CreatePaymentRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes CreatePaymentRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreatePaymentRequest {
    return CreatePaymentRequest._readMessage(
      CreatePaymentRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes CreatePaymentRequest with all fields set to their default value.
   */
  initialize: function (): CreatePaymentRequest {
    return {
      operationTraceId: "",
      traceId: "",
      memo: "",
      assetId: "",
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<CreatePaymentRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.operationTraceId) {
      writer.writeString(1, msg.operationTraceId);
    }
    if (msg.traceId) {
      writer.writeString(2, msg.traceId);
    }
    if (msg.memo) {
      writer.writeString(3, msg.memo);
    }
    if (msg.assetId) {
      writer.writeString(4, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(5, msg.amount);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreatePaymentRequest,
    reader: BinaryReader
  ): CreatePaymentRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.operationTraceId = reader.readString();
          break;
        }
        case 2: {
          msg.traceId = reader.readString();
          break;
        }
        case 3: {
          msg.memo = reader.readString();
          break;
        }
        case 4: {
          msg.assetId = reader.readString();
          break;
        }
        case 5: {
          msg.amount = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreatePaymentResponse = {
  /**
   * Serializes CreatePaymentResponse to protobuf.
   */
  encode: function (msg: Partial<CreatePaymentResponse>): Uint8Array {
    return CreatePaymentResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes CreatePaymentResponse from protobuf.
   */
  decode: function (bytes: ByteSource): CreatePaymentResponse {
    return CreatePaymentResponse._readMessage(
      CreatePaymentResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes CreatePaymentResponse with all fields set to their default value.
   */
  initialize: function (): CreatePaymentResponse {
    return {
      code: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<CreatePaymentResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.code) {
      writer.writeString(1, msg.code);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreatePaymentResponse,
    reader: BinaryReader
  ): CreatePaymentResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.code = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetOperationLogRequest = {
  /**
   * Serializes GetOperationLogRequest to protobuf.
   */
  encode: function (msg: Partial<GetOperationLogRequest>): Uint8Array {
    return GetOperationLogRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetOperationLogRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetOperationLogRequest {
    return GetOperationLogRequest._readMessage(
      GetOperationLogRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetOperationLogRequest with all fields set to their default value.
   */
  initialize: function (): GetOperationLogRequest {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetOperationLogRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetOperationLogRequest,
    reader: BinaryReader
  ): GetOperationLogRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const OperationLog = {
  /**
   * Serializes OperationLog to protobuf.
   */
  encode: function (msg: Partial<OperationLog>): Uint8Array {
    return OperationLog._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes OperationLog from protobuf.
   */
  decode: function (bytes: ByteSource): OperationLog {
    return OperationLog._readMessage(
      OperationLog.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes OperationLog with all fields set to their default value.
   */
  initialize: function (): OperationLog {
    return {
      id: 0n,
      traceId: "",
      operationType: OperationType._fromInt(0),
      loanAmount: "",
      repayAmount: "",
      pledgeType: PledgeType._fromInt(0),
      pledgeAmount: "",
      pledgeAsset: Asset.initialize(),
      status: OperationStatus._fromInt(0),
      createdAt: 0,
      failedReason: "",
      transferMemo: "",
      transferAssetId: "",
      transferAmount: "",
      isSystem: false,
      beforeLoanAmount: "",
      afterLoanAmount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<OperationLog>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeUint64String(17, msg.id.toString() as any);
    }
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    if (msg.operationType && OperationType._toInt(msg.operationType)) {
      writer.writeEnum(2, OperationType._toInt(msg.operationType));
    }
    if (msg.loanAmount) {
      writer.writeString(3, msg.loanAmount);
    }
    if (msg.repayAmount) {
      writer.writeString(4, msg.repayAmount);
    }
    if (msg.pledgeType && PledgeType._toInt(msg.pledgeType)) {
      writer.writeEnum(5, PledgeType._toInt(msg.pledgeType));
    }
    if (msg.pledgeAmount) {
      writer.writeString(6, msg.pledgeAmount);
    }
    if (msg.pledgeAsset) {
      writer.writeMessage(7, msg.pledgeAsset, Asset._writeMessage);
    }
    if (msg.status && OperationStatus._toInt(msg.status)) {
      writer.writeEnum(8, OperationStatus._toInt(msg.status));
    }
    if (msg.createdAt) {
      writer.writeInt32(9, msg.createdAt);
    }
    if (msg.failedReason) {
      writer.writeString(10, msg.failedReason);
    }
    if (msg.transferMemo) {
      writer.writeString(11, msg.transferMemo);
    }
    if (msg.transferAssetId) {
      writer.writeString(12, msg.transferAssetId);
    }
    if (msg.transferAmount) {
      writer.writeString(13, msg.transferAmount);
    }
    if (msg.isSystem) {
      writer.writeBool(14, msg.isSystem);
    }
    if (msg.beforeLoanAmount) {
      writer.writeString(15, msg.beforeLoanAmount);
    }
    if (msg.afterLoanAmount) {
      writer.writeString(16, msg.afterLoanAmount);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: OperationLog,
    reader: BinaryReader
  ): OperationLog {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 17: {
          msg.id = BigInt(reader.readUint64String());
          break;
        }
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        case 2: {
          msg.operationType = OperationType._fromInt(reader.readEnum());
          break;
        }
        case 3: {
          msg.loanAmount = reader.readString();
          break;
        }
        case 4: {
          msg.repayAmount = reader.readString();
          break;
        }
        case 5: {
          msg.pledgeType = PledgeType._fromInt(reader.readEnum());
          break;
        }
        case 6: {
          msg.pledgeAmount = reader.readString();
          break;
        }
        case 7: {
          reader.readMessage(msg.pledgeAsset, Asset._readMessage);
          break;
        }
        case 8: {
          msg.status = OperationStatus._fromInt(reader.readEnum());
          break;
        }
        case 9: {
          msg.createdAt = reader.readInt32();
          break;
        }
        case 10: {
          msg.failedReason = reader.readString();
          break;
        }
        case 11: {
          msg.transferMemo = reader.readString();
          break;
        }
        case 12: {
          msg.transferAssetId = reader.readString();
          break;
        }
        case 13: {
          msg.transferAmount = reader.readString();
          break;
        }
        case 14: {
          msg.isSystem = reader.readBool();
          break;
        }
        case 15: {
          msg.beforeLoanAmount = reader.readString();
          break;
        }
        case 16: {
          msg.afterLoanAmount = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetOperationLogResponse = {
  /**
   * Serializes GetOperationLogResponse to protobuf.
   */
  encode: function (msg: Partial<GetOperationLogResponse>): Uint8Array {
    return GetOperationLogResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetOperationLogResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetOperationLogResponse {
    return GetOperationLogResponse._readMessage(
      GetOperationLogResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetOperationLogResponse with all fields set to their default value.
   */
  initialize: function (): GetOperationLogResponse {
    return {
      operationLog: OperationLog.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetOperationLogResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.operationLog) {
      writer.writeMessage(1, msg.operationLog, OperationLog._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetOperationLogResponse,
    reader: BinaryReader
  ): GetOperationLogResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.operationLog, OperationLog._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListOperationLogsRequest = {
  /**
   * Serializes ListOperationLogsRequest to protobuf.
   */
  encode: function (msg: Partial<ListOperationLogsRequest>): Uint8Array {
    return ListOperationLogsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListOperationLogsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListOperationLogsRequest {
    return ListOperationLogsRequest._readMessage(
      ListOperationLogsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListOperationLogsRequest with all fields set to their default value.
   */
  initialize: function (): ListOperationLogsRequest {
    return {
      cursor: 0n,
      limit: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListOperationLogsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.cursor) {
      writer.writeInt64String(1, msg.cursor.toString() as any);
    }
    if (msg.limit) {
      writer.writeInt64String(2, msg.limit.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOperationLogsRequest,
    reader: BinaryReader
  ): ListOperationLogsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.cursor = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.limit = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListOperationLogsResponse = {
  /**
   * Serializes ListOperationLogsResponse to protobuf.
   */
  encode: function (msg: Partial<ListOperationLogsResponse>): Uint8Array {
    return ListOperationLogsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListOperationLogsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListOperationLogsResponse {
    return ListOperationLogsResponse._readMessage(
      ListOperationLogsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListOperationLogsResponse with all fields set to their default value.
   */
  initialize: function (): ListOperationLogsResponse {
    return {
      operationLogs: [],
      pagination: Pagination.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListOperationLogsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.operationLogs?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.operationLogs as any,
        OperationLog._writeMessage
      );
    }
    if (msg.pagination) {
      writer.writeMessage(2, msg.pagination, Pagination._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOperationLogsResponse,
    reader: BinaryReader
  ): ListOperationLogsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = OperationLog.initialize();
          reader.readMessage(m, OperationLog._readMessage);
          msg.operationLogs.push(m);
          break;
        }
        case 2: {
          reader.readMessage(msg.pagination, Pagination._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetLiquidationRequest = {
  /**
   * Serializes GetLiquidationRequest to protobuf.
   */
  encode: function (msg: Partial<GetLiquidationRequest>): Uint8Array {
    return GetLiquidationRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetLiquidationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetLiquidationRequest {
    return GetLiquidationRequest._readMessage(
      GetLiquidationRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetLiquidationRequest with all fields set to their default value.
   */
  initialize: function (): GetLiquidationRequest {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetLiquidationRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetLiquidationRequest,
    reader: BinaryReader
  ): GetLiquidationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const LiquidationPledge = {
  /**
   * Serializes LiquidationPledge to protobuf.
   */
  encode: function (msg: Partial<LiquidationPledge>): Uint8Array {
    return LiquidationPledge._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes LiquidationPledge from protobuf.
   */
  decode: function (bytes: ByteSource): LiquidationPledge {
    return LiquidationPledge._readMessage(
      LiquidationPledge.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes LiquidationPledge with all fields set to their default value.
   */
  initialize: function (): LiquidationPledge {
    return {
      id: 0n,
      userId: "",
      type: PledgeType._fromInt(0),
      assetId: "",
      amount: "",
      contractId: "",
      name: "",
      traceId: "",
      assetPrice: "",
      assetPriceUpdatedAt: 0,
      done: false,
      createdAt: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LiquidationPledge>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt64String(1, msg.id.toString() as any);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.type && PledgeType._toInt(msg.type)) {
      writer.writeEnum(3, PledgeType._toInt(msg.type));
    }
    if (msg.assetId) {
      writer.writeString(4, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(5, msg.amount);
    }
    if (msg.contractId) {
      writer.writeString(6, msg.contractId);
    }
    if (msg.name) {
      writer.writeString(7, msg.name);
    }
    if (msg.traceId) {
      writer.writeString(8, msg.traceId);
    }
    if (msg.assetPrice) {
      writer.writeString(9, msg.assetPrice);
    }
    if (msg.assetPriceUpdatedAt) {
      writer.writeUint32(10, msg.assetPriceUpdatedAt);
    }
    if (msg.done) {
      writer.writeBool(11, msg.done);
    }
    if (msg.createdAt) {
      writer.writeUint32(12, msg.createdAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: LiquidationPledge,
    reader: BinaryReader
  ): LiquidationPledge {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.type = PledgeType._fromInt(reader.readEnum());
          break;
        }
        case 4: {
          msg.assetId = reader.readString();
          break;
        }
        case 5: {
          msg.amount = reader.readString();
          break;
        }
        case 6: {
          msg.contractId = reader.readString();
          break;
        }
        case 7: {
          msg.name = reader.readString();
          break;
        }
        case 8: {
          msg.traceId = reader.readString();
          break;
        }
        case 9: {
          msg.assetPrice = reader.readString();
          break;
        }
        case 10: {
          msg.assetPriceUpdatedAt = reader.readUint32();
          break;
        }
        case 11: {
          msg.done = reader.readBool();
          break;
        }
        case 12: {
          msg.createdAt = reader.readUint32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetLiquidationResponse = {
  /**
   * Serializes GetLiquidationResponse to protobuf.
   */
  encode: function (msg: Partial<GetLiquidationResponse>): Uint8Array {
    return GetLiquidationResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetLiquidationResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetLiquidationResponse {
    return GetLiquidationResponse._readMessage(
      GetLiquidationResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetLiquidationResponse with all fields set to their default value.
   */
  initialize: function (): GetLiquidationResponse {
    return {
      op: OperationLog.initialize(),
      pledges: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetLiquidationResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.op) {
      writer.writeMessage(1, msg.op, OperationLog._writeMessage);
    }
    if (msg.pledges?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.pledges as any,
        LiquidationPledge._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetLiquidationResponse,
    reader: BinaryReader
  ): GetLiquidationResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.op, OperationLog._readMessage);
          break;
        }
        case 2: {
          const m = LiquidationPledge.initialize();
          reader.readMessage(m, LiquidationPledge._readMessage);
          msg.pledges.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const OperationTypeJSON = {
  OPERATION_TYPE_NOT_SET: "OPERATION_TYPE_NOT_SET",
  PLEDGE: "PLEDGE",
  WITHDRAW: "WITHDRAW",
  LOAN: "LOAN",
  REPAY: "REPAY",
  CANCEL: "CANCEL",
  LIQUIDATION: "LIQUIDATION",
  REVIEW: "REVIEW",
  CHARGE: "CHARGE",
  /**
   * @private
   */
  _fromInt: function (i: number): OperationType {
    switch (i) {
      case 0: {
        return "OPERATION_TYPE_NOT_SET";
      }
      case 1: {
        return "PLEDGE";
      }
      case 2: {
        return "WITHDRAW";
      }
      case 3: {
        return "LOAN";
      }
      case 4: {
        return "REPAY";
      }
      case 5: {
        return "CANCEL";
      }
      case 50: {
        return "LIQUIDATION";
      }
      case 100: {
        return "REVIEW";
      }
      case 101: {
        return "CHARGE";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as OperationType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: OperationType): number {
    switch (i) {
      case "OPERATION_TYPE_NOT_SET": {
        return 0;
      }
      case "PLEDGE": {
        return 1;
      }
      case "WITHDRAW": {
        return 2;
      }
      case "LOAN": {
        return 3;
      }
      case "REPAY": {
        return 4;
      }
      case "CANCEL": {
        return 5;
      }
      case "LIQUIDATION": {
        return 50;
      }
      case "REVIEW": {
        return 100;
      }
      case "CHARGE": {
        return 101;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const UserStatusJSON = {
  USER_STATUS_NOT_SET: "USER_STATUS_NOT_SET",
  NORMAL: "NORMAL",
  LIQUIDATING: "LIQUIDATING",
  /**
   * @private
   */
  _fromInt: function (i: number): UserStatus {
    switch (i) {
      case 0: {
        return "USER_STATUS_NOT_SET";
      }
      case 1: {
        return "NORMAL";
      }
      case 2: {
        return "LIQUIDATING";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as UserStatus;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: UserStatus): number {
    switch (i) {
      case "USER_STATUS_NOT_SET": {
        return 0;
      }
      case "NORMAL": {
        return 1;
      }
      case "LIQUIDATING": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const OperationStatusJSON = {
  OPERATION_STATUS_NOT_SET: "OPERATION_STATUS_NOT_SET",
  PENDING: "PENDING",
  /**
   * only for LOAN operation
   */
  QUEUED: "QUEUED",
  PROCESSING: "PROCESSING",
  REVIEWING: "REVIEWING",
  SUCCESS: "SUCCESS",
  FAILED: "FAILED",
  CANCELLED: "CANCELLED",
  /**
   * @private
   */
  _fromInt: function (i: number): OperationStatus {
    switch (i) {
      case 0: {
        return "OPERATION_STATUS_NOT_SET";
      }
      case 1: {
        return "PENDING";
      }
      case 2: {
        return "QUEUED";
      }
      case 3: {
        return "PROCESSING";
      }
      case 4: {
        return "REVIEWING";
      }
      case 5: {
        return "SUCCESS";
      }
      case 6: {
        return "FAILED";
      }
      case 7: {
        return "CANCELLED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as OperationStatus;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: OperationStatus): number {
    switch (i) {
      case "OPERATION_STATUS_NOT_SET": {
        return 0;
      }
      case "PENDING": {
        return 1;
      }
      case "QUEUED": {
        return 2;
      }
      case "PROCESSING": {
        return 3;
      }
      case "REVIEWING": {
        return 4;
      }
      case "SUCCESS": {
        return 5;
      }
      case "FAILED": {
        return 6;
      }
      case "CANCELLED": {
        return 7;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const PledgeTypeJSON = {
  PLEDGE_TYPE_NOT_SET: "PLEDGE_TYPE_NOT_SET",
  NODE: "NODE",
  POOL: "POOL",
  LOCAL: "LOCAL",
  /**
   * @private
   */
  _fromInt: function (i: number): PledgeType {
    switch (i) {
      case 0: {
        return "PLEDGE_TYPE_NOT_SET";
      }
      case 1: {
        return "NODE";
      }
      case 2: {
        return "POOL";
      }
      case 3: {
        return "LOCAL";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as PledgeType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: PledgeType): number {
    switch (i) {
      case "PLEDGE_TYPE_NOT_SET": {
        return 0;
      }
      case "NODE": {
        return 1;
      }
      case "POOL": {
        return 2;
      }
      case "LOCAL": {
        return 3;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const ReviewDataJSON = {
  /**
   * Serializes ReviewData to JSON.
   */
  encode: function (msg: Partial<ReviewData>): string {
    return JSON.stringify(ReviewDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes ReviewData from JSON.
   */
  decode: function (json: string): ReviewData {
    return ReviewDataJSON._readMessage(
      ReviewDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ReviewData with all fields set to their default value.
   */
  initialize: function (): ReviewData {
    return {
      tid: "",
      p: false,
      fr: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<ReviewData>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.tid) {
      json.tid = msg.tid;
    }
    if (msg.p) {
      json.p = msg.p;
    }
    if (msg.fr) {
      json.fr = msg.fr;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReviewData, json: any): ReviewData {
    const _tid = json.tid;
    if (_tid) {
      msg.tid = _tid;
    }
    const _p = json.p;
    if (_p) {
      msg.p = _p;
    }
    const _fr = json.fr;
    if (_fr) {
      msg.fr = _fr;
    }
    return msg;
  },
};

export const TransferWithdrawDataJSON = {
  /**
   * Serializes TransferWithdrawData to JSON.
   */
  encode: function (msg: Partial<TransferWithdrawData>): string {
    return JSON.stringify(TransferWithdrawDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes TransferWithdrawData from JSON.
   */
  decode: function (json: string): TransferWithdrawData {
    return TransferWithdrawDataJSON._readMessage(
      TransferWithdrawDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes TransferWithdrawData with all fields set to their default value.
   */
  initialize: function (): TransferWithdrawData {
    return {
      pt: PledgeType._fromInt(0),
      assetId: "",
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TransferWithdrawData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pt && PledgeTypeJSON._toInt(msg.pt)) {
      json.pt = msg.pt;
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TransferWithdrawData,
    json: any
  ): TransferWithdrawData {
    const _pt = json.pt;
    if (_pt) {
      msg.pt = _pt;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    return msg;
  },
};

export const TransferPledgeDataJSON = {
  /**
   * Serializes TransferPledgeData to JSON.
   */
  encode: function (msg: Partial<TransferPledgeData>): string {
    return JSON.stringify(TransferPledgeDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes TransferPledgeData from JSON.
   */
  decode: function (json: string): TransferPledgeData {
    return TransferPledgeDataJSON._readMessage(
      TransferPledgeDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes TransferPledgeData with all fields set to their default value.
   */
  initialize: function (): TransferPledgeData {
    return {
      pt: PledgeType._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TransferPledgeData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pt && PledgeTypeJSON._toInt(msg.pt)) {
      json.pt = msg.pt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TransferPledgeData,
    json: any
  ): TransferPledgeData {
    const _pt = json.pt;
    if (_pt) {
      msg.pt = _pt;
    }
    return msg;
  },
};

export const TransferLoanDataJSON = {
  /**
   * Serializes TransferLoanData to JSON.
   */
  encode: function (msg: Partial<TransferLoanData>): string {
    return JSON.stringify(TransferLoanDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes TransferLoanData from JSON.
   */
  decode: function (json: string): TransferLoanData {
    return TransferLoanDataJSON._readMessage(
      TransferLoanDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes TransferLoanData with all fields set to their default value.
   */
  initialize: function (): TransferLoanData {
    return {
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TransferLoanData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.amount) {
      json.amount = msg.amount;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TransferLoanData, json: any): TransferLoanData {
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    return msg;
  },
};

export const TransferRepayDataJSON = {
  /**
   * Serializes TransferRepayData to JSON.
   */
  encode: function (_msg?: Partial<TransferRepayData>): string {
    return "{}";
  },

  /**
   * Deserializes TransferRepayData from JSON.
   */
  decode: function (_json?: string): TransferRepayData {
    return {};
  },

  /**
   * Initializes TransferRepayData with all fields set to their default value.
   */
  initialize: function (): TransferRepayData {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<TransferRepayData>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TransferRepayData,
    _json: any
  ): TransferRepayData {
    return msg;
  },
};

export const TransferCancelDataJSON = {
  /**
   * Serializes TransferCancelData to JSON.
   */
  encode: function (msg: Partial<TransferCancelData>): string {
    return JSON.stringify(TransferCancelDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes TransferCancelData from JSON.
   */
  decode: function (json: string): TransferCancelData {
    return TransferCancelDataJSON._readMessage(
      TransferCancelDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes TransferCancelData with all fields set to their default value.
   */
  initialize: function (): TransferCancelData {
    return {
      id: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TransferCancelData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TransferCancelData,
    json: any
  ): TransferCancelData {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    return msg;
  },
};

export const ConfigRequestJSON = {
  /**
   * Serializes ConfigRequest to JSON.
   */
  encode: function (_msg?: Partial<ConfigRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ConfigRequest from JSON.
   */
  decode: function (_json?: string): ConfigRequest {
    return {};
  },

  /**
   * Initializes ConfigRequest with all fields set to their default value.
   */
  initialize: function (): ConfigRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ConfigRequest>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: ConfigRequest, _json: any): ConfigRequest {
    return msg;
  },
};

export const ConfigResponseJSON = {
  /**
   * Serializes ConfigResponse to JSON.
   */
  encode: function (msg: Partial<ConfigResponse>): string {
    return JSON.stringify(ConfigResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ConfigResponse from JSON.
   */
  decode: function (json: string): ConfigResponse {
    return ConfigResponseJSON._readMessage(
      ConfigResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ConfigResponse with all fields set to their default value.
   */
  initialize: function (): ConfigResponse {
    return {
      securityPledgeRate: "",
      clearingPledgeRate: "",
      interestRate: "",
      interestDuration: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ConfigResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.securityPledgeRate) {
      json.securityPledgeRate = msg.securityPledgeRate;
    }
    if (msg.clearingPledgeRate) {
      json.clearingPledgeRate = msg.clearingPledgeRate;
    }
    if (msg.interestRate) {
      json.interestRate = msg.interestRate;
    }
    if (msg.interestDuration) {
      json.interestDuration = msg.interestDuration;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ConfigResponse, json: any): ConfigResponse {
    const _securityPledgeRate =
      json.securityPledgeRate ?? json.security_pledge_rate;
    if (_securityPledgeRate) {
      msg.securityPledgeRate = _securityPledgeRate;
    }
    const _clearingPledgeRate =
      json.clearingPledgeRate ?? json.clearing_pledge_rate;
    if (_clearingPledgeRate) {
      msg.clearingPledgeRate = _clearingPledgeRate;
    }
    const _interestRate = json.interestRate ?? json.interest_rate;
    if (_interestRate) {
      msg.interestRate = _interestRate;
    }
    const _interestDuration = json.interestDuration ?? json.interest_duration;
    if (_interestDuration) {
      msg.interestDuration = _interestDuration;
    }
    return msg;
  },
};

export const PaginationJSON = {
  /**
   * Serializes Pagination to JSON.
   */
  encode: function (msg: Partial<Pagination>): string {
    return JSON.stringify(PaginationJSON._writeMessage(msg));
  },

  /**
   * Deserializes Pagination from JSON.
   */
  decode: function (json: string): Pagination {
    return PaginationJSON._readMessage(
      PaginationJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Pagination with all fields set to their default value.
   */
  initialize: function (): Pagination {
    return {
      nextCursor: "",
      hasNext: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Pagination>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.nextCursor) {
      json.nextCursor = msg.nextCursor;
    }
    if (msg.hasNext) {
      json.hasNext = msg.hasNext;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pagination, json: any): Pagination {
    const _nextCursor = json.nextCursor ?? json.next_cursor;
    if (_nextCursor) {
      msg.nextCursor = _nextCursor;
    }
    const _hasNext = json.hasNext ?? json.has_next;
    if (_hasNext) {
      msg.hasNext = _hasNext;
    }
    return msg;
  },
};

export const AssetJSON = {
  /**
   * Serializes Asset to JSON.
   */
  encode: function (msg: Partial<Asset>): string {
    return JSON.stringify(AssetJSON._writeMessage(msg));
  },

  /**
   * Deserializes Asset from JSON.
   */
  decode: function (json: string): Asset {
    return AssetJSON._readMessage(AssetJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      price: "",
      priceAt: 0,
      pledgeRate: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Asset>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.chainId) {
      json.chainId = msg.chainId;
    }
    if (msg.symbol) {
      json.symbol = msg.symbol;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.logo) {
      json.logo = msg.logo;
    }
    if (msg.price) {
      json.price = msg.price;
    }
    if (msg.priceAt) {
      json.priceAt = msg.priceAt;
    }
    if (msg.pledgeRate) {
      json.pledgeRate = msg.pledgeRate;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, json: any): Asset {
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _chainId = json.chainId ?? json.chain_id;
    if (_chainId) {
      msg.chainId = _chainId;
    }
    const _symbol = json.symbol;
    if (_symbol) {
      msg.symbol = _symbol;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _logo = json.logo;
    if (_logo) {
      msg.logo = _logo;
    }
    const _price = json.price;
    if (_price) {
      msg.price = _price;
    }
    const _priceAt = json.priceAt ?? json.price_at;
    if (_priceAt) {
      msg.priceAt = _priceAt;
    }
    const _pledgeRate = json.pledgeRate ?? json.pledge_rate;
    if (_pledgeRate) {
      msg.pledgeRate = _pledgeRate;
    }
    return msg;
  },
};

export const ListAssetsRequestJSON = {
  /**
   * Serializes ListAssetsRequest to JSON.
   */
  encode: function (_msg?: Partial<ListAssetsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ListAssetsRequest from JSON.
   */
  decode: function (_json?: string): ListAssetsRequest {
    return {};
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (): ListAssetsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ListAssetsRequest>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsRequest,
    _json: any
  ): ListAssetsRequest {
    return msg;
  },
};

export const ListAssetsResponseJSON = {
  /**
   * Serializes ListAssetsResponse to JSON.
   */
  encode: function (msg: Partial<ListAssetsResponse>): string {
    return JSON.stringify(ListAssetsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAssetsResponse from JSON.
   */
  decode: function (json: string): ListAssetsResponse {
    return ListAssetsResponseJSON._readMessage(
      ListAssetsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (): ListAssetsResponse {
    return {
      assets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAssetsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assets?.length) {
      json.assets = msg.assets.map(AssetJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    json: any
  ): ListAssetsResponse {
    const _assets = json.assets;
    if (_assets) {
      for (const item of _assets) {
        const m = Asset.initialize();
        AssetJSON._readMessage(m, item);
        msg.assets.push(m);
      }
    }
    return msg;
  },
};

export const PledgeItemJSON = {
  /**
   * Serializes PledgeItem to JSON.
   */
  encode: function (msg: Partial<PledgeItem>): string {
    return JSON.stringify(PledgeItemJSON._writeMessage(msg));
  },

  /**
   * Deserializes PledgeItem from JSON.
   */
  decode: function (json: string): PledgeItem {
    return PledgeItemJSON._readMessage(
      PledgeItemJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PledgeItem with all fields set to their default value.
   */
  initialize: function (): PledgeItem {
    return {
      asset: Asset.initialize(),
      amount: "",
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<PledgeItem>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.asset) {
      const asset = AssetJSON._writeMessage(msg.asset);
      if (Object.keys(asset).length > 0) {
        json.asset = asset;
      }
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PledgeItem, json: any): PledgeItem {
    const _asset = json.asset;
    if (_asset) {
      const m = Asset.initialize();
      AssetJSON._readMessage(m, _asset);
      msg.asset = m;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    return msg;
  },
};

export const PledgeGroupJSON = {
  /**
   * Serializes PledgeGroup to JSON.
   */
  encode: function (msg: Partial<PledgeGroup>): string {
    return JSON.stringify(PledgeGroupJSON._writeMessage(msg));
  },

  /**
   * Deserializes PledgeGroup from JSON.
   */
  decode: function (json: string): PledgeGroup {
    return PledgeGroupJSON._readMessage(
      PledgeGroupJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PledgeGroup with all fields set to their default value.
   */
  initialize: function (): PledgeGroup {
    return {
      pledgeType: PledgeType._fromInt(0),
      active: false,
      items: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<PledgeGroup>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pledgeType && PledgeTypeJSON._toInt(msg.pledgeType)) {
      json.pledgeType = msg.pledgeType;
    }
    if (msg.active) {
      json.active = msg.active;
    }
    if (msg.items?.length) {
      json.items = msg.items.map(PledgeItemJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PledgeGroup, json: any): PledgeGroup {
    const _pledgeType = json.pledgeType ?? json.pledge_type;
    if (_pledgeType) {
      msg.pledgeType = _pledgeType;
    }
    const _active = json.active;
    if (_active) {
      msg.active = _active;
    }
    const _items = json.items;
    if (_items) {
      for (const item of _items) {
        const m = PledgeItem.initialize();
        PledgeItemJSON._readMessage(m, item);
        msg.items.push(m);
      }
    }
    return msg;
  },
};

export const StateRequestJSON = {
  /**
   * Serializes StateRequest to JSON.
   */
  encode: function (msg: Partial<StateRequest>): string {
    return JSON.stringify(StateRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes StateRequest from JSON.
   */
  decode: function (json: string): StateRequest {
    return StateRequestJSON._readMessage(
      StateRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes StateRequest with all fields set to their default value.
   */
  initialize: function (): StateRequest {
    return {
      operationId: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<StateRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.operationId) {
      json.operationId = msg.operationId.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: StateRequest, json: any): StateRequest {
    const _operationId = json.operationId ?? json.operation_id;
    if (_operationId) {
      msg.operationId = BigInt(_operationId);
    }
    return msg;
  },
};

export const StateResponseJSON = {
  /**
   * Serializes StateResponse to JSON.
   */
  encode: function (msg: Partial<StateResponse>): string {
    return JSON.stringify(StateResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes StateResponse from JSON.
   */
  decode: function (json: string): StateResponse {
    return StateResponseJSON._readMessage(
      StateResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes StateResponse with all fields set to their default value.
   */
  initialize: function (): StateResponse {
    return {
      loanAmountQueued: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<StateResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.loanAmountQueued) {
      json.loanAmountQueued = msg.loanAmountQueued;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: StateResponse, json: any): StateResponse {
    const _loanAmountQueued = json.loanAmountQueued ?? json.loan_amount_queued;
    if (_loanAmountQueued) {
      msg.loanAmountQueued = _loanAmountQueued;
    }
    return msg;
  },
};

export const InfoRequestJSON = {
  /**
   * Serializes InfoRequest to JSON.
   */
  encode: function (_msg?: Partial<InfoRequest>): string {
    return "{}";
  },

  /**
   * Deserializes InfoRequest from JSON.
   */
  decode: function (_json?: string): InfoRequest {
    return {};
  },

  /**
   * Initializes InfoRequest with all fields set to their default value.
   */
  initialize: function (): InfoRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<InfoRequest>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: InfoRequest, _json: any): InfoRequest {
    return msg;
  },
};

export const InfoResponseJSON = {
  /**
   * Serializes InfoResponse to JSON.
   */
  encode: function (msg: Partial<InfoResponse>): string {
    return JSON.stringify(InfoResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes InfoResponse from JSON.
   */
  decode: function (json: string): InfoResponse {
    return InfoResponseJSON._readMessage(
      InfoResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes InfoResponse with all fields set to their default value.
   */
  initialize: function (): InfoResponse {
    return {
      loanAmount: "",
      groups: [],
      loanLimit: "",
      userStatus: UserStatus._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<InfoResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.loanAmount) {
      json.loanAmount = msg.loanAmount;
    }
    if (msg.groups?.length) {
      json.groups = msg.groups.map(PledgeGroupJSON._writeMessage);
    }
    if (msg.loanLimit) {
      json.loanLimit = msg.loanLimit;
    }
    if (msg.userStatus && UserStatusJSON._toInt(msg.userStatus)) {
      json.userStatus = msg.userStatus;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: InfoResponse, json: any): InfoResponse {
    const _loanAmount = json.loanAmount ?? json.loan_amount;
    if (_loanAmount) {
      msg.loanAmount = _loanAmount;
    }
    const _groups = json.groups;
    if (_groups) {
      for (const item of _groups) {
        const m = PledgeGroup.initialize();
        PledgeGroupJSON._readMessage(m, item);
        msg.groups.push(m);
      }
    }
    const _loanLimit = json.loanLimit ?? json.loan_limit;
    if (_loanLimit) {
      msg.loanLimit = _loanLimit;
    }
    const _userStatus = json.userStatus ?? json.user_status;
    if (_userStatus) {
      msg.userStatus = _userStatus;
    }
    return msg;
  },
};

export const CreatePaymentRequestJSON = {
  /**
   * Serializes CreatePaymentRequest to JSON.
   */
  encode: function (msg: Partial<CreatePaymentRequest>): string {
    return JSON.stringify(CreatePaymentRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreatePaymentRequest from JSON.
   */
  decode: function (json: string): CreatePaymentRequest {
    return CreatePaymentRequestJSON._readMessage(
      CreatePaymentRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes CreatePaymentRequest with all fields set to their default value.
   */
  initialize: function (): CreatePaymentRequest {
    return {
      operationTraceId: "",
      traceId: "",
      memo: "",
      assetId: "",
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<CreatePaymentRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.operationTraceId) {
      json.operationTraceId = msg.operationTraceId;
    }
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    if (msg.memo) {
      json.memo = msg.memo;
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreatePaymentRequest,
    json: any
  ): CreatePaymentRequest {
    const _operationTraceId = json.operationTraceId ?? json.operation_trace_id;
    if (_operationTraceId) {
      msg.operationTraceId = _operationTraceId;
    }
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    const _memo = json.memo;
    if (_memo) {
      msg.memo = _memo;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    return msg;
  },
};

export const CreatePaymentResponseJSON = {
  /**
   * Serializes CreatePaymentResponse to JSON.
   */
  encode: function (msg: Partial<CreatePaymentResponse>): string {
    return JSON.stringify(CreatePaymentResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreatePaymentResponse from JSON.
   */
  decode: function (json: string): CreatePaymentResponse {
    return CreatePaymentResponseJSON._readMessage(
      CreatePaymentResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes CreatePaymentResponse with all fields set to their default value.
   */
  initialize: function (): CreatePaymentResponse {
    return {
      code: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<CreatePaymentResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.code) {
      json.code = msg.code;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreatePaymentResponse,
    json: any
  ): CreatePaymentResponse {
    const _code = json.code;
    if (_code) {
      msg.code = _code;
    }
    return msg;
  },
};

export const GetOperationLogRequestJSON = {
  /**
   * Serializes GetOperationLogRequest to JSON.
   */
  encode: function (msg: Partial<GetOperationLogRequest>): string {
    return JSON.stringify(GetOperationLogRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetOperationLogRequest from JSON.
   */
  decode: function (json: string): GetOperationLogRequest {
    return GetOperationLogRequestJSON._readMessage(
      GetOperationLogRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetOperationLogRequest with all fields set to their default value.
   */
  initialize: function (): GetOperationLogRequest {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetOperationLogRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetOperationLogRequest,
    json: any
  ): GetOperationLogRequest {
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    return msg;
  },
};

export const OperationLogJSON = {
  /**
   * Serializes OperationLog to JSON.
   */
  encode: function (msg: Partial<OperationLog>): string {
    return JSON.stringify(OperationLogJSON._writeMessage(msg));
  },

  /**
   * Deserializes OperationLog from JSON.
   */
  decode: function (json: string): OperationLog {
    return OperationLogJSON._readMessage(
      OperationLogJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes OperationLog with all fields set to their default value.
   */
  initialize: function (): OperationLog {
    return {
      id: 0n,
      traceId: "",
      operationType: OperationType._fromInt(0),
      loanAmount: "",
      repayAmount: "",
      pledgeType: PledgeType._fromInt(0),
      pledgeAmount: "",
      pledgeAsset: Asset.initialize(),
      status: OperationStatus._fromInt(0),
      createdAt: 0,
      failedReason: "",
      transferMemo: "",
      transferAssetId: "",
      transferAmount: "",
      isSystem: false,
      beforeLoanAmount: "",
      afterLoanAmount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<OperationLog>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id.toString();
    }
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    if (msg.operationType && OperationTypeJSON._toInt(msg.operationType)) {
      json.operationType = msg.operationType;
    }
    if (msg.loanAmount) {
      json.loanAmount = msg.loanAmount;
    }
    if (msg.repayAmount) {
      json.repayAmount = msg.repayAmount;
    }
    if (msg.pledgeType && PledgeTypeJSON._toInt(msg.pledgeType)) {
      json.pledgeType = msg.pledgeType;
    }
    if (msg.pledgeAmount) {
      json.pledgeAmount = msg.pledgeAmount;
    }
    if (msg.pledgeAsset) {
      const pledgeAsset = AssetJSON._writeMessage(msg.pledgeAsset);
      if (Object.keys(pledgeAsset).length > 0) {
        json.pledgeAsset = pledgeAsset;
      }
    }
    if (msg.status && OperationStatusJSON._toInt(msg.status)) {
      json.status = msg.status;
    }
    if (msg.createdAt) {
      json.createdAt = msg.createdAt;
    }
    if (msg.failedReason) {
      json.failedReason = msg.failedReason;
    }
    if (msg.transferMemo) {
      json.transferMemo = msg.transferMemo;
    }
    if (msg.transferAssetId) {
      json.transferAssetId = msg.transferAssetId;
    }
    if (msg.transferAmount) {
      json.transferAmount = msg.transferAmount;
    }
    if (msg.isSystem) {
      json.isSystem = msg.isSystem;
    }
    if (msg.beforeLoanAmount) {
      json.beforeLoanAmount = msg.beforeLoanAmount;
    }
    if (msg.afterLoanAmount) {
      json.afterLoanAmount = msg.afterLoanAmount;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: OperationLog, json: any): OperationLog {
    const _id = json.id;
    if (_id) {
      msg.id = BigInt(_id);
    }
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    const _operationType = json.operationType ?? json.operation_type;
    if (_operationType) {
      msg.operationType = _operationType;
    }
    const _loanAmount = json.loanAmount ?? json.loan_amount;
    if (_loanAmount) {
      msg.loanAmount = _loanAmount;
    }
    const _repayAmount = json.repayAmount ?? json.repay_amount;
    if (_repayAmount) {
      msg.repayAmount = _repayAmount;
    }
    const _pledgeType = json.pledgeType ?? json.pledge_type;
    if (_pledgeType) {
      msg.pledgeType = _pledgeType;
    }
    const _pledgeAmount = json.pledgeAmount ?? json.pledge_amount;
    if (_pledgeAmount) {
      msg.pledgeAmount = _pledgeAmount;
    }
    const _pledgeAsset = json.pledgeAsset ?? json.pledge_asset;
    if (_pledgeAsset) {
      const m = Asset.initialize();
      AssetJSON._readMessage(m, _pledgeAsset);
      msg.pledgeAsset = m;
    }
    const _status = json.status;
    if (_status) {
      msg.status = _status;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      msg.createdAt = _createdAt;
    }
    const _failedReason = json.failedReason ?? json.failed_reason;
    if (_failedReason) {
      msg.failedReason = _failedReason;
    }
    const _transferMemo = json.transferMemo ?? json.transfer_memo;
    if (_transferMemo) {
      msg.transferMemo = _transferMemo;
    }
    const _transferAssetId = json.transferAssetId ?? json.transfer_asset_id;
    if (_transferAssetId) {
      msg.transferAssetId = _transferAssetId;
    }
    const _transferAmount = json.transferAmount ?? json.transfer_amount;
    if (_transferAmount) {
      msg.transferAmount = _transferAmount;
    }
    const _isSystem = json.isSystem ?? json.is_system;
    if (_isSystem) {
      msg.isSystem = _isSystem;
    }
    const _beforeLoanAmount = json.beforeLoanAmount ?? json.before_loan_amount;
    if (_beforeLoanAmount) {
      msg.beforeLoanAmount = _beforeLoanAmount;
    }
    const _afterLoanAmount = json.afterLoanAmount ?? json.after_loan_amount;
    if (_afterLoanAmount) {
      msg.afterLoanAmount = _afterLoanAmount;
    }
    return msg;
  },
};

export const GetOperationLogResponseJSON = {
  /**
   * Serializes GetOperationLogResponse to JSON.
   */
  encode: function (msg: Partial<GetOperationLogResponse>): string {
    return JSON.stringify(GetOperationLogResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetOperationLogResponse from JSON.
   */
  decode: function (json: string): GetOperationLogResponse {
    return GetOperationLogResponseJSON._readMessage(
      GetOperationLogResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetOperationLogResponse with all fields set to their default value.
   */
  initialize: function (): GetOperationLogResponse {
    return {
      operationLog: OperationLog.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetOperationLogResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.operationLog) {
      const operationLog = OperationLogJSON._writeMessage(msg.operationLog);
      if (Object.keys(operationLog).length > 0) {
        json.operationLog = operationLog;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetOperationLogResponse,
    json: any
  ): GetOperationLogResponse {
    const _operationLog = json.operationLog ?? json.operation_log;
    if (_operationLog) {
      const m = OperationLog.initialize();
      OperationLogJSON._readMessage(m, _operationLog);
      msg.operationLog = m;
    }
    return msg;
  },
};

export const ListOperationLogsRequestJSON = {
  /**
   * Serializes ListOperationLogsRequest to JSON.
   */
  encode: function (msg: Partial<ListOperationLogsRequest>): string {
    return JSON.stringify(ListOperationLogsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListOperationLogsRequest from JSON.
   */
  decode: function (json: string): ListOperationLogsRequest {
    return ListOperationLogsRequestJSON._readMessage(
      ListOperationLogsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListOperationLogsRequest with all fields set to their default value.
   */
  initialize: function (): ListOperationLogsRequest {
    return {
      cursor: 0n,
      limit: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListOperationLogsRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.cursor) {
      json.cursor = msg.cursor.toString();
    }
    if (msg.limit) {
      json.limit = msg.limit.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOperationLogsRequest,
    json: any
  ): ListOperationLogsRequest {
    const _cursor = json.cursor;
    if (_cursor) {
      msg.cursor = BigInt(_cursor);
    }
    const _limit = json.limit;
    if (_limit) {
      msg.limit = BigInt(_limit);
    }
    return msg;
  },
};

export const ListOperationLogsResponseJSON = {
  /**
   * Serializes ListOperationLogsResponse to JSON.
   */
  encode: function (msg: Partial<ListOperationLogsResponse>): string {
    return JSON.stringify(ListOperationLogsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListOperationLogsResponse from JSON.
   */
  decode: function (json: string): ListOperationLogsResponse {
    return ListOperationLogsResponseJSON._readMessage(
      ListOperationLogsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListOperationLogsResponse with all fields set to their default value.
   */
  initialize: function (): ListOperationLogsResponse {
    return {
      operationLogs: [],
      pagination: Pagination.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListOperationLogsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.operationLogs?.length) {
      json.operationLogs = msg.operationLogs.map(
        OperationLogJSON._writeMessage
      );
    }
    if (msg.pagination) {
      const pagination = PaginationJSON._writeMessage(msg.pagination);
      if (Object.keys(pagination).length > 0) {
        json.pagination = pagination;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOperationLogsResponse,
    json: any
  ): ListOperationLogsResponse {
    const _operationLogs = json.operationLogs ?? json.operation_logs;
    if (_operationLogs) {
      for (const item of _operationLogs) {
        const m = OperationLog.initialize();
        OperationLogJSON._readMessage(m, item);
        msg.operationLogs.push(m);
      }
    }
    const _pagination = json.pagination;
    if (_pagination) {
      const m = Pagination.initialize();
      PaginationJSON._readMessage(m, _pagination);
      msg.pagination = m;
    }
    return msg;
  },
};

export const GetLiquidationRequestJSON = {
  /**
   * Serializes GetLiquidationRequest to JSON.
   */
  encode: function (msg: Partial<GetLiquidationRequest>): string {
    return JSON.stringify(GetLiquidationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetLiquidationRequest from JSON.
   */
  decode: function (json: string): GetLiquidationRequest {
    return GetLiquidationRequestJSON._readMessage(
      GetLiquidationRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetLiquidationRequest with all fields set to their default value.
   */
  initialize: function (): GetLiquidationRequest {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetLiquidationRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetLiquidationRequest,
    json: any
  ): GetLiquidationRequest {
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    return msg;
  },
};

export const LiquidationPledgeJSON = {
  /**
   * Serializes LiquidationPledge to JSON.
   */
  encode: function (msg: Partial<LiquidationPledge>): string {
    return JSON.stringify(LiquidationPledgeJSON._writeMessage(msg));
  },

  /**
   * Deserializes LiquidationPledge from JSON.
   */
  decode: function (json: string): LiquidationPledge {
    return LiquidationPledgeJSON._readMessage(
      LiquidationPledgeJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes LiquidationPledge with all fields set to their default value.
   */
  initialize: function (): LiquidationPledge {
    return {
      id: 0n,
      userId: "",
      type: PledgeType._fromInt(0),
      assetId: "",
      amount: "",
      contractId: "",
      name: "",
      traceId: "",
      assetPrice: "",
      assetPriceUpdatedAt: 0,
      done: false,
      createdAt: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LiquidationPledge>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id.toString();
    }
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.type && PledgeTypeJSON._toInt(msg.type)) {
      json.type = msg.type;
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.contractId) {
      json.contractId = msg.contractId;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    if (msg.assetPrice) {
      json.assetPrice = msg.assetPrice;
    }
    if (msg.assetPriceUpdatedAt) {
      json.assetPriceUpdatedAt = msg.assetPriceUpdatedAt;
    }
    if (msg.done) {
      json.done = msg.done;
    }
    if (msg.createdAt) {
      json.createdAt = msg.createdAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: LiquidationPledge,
    json: any
  ): LiquidationPledge {
    const _id = json.id;
    if (_id) {
      msg.id = BigInt(_id);
    }
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _type = json.type;
    if (_type) {
      msg.type = _type;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _contractId = json.contractId ?? json.contract_id;
    if (_contractId) {
      msg.contractId = _contractId;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    const _assetPrice = json.assetPrice ?? json.asset_price;
    if (_assetPrice) {
      msg.assetPrice = _assetPrice;
    }
    const _assetPriceUpdatedAt =
      json.assetPriceUpdatedAt ?? json.asset_price_updated_at;
    if (_assetPriceUpdatedAt) {
      msg.assetPriceUpdatedAt = _assetPriceUpdatedAt;
    }
    const _done = json.done;
    if (_done) {
      msg.done = _done;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      msg.createdAt = _createdAt;
    }
    return msg;
  },
};

export const GetLiquidationResponseJSON = {
  /**
   * Serializes GetLiquidationResponse to JSON.
   */
  encode: function (msg: Partial<GetLiquidationResponse>): string {
    return JSON.stringify(GetLiquidationResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetLiquidationResponse from JSON.
   */
  decode: function (json: string): GetLiquidationResponse {
    return GetLiquidationResponseJSON._readMessage(
      GetLiquidationResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetLiquidationResponse with all fields set to their default value.
   */
  initialize: function (): GetLiquidationResponse {
    return {
      op: OperationLog.initialize(),
      pledges: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetLiquidationResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.op) {
      const op = OperationLogJSON._writeMessage(msg.op);
      if (Object.keys(op).length > 0) {
        json.op = op;
      }
    }
    if (msg.pledges?.length) {
      json.pledges = msg.pledges.map(LiquidationPledgeJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetLiquidationResponse,
    json: any
  ): GetLiquidationResponse {
    const _op = json.op;
    if (_op) {
      const m = OperationLog.initialize();
      OperationLogJSON._readMessage(m, _op);
      msg.op = m;
    }
    const _pledges = json.pledges;
    if (_pledges) {
      for (const item of _pledges) {
        const m = LiquidationPledge.initialize();
        LiquidationPledgeJSON._readMessage(m, item);
        msg.pledges.push(m);
      }
    }
    return msg;
  },
};
