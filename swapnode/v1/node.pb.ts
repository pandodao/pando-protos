// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: swapnode/v1/node.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as swapnodeV1Core from "./core.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListPairsRequest {}

export interface ListPairsResponse {
  pairs: swapnodeV1Core.Pair[];
}

export interface ListOutputsRequest {
  cursor: string;
  limit: number;
  decodeHeader: boolean;
}

export interface ListOutputsResponse {
  outputs: swapnodeV1Core.Output[];
}

export interface FindOrderRequest {
  userId: string;
  followId: string;
  traceId: string;
}

export interface FindOrderResponse {
  order: swapnodeV1Core.Order;
}

export interface FindDepositRequest {
  userId: string;
  followId: string;
}

export interface FindDepositResponse {
  deposit: swapnodeV1Core.Deposit;
}

export interface ListTransactionsRequest {
  groupId: string;
}

export interface ListTransactionsResponse {
  transactions: swapnodeV1Core.Transaction[];
}

export interface GetInfoRequest {}

export interface GetInfoResponse {
  members: string[];
  threshold: number;
  publicKey: string;
  version: string;
}

export interface FindTransferRequest {
  id: string;
}

export interface FindTransferResponse {
  transfer: swapnodeV1Core.Transfer;
}

export interface ListTransfersRequest {
  cursor: string;
  limit: number;
}

export interface ListTransfersResponse {
  transfers: swapnodeV1Core.Transfer[];
  nextCursor: string;
}

export interface FindAuditRequest {
  id: string;
}

export interface FindAuditResponse {
  audit: swapnodeV1Core.Audit;
}

export interface ListAuditsRequest {
  offset: protoscript.Timestamp;
  limit: bigint;
}

export interface ListAuditsResponse {
  audits: swapnodeV1Core.Audit[];
}

export interface ListExpiredDepositsRequest {
  limit: bigint;
}

export interface ListExpiredDepositsResponse {
  deposits: swapnodeV1Core.Deposit[];
}

//========================================//
//    SwapNodeService Protobuf Client     //
//========================================//

export async function ListPairs(
  listPairsRequest: ListPairsRequest,
  config?: ClientConfiguration,
): Promise<ListPairsResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/ListPairs",
    ListPairsRequest.encode(listPairsRequest),
    config,
  );
  return ListPairsResponse.decode(response);
}

export async function ListOutputs(
  listOutputsRequest: ListOutputsRequest,
  config?: ClientConfiguration,
): Promise<ListOutputsResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/ListOutputs",
    ListOutputsRequest.encode(listOutputsRequest),
    config,
  );
  return ListOutputsResponse.decode(response);
}

export async function FindOrder(
  findOrderRequest: FindOrderRequest,
  config?: ClientConfiguration,
): Promise<FindOrderResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/FindOrder",
    FindOrderRequest.encode(findOrderRequest),
    config,
  );
  return FindOrderResponse.decode(response);
}

export async function FindDeposit(
  findDepositRequest: FindDepositRequest,
  config?: ClientConfiguration,
): Promise<FindDepositResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/FindDeposit",
    FindDepositRequest.encode(findDepositRequest),
    config,
  );
  return FindDepositResponse.decode(response);
}

export async function ListTransactions(
  listTransactionsRequest: ListTransactionsRequest,
  config?: ClientConfiguration,
): Promise<ListTransactionsResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/ListTransactions",
    ListTransactionsRequest.encode(listTransactionsRequest),
    config,
  );
  return ListTransactionsResponse.decode(response);
}

export async function GetInfo(
  getInfoRequest: GetInfoRequest,
  config?: ClientConfiguration,
): Promise<GetInfoResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/GetInfo",
    GetInfoRequest.encode(getInfoRequest),
    config,
  );
  return GetInfoResponse.decode(response);
}

export async function FindTransfer(
  findTransferRequest: FindTransferRequest,
  config?: ClientConfiguration,
): Promise<FindTransferResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/FindTransfer",
    FindTransferRequest.encode(findTransferRequest),
    config,
  );
  return FindTransferResponse.decode(response);
}

export async function ListTransfers(
  listTransfersRequest: ListTransfersRequest,
  config?: ClientConfiguration,
): Promise<ListTransfersResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/ListTransfers",
    ListTransfersRequest.encode(listTransfersRequest),
    config,
  );
  return ListTransfersResponse.decode(response);
}

export async function FindAudit(
  findAuditRequest: FindAuditRequest,
  config?: ClientConfiguration,
): Promise<FindAuditResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/FindAudit",
    FindAuditRequest.encode(findAuditRequest),
    config,
  );
  return FindAuditResponse.decode(response);
}

export async function ListAudits(
  listAuditsRequest: ListAuditsRequest,
  config?: ClientConfiguration,
): Promise<ListAuditsResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/ListAudits",
    ListAuditsRequest.encode(listAuditsRequest),
    config,
  );
  return ListAuditsResponse.decode(response);
}

export async function ListExpiredDeposits(
  listExpiredDepositsRequest: ListExpiredDepositsRequest,
  config?: ClientConfiguration,
): Promise<ListExpiredDepositsResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/ListExpiredDeposits",
    ListExpiredDepositsRequest.encode(listExpiredDepositsRequest),
    config,
  );
  return ListExpiredDepositsResponse.decode(response);
}

//========================================//
//      SwapNodeService JSON Client       //
//========================================//

export async function ListPairsJSON(
  listPairsRequest: ListPairsRequest,
  config?: ClientConfiguration,
): Promise<ListPairsResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/ListPairs",
    ListPairsRequestJSON.encode(listPairsRequest),
    config,
  );
  return ListPairsResponseJSON.decode(response);
}

export async function ListOutputsJSON(
  listOutputsRequest: ListOutputsRequest,
  config?: ClientConfiguration,
): Promise<ListOutputsResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/ListOutputs",
    ListOutputsRequestJSON.encode(listOutputsRequest),
    config,
  );
  return ListOutputsResponseJSON.decode(response);
}

export async function FindOrderJSON(
  findOrderRequest: FindOrderRequest,
  config?: ClientConfiguration,
): Promise<FindOrderResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/FindOrder",
    FindOrderRequestJSON.encode(findOrderRequest),
    config,
  );
  return FindOrderResponseJSON.decode(response);
}

export async function FindDepositJSON(
  findDepositRequest: FindDepositRequest,
  config?: ClientConfiguration,
): Promise<FindDepositResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/FindDeposit",
    FindDepositRequestJSON.encode(findDepositRequest),
    config,
  );
  return FindDepositResponseJSON.decode(response);
}

export async function ListTransactionsJSON(
  listTransactionsRequest: ListTransactionsRequest,
  config?: ClientConfiguration,
): Promise<ListTransactionsResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/ListTransactions",
    ListTransactionsRequestJSON.encode(listTransactionsRequest),
    config,
  );
  return ListTransactionsResponseJSON.decode(response);
}

export async function GetInfoJSON(
  getInfoRequest: GetInfoRequest,
  config?: ClientConfiguration,
): Promise<GetInfoResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/GetInfo",
    GetInfoRequestJSON.encode(getInfoRequest),
    config,
  );
  return GetInfoResponseJSON.decode(response);
}

export async function FindTransferJSON(
  findTransferRequest: FindTransferRequest,
  config?: ClientConfiguration,
): Promise<FindTransferResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/FindTransfer",
    FindTransferRequestJSON.encode(findTransferRequest),
    config,
  );
  return FindTransferResponseJSON.decode(response);
}

export async function ListTransfersJSON(
  listTransfersRequest: ListTransfersRequest,
  config?: ClientConfiguration,
): Promise<ListTransfersResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/ListTransfers",
    ListTransfersRequestJSON.encode(listTransfersRequest),
    config,
  );
  return ListTransfersResponseJSON.decode(response);
}

export async function FindAuditJSON(
  findAuditRequest: FindAuditRequest,
  config?: ClientConfiguration,
): Promise<FindAuditResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/FindAudit",
    FindAuditRequestJSON.encode(findAuditRequest),
    config,
  );
  return FindAuditResponseJSON.decode(response);
}

export async function ListAuditsJSON(
  listAuditsRequest: ListAuditsRequest,
  config?: ClientConfiguration,
): Promise<ListAuditsResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/ListAudits",
    ListAuditsRequestJSON.encode(listAuditsRequest),
    config,
  );
  return ListAuditsResponseJSON.decode(response);
}

export async function ListExpiredDepositsJSON(
  listExpiredDepositsRequest: ListExpiredDepositsRequest,
  config?: ClientConfiguration,
): Promise<ListExpiredDepositsResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/ListExpiredDeposits",
    ListExpiredDepositsRequestJSON.encode(listExpiredDepositsRequest),
    config,
  );
  return ListExpiredDepositsResponseJSON.decode(response);
}

//========================================//
//            SwapNodeService             //
//========================================//

export interface SwapNodeService<Context = unknown> {
  ListPairs: (
    listPairsRequest: ListPairsRequest,
    context: Context,
  ) => Promise<ListPairsResponse> | ListPairsResponse;
  ListOutputs: (
    listOutputsRequest: ListOutputsRequest,
    context: Context,
  ) => Promise<ListOutputsResponse> | ListOutputsResponse;
  FindOrder: (
    findOrderRequest: FindOrderRequest,
    context: Context,
  ) => Promise<FindOrderResponse> | FindOrderResponse;
  FindDeposit: (
    findDepositRequest: FindDepositRequest,
    context: Context,
  ) => Promise<FindDepositResponse> | FindDepositResponse;
  ListTransactions: (
    listTransactionsRequest: ListTransactionsRequest,
    context: Context,
  ) => Promise<ListTransactionsResponse> | ListTransactionsResponse;
  GetInfo: (
    getInfoRequest: GetInfoRequest,
    context: Context,
  ) => Promise<GetInfoResponse> | GetInfoResponse;
  FindTransfer: (
    findTransferRequest: FindTransferRequest,
    context: Context,
  ) => Promise<FindTransferResponse> | FindTransferResponse;
  ListTransfers: (
    listTransfersRequest: ListTransfersRequest,
    context: Context,
  ) => Promise<ListTransfersResponse> | ListTransfersResponse;
  FindAudit: (
    findAuditRequest: FindAuditRequest,
    context: Context,
  ) => Promise<FindAuditResponse> | FindAuditResponse;
  ListAudits: (
    listAuditsRequest: ListAuditsRequest,
    context: Context,
  ) => Promise<ListAuditsResponse> | ListAuditsResponse;
  ListExpiredDeposits: (
    listExpiredDepositsRequest: ListExpiredDepositsRequest,
    context: Context,
  ) => Promise<ListExpiredDepositsResponse> | ListExpiredDepositsResponse;
}

export function createSwapNodeService<Context>(
  service: SwapNodeService<Context>,
) {
  return {
    name: "swapnode.v1.SwapNodeService",
    methods: {
      ListPairs: {
        name: "ListPairs",
        handler: service.ListPairs,
        input: { protobuf: ListPairsRequest, json: ListPairsRequestJSON },
        output: { protobuf: ListPairsResponse, json: ListPairsResponseJSON },
      },
      ListOutputs: {
        name: "ListOutputs",
        handler: service.ListOutputs,
        input: { protobuf: ListOutputsRequest, json: ListOutputsRequestJSON },
        output: {
          protobuf: ListOutputsResponse,
          json: ListOutputsResponseJSON,
        },
      },
      FindOrder: {
        name: "FindOrder",
        handler: service.FindOrder,
        input: { protobuf: FindOrderRequest, json: FindOrderRequestJSON },
        output: { protobuf: FindOrderResponse, json: FindOrderResponseJSON },
      },
      FindDeposit: {
        name: "FindDeposit",
        handler: service.FindDeposit,
        input: { protobuf: FindDepositRequest, json: FindDepositRequestJSON },
        output: {
          protobuf: FindDepositResponse,
          json: FindDepositResponseJSON,
        },
      },
      ListTransactions: {
        name: "ListTransactions",
        handler: service.ListTransactions,
        input: {
          protobuf: ListTransactionsRequest,
          json: ListTransactionsRequestJSON,
        },
        output: {
          protobuf: ListTransactionsResponse,
          json: ListTransactionsResponseJSON,
        },
      },
      GetInfo: {
        name: "GetInfo",
        handler: service.GetInfo,
        input: { protobuf: GetInfoRequest, json: GetInfoRequestJSON },
        output: { protobuf: GetInfoResponse, json: GetInfoResponseJSON },
      },
      FindTransfer: {
        name: "FindTransfer",
        handler: service.FindTransfer,
        input: { protobuf: FindTransferRequest, json: FindTransferRequestJSON },
        output: {
          protobuf: FindTransferResponse,
          json: FindTransferResponseJSON,
        },
      },
      ListTransfers: {
        name: "ListTransfers",
        handler: service.ListTransfers,
        input: {
          protobuf: ListTransfersRequest,
          json: ListTransfersRequestJSON,
        },
        output: {
          protobuf: ListTransfersResponse,
          json: ListTransfersResponseJSON,
        },
      },
      FindAudit: {
        name: "FindAudit",
        handler: service.FindAudit,
        input: { protobuf: FindAuditRequest, json: FindAuditRequestJSON },
        output: { protobuf: FindAuditResponse, json: FindAuditResponseJSON },
      },
      ListAudits: {
        name: "ListAudits",
        handler: service.ListAudits,
        input: { protobuf: ListAuditsRequest, json: ListAuditsRequestJSON },
        output: { protobuf: ListAuditsResponse, json: ListAuditsResponseJSON },
      },
      ListExpiredDeposits: {
        name: "ListExpiredDeposits",
        handler: service.ListExpiredDeposits,
        input: {
          protobuf: ListExpiredDepositsRequest,
          json: ListExpiredDepositsRequestJSON,
        },
        output: {
          protobuf: ListExpiredDepositsResponse,
          json: ListExpiredDepositsResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListPairsRequest = {
  /**
   * Serializes ListPairsRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<ListPairsRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ListPairsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ListPairsRequest {
    return {};
  },

  /**
   * Initializes ListPairsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPairsRequest>): ListPairsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListPairsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ListPairsRequest,
    _reader: protoscript.BinaryReader,
  ): ListPairsRequest {
    return _msg;
  },
};

export const ListPairsResponse = {
  /**
   * Serializes ListPairsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListPairsResponse>): Uint8Array {
    return ListPairsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListPairsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListPairsResponse {
    return ListPairsResponse._readMessage(
      ListPairsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListPairsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPairsResponse>): ListPairsResponse {
    return {
      pairs: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPairsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.pairs?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.pairs as any,
        swapnodeV1Core.Pair._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPairsResponse,
    reader: protoscript.BinaryReader,
  ): ListPairsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = swapnodeV1Core.Pair.initialize();
          reader.readMessage(m, swapnodeV1Core.Pair._readMessage);
          msg.pairs.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListOutputsRequest = {
  /**
   * Serializes ListOutputsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListOutputsRequest>): Uint8Array {
    return ListOutputsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListOutputsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListOutputsRequest {
    return ListOutputsRequest._readMessage(
      ListOutputsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListOutputsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListOutputsRequest>): ListOutputsRequest {
    return {
      cursor: "",
      limit: 0,
      decodeHeader: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListOutputsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.cursor) {
      writer.writeString(1, msg.cursor);
    }
    if (msg.limit) {
      writer.writeInt32(2, msg.limit);
    }
    if (msg.decodeHeader) {
      writer.writeBool(3, msg.decodeHeader);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOutputsRequest,
    reader: protoscript.BinaryReader,
  ): ListOutputsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.cursor = reader.readString();
          break;
        }
        case 2: {
          msg.limit = reader.readInt32();
          break;
        }
        case 3: {
          msg.decodeHeader = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListOutputsResponse = {
  /**
   * Serializes ListOutputsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListOutputsResponse>): Uint8Array {
    return ListOutputsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListOutputsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListOutputsResponse {
    return ListOutputsResponse._readMessage(
      ListOutputsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListOutputsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListOutputsResponse>,
  ): ListOutputsResponse {
    return {
      outputs: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListOutputsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.outputs?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.outputs as any,
        swapnodeV1Core.Output._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOutputsResponse,
    reader: protoscript.BinaryReader,
  ): ListOutputsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = swapnodeV1Core.Output.initialize();
          reader.readMessage(m, swapnodeV1Core.Output._readMessage);
          msg.outputs.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindOrderRequest = {
  /**
   * Serializes FindOrderRequest to protobuf.
   */
  encode: function (msg: PartialDeep<FindOrderRequest>): Uint8Array {
    return FindOrderRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindOrderRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindOrderRequest {
    return FindOrderRequest._readMessage(
      FindOrderRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindOrderRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindOrderRequest>): FindOrderRequest {
    return {
      userId: "",
      followId: "",
      traceId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindOrderRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.followId) {
      writer.writeString(2, msg.followId);
    }
    if (msg.traceId) {
      writer.writeString(3, msg.traceId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindOrderRequest,
    reader: protoscript.BinaryReader,
  ): FindOrderRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.followId = reader.readString();
          break;
        }
        case 3: {
          msg.traceId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindOrderResponse = {
  /**
   * Serializes FindOrderResponse to protobuf.
   */
  encode: function (msg: PartialDeep<FindOrderResponse>): Uint8Array {
    return FindOrderResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindOrderResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindOrderResponse {
    return FindOrderResponse._readMessage(
      FindOrderResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindOrderResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindOrderResponse>): FindOrderResponse {
    return {
      order: swapnodeV1Core.Order.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindOrderResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.order) {
      writer.writeMessage(1, msg.order, swapnodeV1Core.Order._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindOrderResponse,
    reader: protoscript.BinaryReader,
  ): FindOrderResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.order, swapnodeV1Core.Order._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindDepositRequest = {
  /**
   * Serializes FindDepositRequest to protobuf.
   */
  encode: function (msg: PartialDeep<FindDepositRequest>): Uint8Array {
    return FindDepositRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindDepositRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindDepositRequest {
    return FindDepositRequest._readMessage(
      FindDepositRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindDepositRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindDepositRequest>): FindDepositRequest {
    return {
      userId: "",
      followId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindDepositRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.followId) {
      writer.writeString(2, msg.followId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindDepositRequest,
    reader: protoscript.BinaryReader,
  ): FindDepositRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.followId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindDepositResponse = {
  /**
   * Serializes FindDepositResponse to protobuf.
   */
  encode: function (msg: PartialDeep<FindDepositResponse>): Uint8Array {
    return FindDepositResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindDepositResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindDepositResponse {
    return FindDepositResponse._readMessage(
      FindDepositResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindDepositResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FindDepositResponse>,
  ): FindDepositResponse {
    return {
      deposit: swapnodeV1Core.Deposit.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindDepositResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.deposit) {
      writer.writeMessage(1, msg.deposit, swapnodeV1Core.Deposit._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindDepositResponse,
    reader: protoscript.BinaryReader,
  ): FindDepositResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.deposit, swapnodeV1Core.Deposit._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListTransactionsRequest = {
  /**
   * Serializes ListTransactionsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListTransactionsRequest>): Uint8Array {
    return ListTransactionsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListTransactionsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListTransactionsRequest {
    return ListTransactionsRequest._readMessage(
      ListTransactionsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListTransactionsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTransactionsRequest>,
  ): ListTransactionsRequest {
    return {
      groupId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTransactionsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.groupId) {
      writer.writeString(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransactionsRequest,
    reader: protoscript.BinaryReader,
  ): ListTransactionsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListTransactionsResponse = {
  /**
   * Serializes ListTransactionsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListTransactionsResponse>): Uint8Array {
    return ListTransactionsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListTransactionsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListTransactionsResponse {
    return ListTransactionsResponse._readMessage(
      ListTransactionsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListTransactionsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTransactionsResponse>,
  ): ListTransactionsResponse {
    return {
      transactions: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTransactionsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.transactions?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.transactions as any,
        swapnodeV1Core.Transaction._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransactionsResponse,
    reader: protoscript.BinaryReader,
  ): ListTransactionsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = swapnodeV1Core.Transaction.initialize();
          reader.readMessage(m, swapnodeV1Core.Transaction._readMessage);
          msg.transactions.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetInfoRequest = {
  /**
   * Serializes GetInfoRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<GetInfoRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes GetInfoRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): GetInfoRequest {
    return {};
  },

  /**
   * Initializes GetInfoRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetInfoRequest>): GetInfoRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<GetInfoRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: GetInfoRequest,
    _reader: protoscript.BinaryReader,
  ): GetInfoRequest {
    return _msg;
  },
};

export const GetInfoResponse = {
  /**
   * Serializes GetInfoResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetInfoResponse>): Uint8Array {
    return GetInfoResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetInfoResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetInfoResponse {
    return GetInfoResponse._readMessage(
      GetInfoResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetInfoResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetInfoResponse>): GetInfoResponse {
    return {
      members: [],
      threshold: 0,
      publicKey: "",
      version: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetInfoResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.members?.length) {
      writer.writeRepeatedString(1, msg.members);
    }
    if (msg.threshold) {
      writer.writeInt32(2, msg.threshold);
    }
    if (msg.publicKey) {
      writer.writeString(3, msg.publicKey);
    }
    if (msg.version) {
      writer.writeString(4, msg.version);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetInfoResponse,
    reader: protoscript.BinaryReader,
  ): GetInfoResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.members.push(reader.readString());
          break;
        }
        case 2: {
          msg.threshold = reader.readInt32();
          break;
        }
        case 3: {
          msg.publicKey = reader.readString();
          break;
        }
        case 4: {
          msg.version = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindTransferRequest = {
  /**
   * Serializes FindTransferRequest to protobuf.
   */
  encode: function (msg: PartialDeep<FindTransferRequest>): Uint8Array {
    return FindTransferRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindTransferRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindTransferRequest {
    return FindTransferRequest._readMessage(
      FindTransferRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindTransferRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FindTransferRequest>,
  ): FindTransferRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindTransferRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindTransferRequest,
    reader: protoscript.BinaryReader,
  ): FindTransferRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindTransferResponse = {
  /**
   * Serializes FindTransferResponse to protobuf.
   */
  encode: function (msg: PartialDeep<FindTransferResponse>): Uint8Array {
    return FindTransferResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindTransferResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindTransferResponse {
    return FindTransferResponse._readMessage(
      FindTransferResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindTransferResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FindTransferResponse>,
  ): FindTransferResponse {
    return {
      transfer: swapnodeV1Core.Transfer.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindTransferResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.transfer) {
      writer.writeMessage(
        1,
        msg.transfer,
        swapnodeV1Core.Transfer._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindTransferResponse,
    reader: protoscript.BinaryReader,
  ): FindTransferResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(
            msg.transfer,
            swapnodeV1Core.Transfer._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListTransfersRequest = {
  /**
   * Serializes ListTransfersRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListTransfersRequest>): Uint8Array {
    return ListTransfersRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListTransfersRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListTransfersRequest {
    return ListTransfersRequest._readMessage(
      ListTransfersRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListTransfersRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTransfersRequest>,
  ): ListTransfersRequest {
    return {
      cursor: "",
      limit: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTransfersRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.cursor) {
      writer.writeString(1, msg.cursor);
    }
    if (msg.limit) {
      writer.writeInt32(2, msg.limit);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransfersRequest,
    reader: protoscript.BinaryReader,
  ): ListTransfersRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.cursor = reader.readString();
          break;
        }
        case 2: {
          msg.limit = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListTransfersResponse = {
  /**
   * Serializes ListTransfersResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListTransfersResponse>): Uint8Array {
    return ListTransfersResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListTransfersResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListTransfersResponse {
    return ListTransfersResponse._readMessage(
      ListTransfersResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListTransfersResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTransfersResponse>,
  ): ListTransfersResponse {
    return {
      transfers: [],
      nextCursor: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTransfersResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.transfers?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.transfers as any,
        swapnodeV1Core.Transfer._writeMessage,
      );
    }
    if (msg.nextCursor) {
      writer.writeString(2, msg.nextCursor);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransfersResponse,
    reader: protoscript.BinaryReader,
  ): ListTransfersResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = swapnodeV1Core.Transfer.initialize();
          reader.readMessage(m, swapnodeV1Core.Transfer._readMessage);
          msg.transfers.push(m);
          break;
        }
        case 2: {
          msg.nextCursor = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindAuditRequest = {
  /**
   * Serializes FindAuditRequest to protobuf.
   */
  encode: function (msg: PartialDeep<FindAuditRequest>): Uint8Array {
    return FindAuditRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindAuditRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindAuditRequest {
    return FindAuditRequest._readMessage(
      FindAuditRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindAuditRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindAuditRequest>): FindAuditRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindAuditRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindAuditRequest,
    reader: protoscript.BinaryReader,
  ): FindAuditRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindAuditResponse = {
  /**
   * Serializes FindAuditResponse to protobuf.
   */
  encode: function (msg: PartialDeep<FindAuditResponse>): Uint8Array {
    return FindAuditResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindAuditResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindAuditResponse {
    return FindAuditResponse._readMessage(
      FindAuditResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindAuditResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindAuditResponse>): FindAuditResponse {
    return {
      audit: swapnodeV1Core.Audit.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindAuditResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.audit) {
      writer.writeMessage(1, msg.audit, swapnodeV1Core.Audit._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindAuditResponse,
    reader: protoscript.BinaryReader,
  ): FindAuditResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.audit, swapnodeV1Core.Audit._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAuditsRequest = {
  /**
   * Serializes ListAuditsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListAuditsRequest>): Uint8Array {
    return ListAuditsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAuditsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListAuditsRequest {
    return ListAuditsRequest._readMessage(
      ListAuditsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListAuditsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAuditsRequest>): ListAuditsRequest {
    return {
      offset: protoscript.Timestamp.initialize(),
      limit: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAuditsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.offset) {
      writer.writeMessage(1, msg.offset, protoscript.Timestamp._writeMessage);
    }
    if (msg.limit) {
      writer.writeInt64String(2, msg.limit.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsRequest,
    reader: protoscript.BinaryReader,
  ): ListAuditsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.offset, protoscript.Timestamp._readMessage);
          break;
        }
        case 2: {
          msg.limit = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAuditsResponse = {
  /**
   * Serializes ListAuditsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListAuditsResponse>): Uint8Array {
    return ListAuditsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAuditsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListAuditsResponse {
    return ListAuditsResponse._readMessage(
      ListAuditsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListAuditsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAuditsResponse>): ListAuditsResponse {
    return {
      audits: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAuditsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.audits?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.audits as any,
        swapnodeV1Core.Audit._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsResponse,
    reader: protoscript.BinaryReader,
  ): ListAuditsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = swapnodeV1Core.Audit.initialize();
          reader.readMessage(m, swapnodeV1Core.Audit._readMessage);
          msg.audits.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListExpiredDepositsRequest = {
  /**
   * Serializes ListExpiredDepositsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListExpiredDepositsRequest>): Uint8Array {
    return ListExpiredDepositsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListExpiredDepositsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListExpiredDepositsRequest {
    return ListExpiredDepositsRequest._readMessage(
      ListExpiredDepositsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListExpiredDepositsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListExpiredDepositsRequest>,
  ): ListExpiredDepositsRequest {
    return {
      limit: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListExpiredDepositsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.limit) {
      writer.writeInt64String(1, msg.limit.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListExpiredDepositsRequest,
    reader: protoscript.BinaryReader,
  ): ListExpiredDepositsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.limit = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListExpiredDepositsResponse = {
  /**
   * Serializes ListExpiredDepositsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListExpiredDepositsResponse>): Uint8Array {
    return ListExpiredDepositsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListExpiredDepositsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListExpiredDepositsResponse {
    return ListExpiredDepositsResponse._readMessage(
      ListExpiredDepositsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListExpiredDepositsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListExpiredDepositsResponse>,
  ): ListExpiredDepositsResponse {
    return {
      deposits: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListExpiredDepositsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.deposits?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.deposits as any,
        swapnodeV1Core.Deposit._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListExpiredDepositsResponse,
    reader: protoscript.BinaryReader,
  ): ListExpiredDepositsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = swapnodeV1Core.Deposit.initialize();
          reader.readMessage(m, swapnodeV1Core.Deposit._readMessage);
          msg.deposits.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListPairsRequestJSON = {
  /**
   * Serializes ListPairsRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<ListPairsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ListPairsRequest from JSON.
   */
  decode: function (_json?: string): ListPairsRequest {
    return {};
  },

  /**
   * Initializes ListPairsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPairsRequest>): ListPairsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListPairsRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: ListPairsRequest, _json: any): ListPairsRequest {
    return msg;
  },
};

export const ListPairsResponseJSON = {
  /**
   * Serializes ListPairsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListPairsResponse>): string {
    return JSON.stringify(ListPairsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListPairsResponse from JSON.
   */
  decode: function (json: string): ListPairsResponse {
    return ListPairsResponseJSON._readMessage(
      ListPairsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListPairsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPairsResponse>): ListPairsResponse {
    return {
      pairs: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPairsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pairs?.length) {
      json["pairs"] = msg.pairs.map(swapnodeV1Core.PairJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPairsResponse,
    json: any,
  ): ListPairsResponse {
    const _pairs_ = json["pairs"];
    if (_pairs_) {
      for (const item of _pairs_) {
        const m = swapnodeV1Core.PairJSON.initialize();
        swapnodeV1Core.PairJSON._readMessage(m, item);
        msg.pairs.push(m);
      }
    }
    return msg;
  },
};

export const ListOutputsRequestJSON = {
  /**
   * Serializes ListOutputsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListOutputsRequest>): string {
    return JSON.stringify(ListOutputsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListOutputsRequest from JSON.
   */
  decode: function (json: string): ListOutputsRequest {
    return ListOutputsRequestJSON._readMessage(
      ListOutputsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListOutputsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListOutputsRequest>): ListOutputsRequest {
    return {
      cursor: "",
      limit: 0,
      decodeHeader: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListOutputsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.cursor) {
      json["cursor"] = msg.cursor;
    }
    if (msg.limit) {
      json["limit"] = msg.limit;
    }
    if (msg.decodeHeader) {
      json["decodeHeader"] = msg.decodeHeader;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOutputsRequest,
    json: any,
  ): ListOutputsRequest {
    const _cursor_ = json["cursor"];
    if (_cursor_) {
      msg.cursor = _cursor_;
    }
    const _limit_ = json["limit"];
    if (_limit_) {
      msg.limit = protoscript.parseNumber(_limit_);
    }
    const _decodeHeader_ = json["decodeHeader"] ?? json["decode_header"];
    if (_decodeHeader_) {
      msg.decodeHeader = _decodeHeader_;
    }
    return msg;
  },
};

export const ListOutputsResponseJSON = {
  /**
   * Serializes ListOutputsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListOutputsResponse>): string {
    return JSON.stringify(ListOutputsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListOutputsResponse from JSON.
   */
  decode: function (json: string): ListOutputsResponse {
    return ListOutputsResponseJSON._readMessage(
      ListOutputsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListOutputsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListOutputsResponse>,
  ): ListOutputsResponse {
    return {
      outputs: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListOutputsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.outputs?.length) {
      json["outputs"] = msg.outputs.map(
        swapnodeV1Core.OutputJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOutputsResponse,
    json: any,
  ): ListOutputsResponse {
    const _outputs_ = json["outputs"];
    if (_outputs_) {
      for (const item of _outputs_) {
        const m = swapnodeV1Core.OutputJSON.initialize();
        swapnodeV1Core.OutputJSON._readMessage(m, item);
        msg.outputs.push(m);
      }
    }
    return msg;
  },
};

export const FindOrderRequestJSON = {
  /**
   * Serializes FindOrderRequest to JSON.
   */
  encode: function (msg: PartialDeep<FindOrderRequest>): string {
    return JSON.stringify(FindOrderRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindOrderRequest from JSON.
   */
  decode: function (json: string): FindOrderRequest {
    return FindOrderRequestJSON._readMessage(
      FindOrderRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindOrderRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindOrderRequest>): FindOrderRequest {
    return {
      userId: "",
      followId: "",
      traceId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindOrderRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.followId) {
      json["followId"] = msg.followId;
    }
    if (msg.traceId) {
      json["traceId"] = msg.traceId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FindOrderRequest, json: any): FindOrderRequest {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _followId_ = json["followId"] ?? json["follow_id"];
    if (_followId_) {
      msg.followId = _followId_;
    }
    const _traceId_ = json["traceId"] ?? json["trace_id"];
    if (_traceId_) {
      msg.traceId = _traceId_;
    }
    return msg;
  },
};

export const FindOrderResponseJSON = {
  /**
   * Serializes FindOrderResponse to JSON.
   */
  encode: function (msg: PartialDeep<FindOrderResponse>): string {
    return JSON.stringify(FindOrderResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindOrderResponse from JSON.
   */
  decode: function (json: string): FindOrderResponse {
    return FindOrderResponseJSON._readMessage(
      FindOrderResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindOrderResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindOrderResponse>): FindOrderResponse {
    return {
      order: swapnodeV1Core.OrderJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindOrderResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.order) {
      const _order_ = swapnodeV1Core.OrderJSON._writeMessage(msg.order);
      if (Object.keys(_order_).length > 0) {
        json["order"] = _order_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindOrderResponse,
    json: any,
  ): FindOrderResponse {
    const _order_ = json["order"];
    if (_order_) {
      swapnodeV1Core.OrderJSON._readMessage(msg.order, _order_);
    }
    return msg;
  },
};

export const FindDepositRequestJSON = {
  /**
   * Serializes FindDepositRequest to JSON.
   */
  encode: function (msg: PartialDeep<FindDepositRequest>): string {
    return JSON.stringify(FindDepositRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindDepositRequest from JSON.
   */
  decode: function (json: string): FindDepositRequest {
    return FindDepositRequestJSON._readMessage(
      FindDepositRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindDepositRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindDepositRequest>): FindDepositRequest {
    return {
      userId: "",
      followId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindDepositRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.followId) {
      json["followId"] = msg.followId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindDepositRequest,
    json: any,
  ): FindDepositRequest {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _followId_ = json["followId"] ?? json["follow_id"];
    if (_followId_) {
      msg.followId = _followId_;
    }
    return msg;
  },
};

export const FindDepositResponseJSON = {
  /**
   * Serializes FindDepositResponse to JSON.
   */
  encode: function (msg: PartialDeep<FindDepositResponse>): string {
    return JSON.stringify(FindDepositResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindDepositResponse from JSON.
   */
  decode: function (json: string): FindDepositResponse {
    return FindDepositResponseJSON._readMessage(
      FindDepositResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindDepositResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FindDepositResponse>,
  ): FindDepositResponse {
    return {
      deposit: swapnodeV1Core.DepositJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindDepositResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.deposit) {
      const _deposit_ = swapnodeV1Core.DepositJSON._writeMessage(msg.deposit);
      if (Object.keys(_deposit_).length > 0) {
        json["deposit"] = _deposit_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindDepositResponse,
    json: any,
  ): FindDepositResponse {
    const _deposit_ = json["deposit"];
    if (_deposit_) {
      swapnodeV1Core.DepositJSON._readMessage(msg.deposit, _deposit_);
    }
    return msg;
  },
};

export const ListTransactionsRequestJSON = {
  /**
   * Serializes ListTransactionsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListTransactionsRequest>): string {
    return JSON.stringify(ListTransactionsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListTransactionsRequest from JSON.
   */
  decode: function (json: string): ListTransactionsRequest {
    return ListTransactionsRequestJSON._readMessage(
      ListTransactionsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListTransactionsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTransactionsRequest>,
  ): ListTransactionsRequest {
    return {
      groupId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTransactionsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransactionsRequest,
    json: any,
  ): ListTransactionsRequest {
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const ListTransactionsResponseJSON = {
  /**
   * Serializes ListTransactionsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListTransactionsResponse>): string {
    return JSON.stringify(ListTransactionsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListTransactionsResponse from JSON.
   */
  decode: function (json: string): ListTransactionsResponse {
    return ListTransactionsResponseJSON._readMessage(
      ListTransactionsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListTransactionsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTransactionsResponse>,
  ): ListTransactionsResponse {
    return {
      transactions: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTransactionsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.transactions?.length) {
      json["transactions"] = msg.transactions.map(
        swapnodeV1Core.TransactionJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransactionsResponse,
    json: any,
  ): ListTransactionsResponse {
    const _transactions_ = json["transactions"];
    if (_transactions_) {
      for (const item of _transactions_) {
        const m = swapnodeV1Core.TransactionJSON.initialize();
        swapnodeV1Core.TransactionJSON._readMessage(m, item);
        msg.transactions.push(m);
      }
    }
    return msg;
  },
};

export const GetInfoRequestJSON = {
  /**
   * Serializes GetInfoRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<GetInfoRequest>): string {
    return "{}";
  },

  /**
   * Deserializes GetInfoRequest from JSON.
   */
  decode: function (_json?: string): GetInfoRequest {
    return {};
  },

  /**
   * Initializes GetInfoRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetInfoRequest>): GetInfoRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<GetInfoRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetInfoRequest, _json: any): GetInfoRequest {
    return msg;
  },
};

export const GetInfoResponseJSON = {
  /**
   * Serializes GetInfoResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetInfoResponse>): string {
    return JSON.stringify(GetInfoResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetInfoResponse from JSON.
   */
  decode: function (json: string): GetInfoResponse {
    return GetInfoResponseJSON._readMessage(
      GetInfoResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetInfoResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetInfoResponse>): GetInfoResponse {
    return {
      members: [],
      threshold: 0,
      publicKey: "",
      version: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetInfoResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.members?.length) {
      json["members"] = msg.members;
    }
    if (msg.threshold) {
      json["threshold"] = msg.threshold;
    }
    if (msg.publicKey) {
      json["publicKey"] = msg.publicKey;
    }
    if (msg.version) {
      json["version"] = msg.version;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetInfoResponse, json: any): GetInfoResponse {
    const _members_ = json["members"];
    if (_members_) {
      msg.members = _members_;
    }
    const _threshold_ = json["threshold"];
    if (_threshold_) {
      msg.threshold = protoscript.parseNumber(_threshold_);
    }
    const _publicKey_ = json["publicKey"] ?? json["public_key"];
    if (_publicKey_) {
      msg.publicKey = _publicKey_;
    }
    const _version_ = json["version"];
    if (_version_) {
      msg.version = _version_;
    }
    return msg;
  },
};

export const FindTransferRequestJSON = {
  /**
   * Serializes FindTransferRequest to JSON.
   */
  encode: function (msg: PartialDeep<FindTransferRequest>): string {
    return JSON.stringify(FindTransferRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindTransferRequest from JSON.
   */
  decode: function (json: string): FindTransferRequest {
    return FindTransferRequestJSON._readMessage(
      FindTransferRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindTransferRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FindTransferRequest>,
  ): FindTransferRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindTransferRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindTransferRequest,
    json: any,
  ): FindTransferRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const FindTransferResponseJSON = {
  /**
   * Serializes FindTransferResponse to JSON.
   */
  encode: function (msg: PartialDeep<FindTransferResponse>): string {
    return JSON.stringify(FindTransferResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindTransferResponse from JSON.
   */
  decode: function (json: string): FindTransferResponse {
    return FindTransferResponseJSON._readMessage(
      FindTransferResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindTransferResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FindTransferResponse>,
  ): FindTransferResponse {
    return {
      transfer: swapnodeV1Core.TransferJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindTransferResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.transfer) {
      const _transfer_ = swapnodeV1Core.TransferJSON._writeMessage(
        msg.transfer,
      );
      if (Object.keys(_transfer_).length > 0) {
        json["transfer"] = _transfer_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindTransferResponse,
    json: any,
  ): FindTransferResponse {
    const _transfer_ = json["transfer"];
    if (_transfer_) {
      swapnodeV1Core.TransferJSON._readMessage(msg.transfer, _transfer_);
    }
    return msg;
  },
};

export const ListTransfersRequestJSON = {
  /**
   * Serializes ListTransfersRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListTransfersRequest>): string {
    return JSON.stringify(ListTransfersRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListTransfersRequest from JSON.
   */
  decode: function (json: string): ListTransfersRequest {
    return ListTransfersRequestJSON._readMessage(
      ListTransfersRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListTransfersRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTransfersRequest>,
  ): ListTransfersRequest {
    return {
      cursor: "",
      limit: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTransfersRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.cursor) {
      json["cursor"] = msg.cursor;
    }
    if (msg.limit) {
      json["limit"] = msg.limit;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransfersRequest,
    json: any,
  ): ListTransfersRequest {
    const _cursor_ = json["cursor"];
    if (_cursor_) {
      msg.cursor = _cursor_;
    }
    const _limit_ = json["limit"];
    if (_limit_) {
      msg.limit = protoscript.parseNumber(_limit_);
    }
    return msg;
  },
};

export const ListTransfersResponseJSON = {
  /**
   * Serializes ListTransfersResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListTransfersResponse>): string {
    return JSON.stringify(ListTransfersResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListTransfersResponse from JSON.
   */
  decode: function (json: string): ListTransfersResponse {
    return ListTransfersResponseJSON._readMessage(
      ListTransfersResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListTransfersResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTransfersResponse>,
  ): ListTransfersResponse {
    return {
      transfers: [],
      nextCursor: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTransfersResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.transfers?.length) {
      json["transfers"] = msg.transfers.map(
        swapnodeV1Core.TransferJSON._writeMessage,
      );
    }
    if (msg.nextCursor) {
      json["nextCursor"] = msg.nextCursor;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransfersResponse,
    json: any,
  ): ListTransfersResponse {
    const _transfers_ = json["transfers"];
    if (_transfers_) {
      for (const item of _transfers_) {
        const m = swapnodeV1Core.TransferJSON.initialize();
        swapnodeV1Core.TransferJSON._readMessage(m, item);
        msg.transfers.push(m);
      }
    }
    const _nextCursor_ = json["nextCursor"] ?? json["next_cursor"];
    if (_nextCursor_) {
      msg.nextCursor = _nextCursor_;
    }
    return msg;
  },
};

export const FindAuditRequestJSON = {
  /**
   * Serializes FindAuditRequest to JSON.
   */
  encode: function (msg: PartialDeep<FindAuditRequest>): string {
    return JSON.stringify(FindAuditRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindAuditRequest from JSON.
   */
  decode: function (json: string): FindAuditRequest {
    return FindAuditRequestJSON._readMessage(
      FindAuditRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindAuditRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindAuditRequest>): FindAuditRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindAuditRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FindAuditRequest, json: any): FindAuditRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const FindAuditResponseJSON = {
  /**
   * Serializes FindAuditResponse to JSON.
   */
  encode: function (msg: PartialDeep<FindAuditResponse>): string {
    return JSON.stringify(FindAuditResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindAuditResponse from JSON.
   */
  decode: function (json: string): FindAuditResponse {
    return FindAuditResponseJSON._readMessage(
      FindAuditResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindAuditResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindAuditResponse>): FindAuditResponse {
    return {
      audit: swapnodeV1Core.AuditJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindAuditResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.audit) {
      const _audit_ = swapnodeV1Core.AuditJSON._writeMessage(msg.audit);
      if (Object.keys(_audit_).length > 0) {
        json["audit"] = _audit_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindAuditResponse,
    json: any,
  ): FindAuditResponse {
    const _audit_ = json["audit"];
    if (_audit_) {
      swapnodeV1Core.AuditJSON._readMessage(msg.audit, _audit_);
    }
    return msg;
  },
};

export const ListAuditsRequestJSON = {
  /**
   * Serializes ListAuditsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListAuditsRequest>): string {
    return JSON.stringify(ListAuditsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAuditsRequest from JSON.
   */
  decode: function (json: string): ListAuditsRequest {
    return ListAuditsRequestJSON._readMessage(
      ListAuditsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListAuditsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAuditsRequest>): ListAuditsRequest {
    return {
      offset: protoscript.TimestampJSON.initialize(),
      limit: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAuditsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.offset && msg.offset.seconds && msg.offset.nanos) {
      json["offset"] = protoscript.serializeTimestamp(msg.offset);
    }
    if (msg.limit) {
      json["limit"] = String(msg.limit);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsRequest,
    json: any,
  ): ListAuditsRequest {
    const _offset_ = json["offset"];
    if (_offset_) {
      msg.offset = protoscript.parseTimestamp(_offset_);
    }
    const _limit_ = json["limit"];
    if (_limit_) {
      msg.limit = BigInt(_limit_);
    }
    return msg;
  },
};

export const ListAuditsResponseJSON = {
  /**
   * Serializes ListAuditsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListAuditsResponse>): string {
    return JSON.stringify(ListAuditsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAuditsResponse from JSON.
   */
  decode: function (json: string): ListAuditsResponse {
    return ListAuditsResponseJSON._readMessage(
      ListAuditsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListAuditsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAuditsResponse>): ListAuditsResponse {
    return {
      audits: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAuditsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.audits?.length) {
      json["audits"] = msg.audits.map(swapnodeV1Core.AuditJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsResponse,
    json: any,
  ): ListAuditsResponse {
    const _audits_ = json["audits"];
    if (_audits_) {
      for (const item of _audits_) {
        const m = swapnodeV1Core.AuditJSON.initialize();
        swapnodeV1Core.AuditJSON._readMessage(m, item);
        msg.audits.push(m);
      }
    }
    return msg;
  },
};

export const ListExpiredDepositsRequestJSON = {
  /**
   * Serializes ListExpiredDepositsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListExpiredDepositsRequest>): string {
    return JSON.stringify(ListExpiredDepositsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListExpiredDepositsRequest from JSON.
   */
  decode: function (json: string): ListExpiredDepositsRequest {
    return ListExpiredDepositsRequestJSON._readMessage(
      ListExpiredDepositsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListExpiredDepositsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListExpiredDepositsRequest>,
  ): ListExpiredDepositsRequest {
    return {
      limit: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListExpiredDepositsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.limit) {
      json["limit"] = String(msg.limit);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListExpiredDepositsRequest,
    json: any,
  ): ListExpiredDepositsRequest {
    const _limit_ = json["limit"];
    if (_limit_) {
      msg.limit = BigInt(_limit_);
    }
    return msg;
  },
};

export const ListExpiredDepositsResponseJSON = {
  /**
   * Serializes ListExpiredDepositsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListExpiredDepositsResponse>): string {
    return JSON.stringify(ListExpiredDepositsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListExpiredDepositsResponse from JSON.
   */
  decode: function (json: string): ListExpiredDepositsResponse {
    return ListExpiredDepositsResponseJSON._readMessage(
      ListExpiredDepositsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListExpiredDepositsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListExpiredDepositsResponse>,
  ): ListExpiredDepositsResponse {
    return {
      deposits: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListExpiredDepositsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.deposits?.length) {
      json["deposits"] = msg.deposits.map(
        swapnodeV1Core.DepositJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListExpiredDepositsResponse,
    json: any,
  ): ListExpiredDepositsResponse {
    const _deposits_ = json["deposits"];
    if (_deposits_) {
      for (const item of _deposits_) {
        const m = swapnodeV1Core.DepositJSON.initialize();
        swapnodeV1Core.DepositJSON._readMessage(m, item);
        msg.deposits.push(m);
      }
    }
    return msg;
  },
};
