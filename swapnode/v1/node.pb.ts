// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: swapnode/v1/node.proto
/* eslint-disable */

import type { ByteSource, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";

import {
  Pair,
  PairJSON,
  Output,
  OutputJSON,
  Order,
  OrderJSON,
  Deposit,
  DepositJSON,
  Transaction,
  TransactionJSON,
  Transfer,
  TransferJSON,
} from "./core.pb";

//========================================//
//    SwapNodeService Protobuf Client     //
//========================================//

export async function ListPairs(
  listPairsRequest: ListPairsRequest,
  config?: ClientConfiguration
): Promise<ListPairsResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/ListPairs",
    ListPairsRequest.encode(listPairsRequest),
    config
  );
  return ListPairsResponse.decode(response);
}

export async function ListOutputs(
  listOutputsRequest: ListOutputsRequest,
  config?: ClientConfiguration
): Promise<ListOutputsResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/ListOutputs",
    ListOutputsRequest.encode(listOutputsRequest),
    config
  );
  return ListOutputsResponse.decode(response);
}

export async function FindOrder(
  findOrderRequest: FindOrderRequest,
  config?: ClientConfiguration
): Promise<FindOrderResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/FindOrder",
    FindOrderRequest.encode(findOrderRequest),
    config
  );
  return FindOrderResponse.decode(response);
}

export async function FindDeposit(
  findDepositRequest: FindDepositRequest,
  config?: ClientConfiguration
): Promise<FindDepositResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/FindDeposit",
    FindDepositRequest.encode(findDepositRequest),
    config
  );
  return FindDepositResponse.decode(response);
}

export async function ListTransactions(
  listTransactionsRequest: ListTransactionsRequest,
  config?: ClientConfiguration
): Promise<ListTransactionsResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/ListTransactions",
    ListTransactionsRequest.encode(listTransactionsRequest),
    config
  );
  return ListTransactionsResponse.decode(response);
}

export async function GetInfo(
  getInfoRequest: GetInfoRequest,
  config?: ClientConfiguration
): Promise<GetInfoResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/GetInfo",
    GetInfoRequest.encode(getInfoRequest),
    config
  );
  return GetInfoResponse.decode(response);
}

export async function FindTransfer(
  findTransferRequest: FindTransferRequest,
  config?: ClientConfiguration
): Promise<FindTransferResponse> {
  const response = await PBrequest(
    "/swapnode.v1.SwapNodeService/FindTransfer",
    FindTransferRequest.encode(findTransferRequest),
    config
  );
  return FindTransferResponse.decode(response);
}

//========================================//
//      SwapNodeService JSON Client       //
//========================================//

export async function ListPairsJSON(
  listPairsRequest: ListPairsRequest,
  config?: ClientConfiguration
): Promise<ListPairsResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/ListPairs",
    ListPairsRequestJSON.encode(listPairsRequest),
    config
  );
  return ListPairsResponseJSON.decode(response);
}

export async function ListOutputsJSON(
  listOutputsRequest: ListOutputsRequest,
  config?: ClientConfiguration
): Promise<ListOutputsResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/ListOutputs",
    ListOutputsRequestJSON.encode(listOutputsRequest),
    config
  );
  return ListOutputsResponseJSON.decode(response);
}

export async function FindOrderJSON(
  findOrderRequest: FindOrderRequest,
  config?: ClientConfiguration
): Promise<FindOrderResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/FindOrder",
    FindOrderRequestJSON.encode(findOrderRequest),
    config
  );
  return FindOrderResponseJSON.decode(response);
}

export async function FindDepositJSON(
  findDepositRequest: FindDepositRequest,
  config?: ClientConfiguration
): Promise<FindDepositResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/FindDeposit",
    FindDepositRequestJSON.encode(findDepositRequest),
    config
  );
  return FindDepositResponseJSON.decode(response);
}

export async function ListTransactionsJSON(
  listTransactionsRequest: ListTransactionsRequest,
  config?: ClientConfiguration
): Promise<ListTransactionsResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/ListTransactions",
    ListTransactionsRequestJSON.encode(listTransactionsRequest),
    config
  );
  return ListTransactionsResponseJSON.decode(response);
}

export async function GetInfoJSON(
  getInfoRequest: GetInfoRequest,
  config?: ClientConfiguration
): Promise<GetInfoResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/GetInfo",
    GetInfoRequestJSON.encode(getInfoRequest),
    config
  );
  return GetInfoResponseJSON.decode(response);
}

export async function FindTransferJSON(
  findTransferRequest: FindTransferRequest,
  config?: ClientConfiguration
): Promise<FindTransferResponse> {
  const response = await JSONrequest(
    "/swapnode.v1.SwapNodeService/FindTransfer",
    FindTransferRequestJSON.encode(findTransferRequest),
    config
  );
  return FindTransferResponseJSON.decode(response);
}

//========================================//
//            SwapNodeService             //
//========================================//

export interface SwapNodeService<Context = unknown> {
  ListPairs: (
    listPairsRequest: ListPairsRequest,
    context: Context
  ) => Promise<ListPairsResponse> | ListPairsResponse;
  ListOutputs: (
    listOutputsRequest: ListOutputsRequest,
    context: Context
  ) => Promise<ListOutputsResponse> | ListOutputsResponse;
  FindOrder: (
    findOrderRequest: FindOrderRequest,
    context: Context
  ) => Promise<FindOrderResponse> | FindOrderResponse;
  FindDeposit: (
    findDepositRequest: FindDepositRequest,
    context: Context
  ) => Promise<FindDepositResponse> | FindDepositResponse;
  ListTransactions: (
    listTransactionsRequest: ListTransactionsRequest,
    context: Context
  ) => Promise<ListTransactionsResponse> | ListTransactionsResponse;
  GetInfo: (
    getInfoRequest: GetInfoRequest,
    context: Context
  ) => Promise<GetInfoResponse> | GetInfoResponse;
  FindTransfer: (
    findTransferRequest: FindTransferRequest,
    context: Context
  ) => Promise<FindTransferResponse> | FindTransferResponse;
}

export function createSwapNodeService<Context>(
  service: SwapNodeService<Context>
) {
  return {
    name: "swapnode.v1.SwapNodeService",
    methods: {
      ListPairs: {
        name: "ListPairs",
        handler: service.ListPairs,
        input: { protobuf: ListPairsRequest, json: ListPairsRequestJSON },
        output: { protobuf: ListPairsResponse, json: ListPairsResponseJSON },
      },
      ListOutputs: {
        name: "ListOutputs",
        handler: service.ListOutputs,
        input: { protobuf: ListOutputsRequest, json: ListOutputsRequestJSON },
        output: {
          protobuf: ListOutputsResponse,
          json: ListOutputsResponseJSON,
        },
      },
      FindOrder: {
        name: "FindOrder",
        handler: service.FindOrder,
        input: { protobuf: FindOrderRequest, json: FindOrderRequestJSON },
        output: { protobuf: FindOrderResponse, json: FindOrderResponseJSON },
      },
      FindDeposit: {
        name: "FindDeposit",
        handler: service.FindDeposit,
        input: { protobuf: FindDepositRequest, json: FindDepositRequestJSON },
        output: {
          protobuf: FindDepositResponse,
          json: FindDepositResponseJSON,
        },
      },
      ListTransactions: {
        name: "ListTransactions",
        handler: service.ListTransactions,
        input: {
          protobuf: ListTransactionsRequest,
          json: ListTransactionsRequestJSON,
        },
        output: {
          protobuf: ListTransactionsResponse,
          json: ListTransactionsResponseJSON,
        },
      },
      GetInfo: {
        name: "GetInfo",
        handler: service.GetInfo,
        input: { protobuf: GetInfoRequest, json: GetInfoRequestJSON },
        output: { protobuf: GetInfoResponse, json: GetInfoResponseJSON },
      },
      FindTransfer: {
        name: "FindTransfer",
        handler: service.FindTransfer,
        input: { protobuf: FindTransferRequest, json: FindTransferRequestJSON },
        output: {
          protobuf: FindTransferResponse,
          json: FindTransferResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export interface ListPairsRequest {}

export interface ListPairsResponse {
  pairs: Pair[];
}

export interface ListOutputsRequest {
  cursor: string;
  limit: number;
}

export interface ListOutputsResponse {
  outputs: Output[];
}

export interface FindOrderRequest {
  userId: string;
  followId: string;
}

export interface FindOrderResponse {
  order: Order;
}

export interface FindDepositRequest {
  userId: string;
  followId: string;
}

export interface FindDepositResponse {
  deposit: Deposit;
}

export interface ListTransactionsRequest {
  groupId: string;
}

export interface ListTransactionsResponse {
  transactions: Transaction[];
}

export interface GetInfoRequest {}

export interface GetInfoResponse {
  members: string[];
  threshold: number;
  publicKey: string;
  version: string;
}

export interface FindTransferRequest {
  id: string;
}

export interface FindTransferResponse {
  transfer: Transfer;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListPairsRequest = {
  /**
   * Serializes ListPairsRequest to protobuf.
   */
  encode: function (_msg?: Partial<ListPairsRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ListPairsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ListPairsRequest {
    return {};
  },

  /**
   * Initializes ListPairsRequest with all fields set to their default value.
   */
  initialize: function (): ListPairsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ListPairsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ListPairsRequest,
    _reader: BinaryReader
  ): ListPairsRequest {
    return _msg;
  },
};

export const ListPairsResponse = {
  /**
   * Serializes ListPairsResponse to protobuf.
   */
  encode: function (msg: Partial<ListPairsResponse>): Uint8Array {
    return ListPairsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListPairsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListPairsResponse {
    return ListPairsResponse._readMessage(
      ListPairsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListPairsResponse with all fields set to their default value.
   */
  initialize: function (): ListPairsResponse {
    return {
      pairs: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListPairsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.pairs?.length) {
      writer.writeRepeatedMessage(1, msg.pairs as any, Pair._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPairsResponse,
    reader: BinaryReader
  ): ListPairsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Pair.initialize();
          reader.readMessage(m, Pair._readMessage);
          msg.pairs.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListOutputsRequest = {
  /**
   * Serializes ListOutputsRequest to protobuf.
   */
  encode: function (msg: Partial<ListOutputsRequest>): Uint8Array {
    return ListOutputsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListOutputsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListOutputsRequest {
    return ListOutputsRequest._readMessage(
      ListOutputsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListOutputsRequest with all fields set to their default value.
   */
  initialize: function (): ListOutputsRequest {
    return {
      cursor: "",
      limit: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListOutputsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.cursor) {
      writer.writeString(1, msg.cursor);
    }
    if (msg.limit) {
      writer.writeInt32(2, msg.limit);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOutputsRequest,
    reader: BinaryReader
  ): ListOutputsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.cursor = reader.readString();
          break;
        }
        case 2: {
          msg.limit = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListOutputsResponse = {
  /**
   * Serializes ListOutputsResponse to protobuf.
   */
  encode: function (msg: Partial<ListOutputsResponse>): Uint8Array {
    return ListOutputsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListOutputsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListOutputsResponse {
    return ListOutputsResponse._readMessage(
      ListOutputsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListOutputsResponse with all fields set to their default value.
   */
  initialize: function (): ListOutputsResponse {
    return {
      outputs: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListOutputsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.outputs?.length) {
      writer.writeRepeatedMessage(1, msg.outputs as any, Output._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOutputsResponse,
    reader: BinaryReader
  ): ListOutputsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Output.initialize();
          reader.readMessage(m, Output._readMessage);
          msg.outputs.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindOrderRequest = {
  /**
   * Serializes FindOrderRequest to protobuf.
   */
  encode: function (msg: Partial<FindOrderRequest>): Uint8Array {
    return FindOrderRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes FindOrderRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindOrderRequest {
    return FindOrderRequest._readMessage(
      FindOrderRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FindOrderRequest with all fields set to their default value.
   */
  initialize: function (): FindOrderRequest {
    return {
      userId: "",
      followId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindOrderRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.followId) {
      writer.writeString(2, msg.followId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindOrderRequest,
    reader: BinaryReader
  ): FindOrderRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.followId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindOrderResponse = {
  /**
   * Serializes FindOrderResponse to protobuf.
   */
  encode: function (msg: Partial<FindOrderResponse>): Uint8Array {
    return FindOrderResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes FindOrderResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindOrderResponse {
    return FindOrderResponse._readMessage(
      FindOrderResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FindOrderResponse with all fields set to their default value.
   */
  initialize: function (): FindOrderResponse {
    return {
      order: Order.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindOrderResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.order) {
      writer.writeMessage(1, msg.order, Order._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindOrderResponse,
    reader: BinaryReader
  ): FindOrderResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.order, Order._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindDepositRequest = {
  /**
   * Serializes FindDepositRequest to protobuf.
   */
  encode: function (msg: Partial<FindDepositRequest>): Uint8Array {
    return FindDepositRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes FindDepositRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindDepositRequest {
    return FindDepositRequest._readMessage(
      FindDepositRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FindDepositRequest with all fields set to their default value.
   */
  initialize: function (): FindDepositRequest {
    return {
      userId: "",
      followId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindDepositRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.followId) {
      writer.writeString(2, msg.followId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindDepositRequest,
    reader: BinaryReader
  ): FindDepositRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.followId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindDepositResponse = {
  /**
   * Serializes FindDepositResponse to protobuf.
   */
  encode: function (msg: Partial<FindDepositResponse>): Uint8Array {
    return FindDepositResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes FindDepositResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindDepositResponse {
    return FindDepositResponse._readMessage(
      FindDepositResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FindDepositResponse with all fields set to their default value.
   */
  initialize: function (): FindDepositResponse {
    return {
      deposit: Deposit.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindDepositResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.deposit) {
      writer.writeMessage(1, msg.deposit, Deposit._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindDepositResponse,
    reader: BinaryReader
  ): FindDepositResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.deposit, Deposit._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListTransactionsRequest = {
  /**
   * Serializes ListTransactionsRequest to protobuf.
   */
  encode: function (msg: Partial<ListTransactionsRequest>): Uint8Array {
    return ListTransactionsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListTransactionsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListTransactionsRequest {
    return ListTransactionsRequest._readMessage(
      ListTransactionsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListTransactionsRequest with all fields set to their default value.
   */
  initialize: function (): ListTransactionsRequest {
    return {
      groupId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListTransactionsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeString(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransactionsRequest,
    reader: BinaryReader
  ): ListTransactionsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListTransactionsResponse = {
  /**
   * Serializes ListTransactionsResponse to protobuf.
   */
  encode: function (msg: Partial<ListTransactionsResponse>): Uint8Array {
    return ListTransactionsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListTransactionsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListTransactionsResponse {
    return ListTransactionsResponse._readMessage(
      ListTransactionsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListTransactionsResponse with all fields set to their default value.
   */
  initialize: function (): ListTransactionsResponse {
    return {
      transactions: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListTransactionsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.transactions?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.transactions as any,
        Transaction._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransactionsResponse,
    reader: BinaryReader
  ): ListTransactionsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Transaction.initialize();
          reader.readMessage(m, Transaction._readMessage);
          msg.transactions.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetInfoRequest = {
  /**
   * Serializes GetInfoRequest to protobuf.
   */
  encode: function (_msg?: Partial<GetInfoRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes GetInfoRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): GetInfoRequest {
    return {};
  },

  /**
   * Initializes GetInfoRequest with all fields set to their default value.
   */
  initialize: function (): GetInfoRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<GetInfoRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: GetInfoRequest,
    _reader: BinaryReader
  ): GetInfoRequest {
    return _msg;
  },
};

export const GetInfoResponse = {
  /**
   * Serializes GetInfoResponse to protobuf.
   */
  encode: function (msg: Partial<GetInfoResponse>): Uint8Array {
    return GetInfoResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetInfoResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetInfoResponse {
    return GetInfoResponse._readMessage(
      GetInfoResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetInfoResponse with all fields set to their default value.
   */
  initialize: function (): GetInfoResponse {
    return {
      members: [],
      threshold: 0,
      publicKey: "",
      version: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetInfoResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.members?.length) {
      writer.writeRepeatedString(1, msg.members);
    }
    if (msg.threshold) {
      writer.writeInt32(2, msg.threshold);
    }
    if (msg.publicKey) {
      writer.writeString(3, msg.publicKey);
    }
    if (msg.version) {
      writer.writeString(4, msg.version);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetInfoResponse,
    reader: BinaryReader
  ): GetInfoResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.members.push(reader.readString());
          break;
        }
        case 2: {
          msg.threshold = reader.readInt32();
          break;
        }
        case 3: {
          msg.publicKey = reader.readString();
          break;
        }
        case 4: {
          msg.version = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindTransferRequest = {
  /**
   * Serializes FindTransferRequest to protobuf.
   */
  encode: function (msg: Partial<FindTransferRequest>): Uint8Array {
    return FindTransferRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes FindTransferRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindTransferRequest {
    return FindTransferRequest._readMessage(
      FindTransferRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FindTransferRequest with all fields set to their default value.
   */
  initialize: function (): FindTransferRequest {
    return {
      id: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindTransferRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindTransferRequest,
    reader: BinaryReader
  ): FindTransferRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindTransferResponse = {
  /**
   * Serializes FindTransferResponse to protobuf.
   */
  encode: function (msg: Partial<FindTransferResponse>): Uint8Array {
    return FindTransferResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes FindTransferResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindTransferResponse {
    return FindTransferResponse._readMessage(
      FindTransferResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FindTransferResponse with all fields set to their default value.
   */
  initialize: function (): FindTransferResponse {
    return {
      transfer: Transfer.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindTransferResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.transfer) {
      writer.writeMessage(1, msg.transfer, Transfer._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindTransferResponse,
    reader: BinaryReader
  ): FindTransferResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.transfer, Transfer._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListPairsRequestJSON = {
  /**
   * Serializes ListPairsRequest to JSON.
   */
  encode: function (_msg?: Partial<ListPairsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ListPairsRequest from JSON.
   */
  decode: function (_json?: string): ListPairsRequest {
    return {};
  },

  /**
   * Initializes ListPairsRequest with all fields set to their default value.
   */
  initialize: function (): ListPairsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ListPairsRequest>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: ListPairsRequest, _json: any): ListPairsRequest {
    return msg;
  },
};

export const ListPairsResponseJSON = {
  /**
   * Serializes ListPairsResponse to JSON.
   */
  encode: function (msg: Partial<ListPairsResponse>): string {
    return JSON.stringify(ListPairsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListPairsResponse from JSON.
   */
  decode: function (json: string): ListPairsResponse {
    return ListPairsResponseJSON._readMessage(
      ListPairsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListPairsResponse with all fields set to their default value.
   */
  initialize: function (): ListPairsResponse {
    return {
      pairs: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListPairsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pairs?.length) {
      json.pairs = msg.pairs.map(PairJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPairsResponse,
    json: any
  ): ListPairsResponse {
    const _pairs = json.pairs;
    if (_pairs) {
      for (const item of _pairs) {
        const m = Pair.initialize();
        PairJSON._readMessage(m, item);
        msg.pairs.push(m);
      }
    }
    return msg;
  },
};

export const ListOutputsRequestJSON = {
  /**
   * Serializes ListOutputsRequest to JSON.
   */
  encode: function (msg: Partial<ListOutputsRequest>): string {
    return JSON.stringify(ListOutputsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListOutputsRequest from JSON.
   */
  decode: function (json: string): ListOutputsRequest {
    return ListOutputsRequestJSON._readMessage(
      ListOutputsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListOutputsRequest with all fields set to their default value.
   */
  initialize: function (): ListOutputsRequest {
    return {
      cursor: "",
      limit: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListOutputsRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.cursor) {
      json.cursor = msg.cursor;
    }
    if (msg.limit) {
      json.limit = msg.limit;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOutputsRequest,
    json: any
  ): ListOutputsRequest {
    const _cursor = json.cursor;
    if (_cursor) {
      msg.cursor = _cursor;
    }
    const _limit = json.limit;
    if (_limit) {
      msg.limit = _limit;
    }
    return msg;
  },
};

export const ListOutputsResponseJSON = {
  /**
   * Serializes ListOutputsResponse to JSON.
   */
  encode: function (msg: Partial<ListOutputsResponse>): string {
    return JSON.stringify(ListOutputsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListOutputsResponse from JSON.
   */
  decode: function (json: string): ListOutputsResponse {
    return ListOutputsResponseJSON._readMessage(
      ListOutputsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListOutputsResponse with all fields set to their default value.
   */
  initialize: function (): ListOutputsResponse {
    return {
      outputs: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListOutputsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.outputs?.length) {
      json.outputs = msg.outputs.map(OutputJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListOutputsResponse,
    json: any
  ): ListOutputsResponse {
    const _outputs = json.outputs;
    if (_outputs) {
      for (const item of _outputs) {
        const m = Output.initialize();
        OutputJSON._readMessage(m, item);
        msg.outputs.push(m);
      }
    }
    return msg;
  },
};

export const FindOrderRequestJSON = {
  /**
   * Serializes FindOrderRequest to JSON.
   */
  encode: function (msg: Partial<FindOrderRequest>): string {
    return JSON.stringify(FindOrderRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindOrderRequest from JSON.
   */
  decode: function (json: string): FindOrderRequest {
    return FindOrderRequestJSON._readMessage(
      FindOrderRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FindOrderRequest with all fields set to their default value.
   */
  initialize: function (): FindOrderRequest {
    return {
      userId: "",
      followId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindOrderRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.followId) {
      json.followId = msg.followId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FindOrderRequest, json: any): FindOrderRequest {
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _followId = json.followId ?? json.follow_id;
    if (_followId) {
      msg.followId = _followId;
    }
    return msg;
  },
};

export const FindOrderResponseJSON = {
  /**
   * Serializes FindOrderResponse to JSON.
   */
  encode: function (msg: Partial<FindOrderResponse>): string {
    return JSON.stringify(FindOrderResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindOrderResponse from JSON.
   */
  decode: function (json: string): FindOrderResponse {
    return FindOrderResponseJSON._readMessage(
      FindOrderResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FindOrderResponse with all fields set to their default value.
   */
  initialize: function (): FindOrderResponse {
    return {
      order: Order.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindOrderResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.order) {
      const order = OrderJSON._writeMessage(msg.order);
      if (Object.keys(order).length > 0) {
        json.order = order;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindOrderResponse,
    json: any
  ): FindOrderResponse {
    const _order = json.order;
    if (_order) {
      const m = Order.initialize();
      OrderJSON._readMessage(m, _order);
      msg.order = m;
    }
    return msg;
  },
};

export const FindDepositRequestJSON = {
  /**
   * Serializes FindDepositRequest to JSON.
   */
  encode: function (msg: Partial<FindDepositRequest>): string {
    return JSON.stringify(FindDepositRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindDepositRequest from JSON.
   */
  decode: function (json: string): FindDepositRequest {
    return FindDepositRequestJSON._readMessage(
      FindDepositRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FindDepositRequest with all fields set to their default value.
   */
  initialize: function (): FindDepositRequest {
    return {
      userId: "",
      followId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindDepositRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.followId) {
      json.followId = msg.followId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindDepositRequest,
    json: any
  ): FindDepositRequest {
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _followId = json.followId ?? json.follow_id;
    if (_followId) {
      msg.followId = _followId;
    }
    return msg;
  },
};

export const FindDepositResponseJSON = {
  /**
   * Serializes FindDepositResponse to JSON.
   */
  encode: function (msg: Partial<FindDepositResponse>): string {
    return JSON.stringify(FindDepositResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindDepositResponse from JSON.
   */
  decode: function (json: string): FindDepositResponse {
    return FindDepositResponseJSON._readMessage(
      FindDepositResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FindDepositResponse with all fields set to their default value.
   */
  initialize: function (): FindDepositResponse {
    return {
      deposit: Deposit.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindDepositResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.deposit) {
      const deposit = DepositJSON._writeMessage(msg.deposit);
      if (Object.keys(deposit).length > 0) {
        json.deposit = deposit;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindDepositResponse,
    json: any
  ): FindDepositResponse {
    const _deposit = json.deposit;
    if (_deposit) {
      const m = Deposit.initialize();
      DepositJSON._readMessage(m, _deposit);
      msg.deposit = m;
    }
    return msg;
  },
};

export const ListTransactionsRequestJSON = {
  /**
   * Serializes ListTransactionsRequest to JSON.
   */
  encode: function (msg: Partial<ListTransactionsRequest>): string {
    return JSON.stringify(ListTransactionsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListTransactionsRequest from JSON.
   */
  decode: function (json: string): ListTransactionsRequest {
    return ListTransactionsRequestJSON._readMessage(
      ListTransactionsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListTransactionsRequest with all fields set to their default value.
   */
  initialize: function (): ListTransactionsRequest {
    return {
      groupId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListTransactionsRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json.groupId = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransactionsRequest,
    json: any
  ): ListTransactionsRequest {
    const _groupId = json.groupId ?? json.group_id;
    if (_groupId) {
      msg.groupId = _groupId;
    }
    return msg;
  },
};

export const ListTransactionsResponseJSON = {
  /**
   * Serializes ListTransactionsResponse to JSON.
   */
  encode: function (msg: Partial<ListTransactionsResponse>): string {
    return JSON.stringify(ListTransactionsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListTransactionsResponse from JSON.
   */
  decode: function (json: string): ListTransactionsResponse {
    return ListTransactionsResponseJSON._readMessage(
      ListTransactionsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListTransactionsResponse with all fields set to their default value.
   */
  initialize: function (): ListTransactionsResponse {
    return {
      transactions: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListTransactionsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.transactions?.length) {
      json.transactions = msg.transactions.map(TransactionJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTransactionsResponse,
    json: any
  ): ListTransactionsResponse {
    const _transactions = json.transactions;
    if (_transactions) {
      for (const item of _transactions) {
        const m = Transaction.initialize();
        TransactionJSON._readMessage(m, item);
        msg.transactions.push(m);
      }
    }
    return msg;
  },
};

export const GetInfoRequestJSON = {
  /**
   * Serializes GetInfoRequest to JSON.
   */
  encode: function (_msg?: Partial<GetInfoRequest>): string {
    return "{}";
  },

  /**
   * Deserializes GetInfoRequest from JSON.
   */
  decode: function (_json?: string): GetInfoRequest {
    return {};
  },

  /**
   * Initializes GetInfoRequest with all fields set to their default value.
   */
  initialize: function (): GetInfoRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<GetInfoRequest>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetInfoRequest, _json: any): GetInfoRequest {
    return msg;
  },
};

export const GetInfoResponseJSON = {
  /**
   * Serializes GetInfoResponse to JSON.
   */
  encode: function (msg: Partial<GetInfoResponse>): string {
    return JSON.stringify(GetInfoResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetInfoResponse from JSON.
   */
  decode: function (json: string): GetInfoResponse {
    return GetInfoResponseJSON._readMessage(
      GetInfoResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetInfoResponse with all fields set to their default value.
   */
  initialize: function (): GetInfoResponse {
    return {
      members: [],
      threshold: 0,
      publicKey: "",
      version: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetInfoResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.members?.length) {
      json.members = msg.members;
    }
    if (msg.threshold) {
      json.threshold = msg.threshold;
    }
    if (msg.publicKey) {
      json.publicKey = msg.publicKey;
    }
    if (msg.version) {
      json.version = msg.version;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetInfoResponse, json: any): GetInfoResponse {
    const _members = json.members;
    if (_members) {
      msg.members = _members;
    }
    const _threshold = json.threshold;
    if (_threshold) {
      msg.threshold = _threshold;
    }
    const _publicKey = json.publicKey ?? json.public_key;
    if (_publicKey) {
      msg.publicKey = _publicKey;
    }
    const _version = json.version;
    if (_version) {
      msg.version = _version;
    }
    return msg;
  },
};

export const FindTransferRequestJSON = {
  /**
   * Serializes FindTransferRequest to JSON.
   */
  encode: function (msg: Partial<FindTransferRequest>): string {
    return JSON.stringify(FindTransferRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindTransferRequest from JSON.
   */
  decode: function (json: string): FindTransferRequest {
    return FindTransferRequestJSON._readMessage(
      FindTransferRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FindTransferRequest with all fields set to their default value.
   */
  initialize: function (): FindTransferRequest {
    return {
      id: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindTransferRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindTransferRequest,
    json: any
  ): FindTransferRequest {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    return msg;
  },
};

export const FindTransferResponseJSON = {
  /**
   * Serializes FindTransferResponse to JSON.
   */
  encode: function (msg: Partial<FindTransferResponse>): string {
    return JSON.stringify(FindTransferResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindTransferResponse from JSON.
   */
  decode: function (json: string): FindTransferResponse {
    return FindTransferResponseJSON._readMessage(
      FindTransferResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FindTransferResponse with all fields set to their default value.
   */
  initialize: function (): FindTransferResponse {
    return {
      transfer: Transfer.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindTransferResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.transfer) {
      const transfer = TransferJSON._writeMessage(msg.transfer);
      if (Object.keys(transfer).length > 0) {
        json.transfer = transfer;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindTransferResponse,
    json: any
  ): FindTransferResponse {
    const _transfer = json.transfer;
    if (_transfer) {
      const m = Transfer.initialize();
      TransferJSON._readMessage(m, _transfer);
      msg.transfer = m;
    }
    return msg;
  },
};
