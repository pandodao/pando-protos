// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: fswap/v1/fswap.proto

package fswap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Deposit_State int32

const (
	Deposit__         Deposit_State = 0
	Deposit_Pending   Deposit_State = 1
	Deposit_Cancelled Deposit_State = 2
	Deposit_Done      Deposit_State = 3
)

// Enum value maps for Deposit_State.
var (
	Deposit_State_name = map[int32]string{
		0: "_",
		1: "Pending",
		2: "Cancelled",
		3: "Done",
	}
	Deposit_State_value = map[string]int32{
		"_":         0,
		"Pending":   1,
		"Cancelled": 2,
		"Done":      3,
	}
)

func (x Deposit_State) Enum() *Deposit_State {
	p := new(Deposit_State)
	*p = x
	return p
}

func (x Deposit_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deposit_State) Descriptor() protoreflect.EnumDescriptor {
	return file_fswap_v1_fswap_proto_enumTypes[0].Descriptor()
}

func (Deposit_State) Type() protoreflect.EnumType {
	return &file_fswap_v1_fswap_proto_enumTypes[0]
}

func (x Deposit_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deposit_State.Descriptor instead.
func (Deposit_State) EnumDescriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{3, 0}
}

type Transaction_Type int32

const (
	Transaction__      Transaction_Type = 0
	Transaction_Add    Transaction_Type = 1
	Transaction_Remove Transaction_Type = 2
	Transaction_Swap   Transaction_Type = 3
)

// Enum value maps for Transaction_Type.
var (
	Transaction_Type_name = map[int32]string{
		0: "_",
		1: "Add",
		2: "Remove",
		3: "Swap",
	}
	Transaction_Type_value = map[string]int32{
		"_":      0,
		"Add":    1,
		"Remove": 2,
		"Swap":   3,
	}
)

func (x Transaction_Type) Enum() *Transaction_Type {
	p := new(Transaction_Type)
	*p = x
	return p
}

func (x Transaction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fswap_v1_fswap_proto_enumTypes[1].Descriptor()
}

func (Transaction_Type) Type() protoreflect.EnumType {
	return &file_fswap_v1_fswap_proto_enumTypes[1]
}

func (x Transaction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_Type.Descriptor instead.
func (Transaction_Type) EnumDescriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{4, 0}
}

type Order_State int32

const (
	Order__        Order_State = 0
	Order_Trading  Order_State = 1
	Order_Rejected Order_State = 2
	Order_Done     Order_State = 3
)

// Enum value maps for Order_State.
var (
	Order_State_name = map[int32]string{
		0: "_",
		1: "Trading",
		2: "Rejected",
		3: "Done",
	}
	Order_State_value = map[string]int32{
		"_":        0,
		"Trading":  1,
		"Rejected": 2,
		"Done":     3,
	}
)

func (x Order_State) Enum() *Order_State {
	p := new(Order_State)
	*p = x
	return p
}

func (x Order_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_State) Descriptor() protoreflect.EnumDescriptor {
	return file_fswap_v1_fswap_proto_enumTypes[2].Descriptor()
}

func (Order_State) Type() protoreflect.EnumType {
	return &file_fswap_v1_fswap_proto_enumTypes[2]
}

func (x Order_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_State.Descriptor instead.
func (Order_State) EnumDescriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{5, 0}
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextCursor string `protobuf:"bytes,1,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasNext    bool   `protobuf:"varint,2,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{0}
}

func (x *Pagination) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *Pagination) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol        string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo          string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	ChainId       string `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Chain         *Asset `protobuf:"bytes,6,opt,name=chain,proto3" json:"chain,omitempty"`
	Price         string `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	DisplaySymbol string `protobuf:"bytes,8,opt,name=display_symbol,json=displaySymbol,proto3" json:"display_symbol,omitempty"`
	Extra         string `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	Tag           string `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty"`
	PriceChange   string `protobuf:"bytes,11,opt,name=price_change,json=priceChange,proto3" json:"price_change,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Asset) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Asset) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Asset) GetChain() *Asset {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *Asset) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Asset) GetDisplaySymbol() string {
	if x != nil {
		return x.DisplaySymbol
	}
	return ""
}

func (x *Asset) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *Asset) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Asset) GetPriceChange() string {
	if x != nil {
		return x.PriceChange
	}
	return ""
}

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAssetId          string `protobuf:"bytes,1,opt,name=base_asset_id,json=baseAssetId,proto3" json:"base_asset_id,omitempty"`
	QuoteAssetId         string `protobuf:"bytes,2,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty"`
	BaseAmount           string `protobuf:"bytes,3,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	QuoteAmount          string `protobuf:"bytes,4,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
	Share                string `protobuf:"bytes,5,opt,name=share,proto3" json:"share,omitempty"`
	Liquidity            string `protobuf:"bytes,6,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	LiquidityAssetId     string `protobuf:"bytes,7,opt,name=liquidity_asset_id,json=liquidityAssetId,proto3" json:"liquidity_asset_id,omitempty"`
	RouteId              int32  `protobuf:"varint,8,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	FeePercent           string `protobuf:"bytes,9,opt,name=fee_percent,json=feePercent,proto3" json:"fee_percent,omitempty"`
	MaxLiquidity         string `protobuf:"bytes,10,opt,name=max_liquidity,json=maxLiquidity,proto3" json:"max_liquidity,omitempty"`
	BaseValue            string `protobuf:"bytes,11,opt,name=base_value,json=baseValue,proto3" json:"base_value,omitempty"`
	QuoteValue           string `protobuf:"bytes,12,opt,name=quote_value,json=quoteValue,proto3" json:"quote_value,omitempty"`
	Volume_24H           string `protobuf:"bytes,13,opt,name=volume_24h,json=volume24h,proto3" json:"volume_24h,omitempty"`
	Fee_24H              string `protobuf:"bytes,14,opt,name=fee_24h,json=fee24h,proto3" json:"fee_24h,omitempty"`
	TransactionCount_24H int32  `protobuf:"varint,15,opt,name=transaction_count_24h,json=transactionCount24h,proto3" json:"transaction_count_24h,omitempty"`
	SwapMethod           string `protobuf:"bytes,16,opt,name=swap_method,json=swapMethod,proto3" json:"swap_method,omitempty"`
	Version              int32  `protobuf:"varint,17,opt,name=version,proto3" json:"version,omitempty"`
	BaseVolume_24H       string `protobuf:"bytes,18,opt,name=base_volume_24h,json=baseVolume24h,proto3" json:"base_volume_24h,omitempty"`
	QuoteVolume_24H      string `protobuf:"bytes,19,opt,name=quote_volume_24h,json=quoteVolume24h,proto3" json:"quote_volume_24h,omitempty"`
	NetRor_24H           string `protobuf:"bytes,20,opt,name=net_ror_24h,json=netRor24h,proto3" json:"net_ror_24h,omitempty"`
	NetRor_7D            string `protobuf:"bytes,21,opt,name=net_ror_7d,json=netRor7d,proto3" json:"net_ror_7d,omitempty"`
	NetRor_30D           string `protobuf:"bytes,22,opt,name=net_ror_30d,json=netRor30d,proto3" json:"net_ror_30d,omitempty"`
	ProfitRate           string `protobuf:"bytes,23,opt,name=profit_rate,json=profitRate,proto3" json:"profit_rate,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{2}
}

func (x *Pair) GetBaseAssetId() string {
	if x != nil {
		return x.BaseAssetId
	}
	return ""
}

func (x *Pair) GetQuoteAssetId() string {
	if x != nil {
		return x.QuoteAssetId
	}
	return ""
}

func (x *Pair) GetBaseAmount() string {
	if x != nil {
		return x.BaseAmount
	}
	return ""
}

func (x *Pair) GetQuoteAmount() string {
	if x != nil {
		return x.QuoteAmount
	}
	return ""
}

func (x *Pair) GetShare() string {
	if x != nil {
		return x.Share
	}
	return ""
}

func (x *Pair) GetLiquidity() string {
	if x != nil {
		return x.Liquidity
	}
	return ""
}

func (x *Pair) GetLiquidityAssetId() string {
	if x != nil {
		return x.LiquidityAssetId
	}
	return ""
}

func (x *Pair) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *Pair) GetFeePercent() string {
	if x != nil {
		return x.FeePercent
	}
	return ""
}

func (x *Pair) GetMaxLiquidity() string {
	if x != nil {
		return x.MaxLiquidity
	}
	return ""
}

func (x *Pair) GetBaseValue() string {
	if x != nil {
		return x.BaseValue
	}
	return ""
}

func (x *Pair) GetQuoteValue() string {
	if x != nil {
		return x.QuoteValue
	}
	return ""
}

func (x *Pair) GetVolume_24H() string {
	if x != nil {
		return x.Volume_24H
	}
	return ""
}

func (x *Pair) GetFee_24H() string {
	if x != nil {
		return x.Fee_24H
	}
	return ""
}

func (x *Pair) GetTransactionCount_24H() int32 {
	if x != nil {
		return x.TransactionCount_24H
	}
	return 0
}

func (x *Pair) GetSwapMethod() string {
	if x != nil {
		return x.SwapMethod
	}
	return ""
}

func (x *Pair) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Pair) GetBaseVolume_24H() string {
	if x != nil {
		return x.BaseVolume_24H
	}
	return ""
}

func (x *Pair) GetQuoteVolume_24H() string {
	if x != nil {
		return x.QuoteVolume_24H
	}
	return ""
}

func (x *Pair) GetNetRor_24H() string {
	if x != nil {
		return x.NetRor_24H
	}
	return ""
}

func (x *Pair) GetNetRor_7D() string {
	if x != nil {
		return x.NetRor_7D
	}
	return ""
}

func (x *Pair) GetNetRor_30D() string {
	if x != nil {
		return x.NetRor_30D
	}
	return ""
}

func (x *Pair) GetProfitRate() string {
	if x != nil {
		return x.ProfitRate
	}
	return ""
}

type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	State        Deposit_State          `protobuf:"varint,3,opt,name=state,proto3,enum=fox.fswap.service.Deposit_State" json:"state,omitempty"`
	UserId       string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FollowId     string                 `protobuf:"bytes,5,opt,name=follow_id,json=followId,proto3" json:"follow_id,omitempty"`
	BaseAssetId  string                 `protobuf:"bytes,6,opt,name=base_asset_id,json=baseAssetId,proto3" json:"base_asset_id,omitempty"`
	BaseAmount   string                 `protobuf:"bytes,7,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	QuoteAssetId string                 `protobuf:"bytes,8,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty"`
	QuoteAmount  string                 `protobuf:"bytes,9,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
	Slippage     string                 `protobuf:"bytes,10,opt,name=slippage,proto3" json:"slippage,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{3}
}

func (x *Deposit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deposit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Deposit) GetState() Deposit_State {
	if x != nil {
		return x.State
	}
	return Deposit__
}

func (x *Deposit) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Deposit) GetFollowId() string {
	if x != nil {
		return x.FollowId
	}
	return ""
}

func (x *Deposit) GetBaseAssetId() string {
	if x != nil {
		return x.BaseAssetId
	}
	return ""
}

func (x *Deposit) GetBaseAmount() string {
	if x != nil {
		return x.BaseAmount
	}
	return ""
}

func (x *Deposit) GetQuoteAssetId() string {
	if x != nil {
		return x.QuoteAssetId
	}
	return ""
}

func (x *Deposit) GetQuoteAmount() string {
	if x != nil {
		return x.QuoteAmount
	}
	return ""
}

func (x *Deposit) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type          Transaction_Type       `protobuf:"varint,4,opt,name=type,proto3,enum=fox.fswap.service.Transaction_Type" json:"type,omitempty"`
	BaseAssetId   string                 `protobuf:"bytes,5,opt,name=base_asset_id,json=baseAssetId,proto3" json:"base_asset_id,omitempty"`
	QuoteAssetId  string                 `protobuf:"bytes,6,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty"`
	BaseAmount    string                 `protobuf:"bytes,7,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	QuoteAmount   string                 `protobuf:"bytes,8,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
	FeeAssetId    string                 `protobuf:"bytes,9,opt,name=fee_asset_id,json=feeAssetId,proto3" json:"fee_asset_id,omitempty"`
	FeeAmount     string                 `protobuf:"bytes,10,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
	PayAssetId    string                 `protobuf:"bytes,11,opt,name=pay_asset_id,json=payAssetId,proto3" json:"pay_asset_id,omitempty"`
	FilledAssetId string                 `protobuf:"bytes,12,opt,name=filled_asset_id,json=filledAssetId,proto3" json:"filled_asset_id,omitempty"`
	Funds         string                 `protobuf:"bytes,13,opt,name=funds,proto3" json:"funds,omitempty"`
	Amount        string                 `protobuf:"bytes,14,opt,name=amount,proto3" json:"amount,omitempty"`
	Value         string                 `protobuf:"bytes,15,opt,name=value,proto3" json:"value,omitempty"`
	FeeValue      string                 `protobuf:"bytes,16,opt,name=fee_value,json=feeValue,proto3" json:"fee_value,omitempty"`
	FollowId      string                 `protobuf:"bytes,17,opt,name=follow_id,json=followId,proto3" json:"follow_id,omitempty"`
	Liquidity     string                 `protobuf:"bytes,18,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	GroupId       string                 `protobuf:"bytes,19,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{4}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Transaction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Transaction) GetType() Transaction_Type {
	if x != nil {
		return x.Type
	}
	return Transaction__
}

func (x *Transaction) GetBaseAssetId() string {
	if x != nil {
		return x.BaseAssetId
	}
	return ""
}

func (x *Transaction) GetQuoteAssetId() string {
	if x != nil {
		return x.QuoteAssetId
	}
	return ""
}

func (x *Transaction) GetBaseAmount() string {
	if x != nil {
		return x.BaseAmount
	}
	return ""
}

func (x *Transaction) GetQuoteAmount() string {
	if x != nil {
		return x.QuoteAmount
	}
	return ""
}

func (x *Transaction) GetFeeAssetId() string {
	if x != nil {
		return x.FeeAssetId
	}
	return ""
}

func (x *Transaction) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *Transaction) GetPayAssetId() string {
	if x != nil {
		return x.PayAssetId
	}
	return ""
}

func (x *Transaction) GetFilledAssetId() string {
	if x != nil {
		return x.FilledAssetId
	}
	return ""
}

func (x *Transaction) GetFunds() string {
	if x != nil {
		return x.Funds
	}
	return ""
}

func (x *Transaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transaction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Transaction) GetFeeValue() string {
	if x != nil {
		return x.FeeValue
	}
	return ""
}

func (x *Transaction) GetFollowId() string {
	if x != nil {
		return x.FollowId
	}
	return ""
}

func (x *Transaction) GetLiquidity() string {
	if x != nil {
		return x.Liquidity
	}
	return ""
}

func (x *Transaction) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserId       string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	State        Order_State            `protobuf:"varint,4,opt,name=state,proto3,enum=fox.fswap.service.Order_State" json:"state,omitempty"`
	PayAssetId   string                 `protobuf:"bytes,5,opt,name=pay_asset_id,json=payAssetId,proto3" json:"pay_asset_id,omitempty"`
	FillAssetId  string                 `protobuf:"bytes,6,opt,name=fill_asset_id,json=fillAssetId,proto3" json:"fill_asset_id,omitempty"`
	PayAmount    string                 `protobuf:"bytes,7,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount,omitempty"`
	FillAmount   string                 `protobuf:"bytes,8,opt,name=fill_amount,json=fillAmount,proto3" json:"fill_amount,omitempty"`
	MinAmount    string                 `protobuf:"bytes,9,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	Routes       string                 `protobuf:"bytes,10,opt,name=routes,proto3" json:"routes,omitempty"`
	RouteAssets  []string               `protobuf:"bytes,11,rep,name=route_assets,json=routeAssets,proto3" json:"route_assets,omitempty"`
	Transactions []*Transaction         `protobuf:"bytes,12,rep,name=transactions,proto3" json:"transactions,omitempty"`
	RoutePrice   string                 `protobuf:"bytes,13,opt,name=route_price,json=routePrice,proto3" json:"route_price,omitempty"`
	PriceImpact  string                 `protobuf:"bytes,14,opt,name=price_impact,json=priceImpact,proto3" json:"price_impact,omitempty"`
	FollowId     string                 `protobuf:"bytes,15,opt,name=follow_id,json=followId,proto3" json:"follow_id,omitempty"`
	Funds        string                 `protobuf:"bytes,16,opt,name=funds,proto3" json:"funds,omitempty"`
	Amount       string                 `protobuf:"bytes,17,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{5}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Order) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Order) GetState() Order_State {
	if x != nil {
		return x.State
	}
	return Order__
}

func (x *Order) GetPayAssetId() string {
	if x != nil {
		return x.PayAssetId
	}
	return ""
}

func (x *Order) GetFillAssetId() string {
	if x != nil {
		return x.FillAssetId
	}
	return ""
}

func (x *Order) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *Order) GetFillAmount() string {
	if x != nil {
		return x.FillAmount
	}
	return ""
}

func (x *Order) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *Order) GetRoutes() string {
	if x != nil {
		return x.Routes
	}
	return ""
}

func (x *Order) GetRouteAssets() []string {
	if x != nil {
		return x.RouteAssets
	}
	return nil
}

func (x *Order) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Order) GetRoutePrice() string {
	if x != nil {
		return x.RoutePrice
	}
	return ""
}

func (x *Order) GetPriceImpact() string {
	if x != nil {
		return x.PriceImpact
	}
	return ""
}

func (x *Order) GetFollowId() string {
	if x != nil {
		return x.FollowId
	}
	return ""
}

func (x *Order) GetFunds() string {
	if x != nil {
		return x.Funds
	}
	return ""
}

func (x *Order) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PassedAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=passed_at,json=passedAt,proto3" json:"passed_at,omitempty"`
	Creator   string                 `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	AssetId   string                 `protobuf:"bytes,5,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Amount    string                 `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Action    string                 `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
	Data      string                 `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Votes     []string               `protobuf:"bytes,9,rep,name=votes,proto3" json:"votes,omitempty"`
	Items     []*Proposal_Item       `protobuf:"bytes,10,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{6}
}

func (x *Proposal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Proposal) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Proposal) GetPassedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PassedAt
	}
	return nil
}

func (x *Proposal) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Proposal) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Proposal) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Proposal) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Proposal) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Proposal) GetVotes() []string {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *Proposal) GetItems() []*Proposal_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseAssetId  string   `protobuf:"bytes,2,opt,name=base_asset_id,json=baseAssetId,proto3" json:"base_asset_id,omitempty"`
	QuoteAssetId string   `protobuf:"bytes,3,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty"`
	Admins       []string `protobuf:"bytes,4,rep,name=admins,proto3" json:"admins,omitempty"`
	Name         string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{7}
}

func (x *Room) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Room) GetBaseAssetId() string {
	if x != nil {
		return x.BaseAssetId
	}
	return ""
}

func (x *Room) GetQuoteAssetId() string {
	if x != nil {
		return x.QuoteAssetId
	}
	return ""
}

func (x *Room) GetAdmins() []string {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *Room) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UniswapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UniswapReq) Reset() {
	*x = UniswapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq) ProtoMessage() {}

func (x *UniswapReq) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq.ProtoReflect.Descriptor instead.
func (*UniswapReq) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8}
}

type UniswapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UniswapResp) Reset() {
	*x = UniswapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapResp) ProtoMessage() {}

func (x *UniswapResp) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapResp.ProtoReflect.Descriptor instead.
func (*UniswapResp) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{9}
}

type Proposal_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Hint   string `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Proposal_Item) Reset() {
	*x = Proposal_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal_Item) ProtoMessage() {}

func (x *Proposal_Item) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal_Item.ProtoReflect.Descriptor instead.
func (*Proposal_Item) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Proposal_Item) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Proposal_Item) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Proposal_Item) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *Proposal_Item) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type UniswapReq_ListAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UniswapReq_ListAssets) Reset() {
	*x = UniswapReq_ListAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_ListAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_ListAssets) ProtoMessage() {}

func (x *UniswapReq_ListAssets) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_ListAssets.ProtoReflect.Descriptor instead.
func (*UniswapReq_ListAssets) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 0}
}

type UniswapReq_ReadAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *UniswapReq_ReadAsset) Reset() {
	*x = UniswapReq_ReadAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_ReadAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_ReadAsset) ProtoMessage() {}

func (x *UniswapReq_ReadAsset) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_ReadAsset.ProtoReflect.Descriptor instead.
func (*UniswapReq_ReadAsset) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 1}
}

func (x *UniswapReq_ReadAsset) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type UniswapReq_ReadPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAssetId  string `protobuf:"bytes,1,opt,name=base_asset_id,json=baseAssetId,proto3" json:"base_asset_id,omitempty"`
	QuoteAssetId string `protobuf:"bytes,2,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty"`
}

func (x *UniswapReq_ReadPair) Reset() {
	*x = UniswapReq_ReadPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_ReadPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_ReadPair) ProtoMessage() {}

func (x *UniswapReq_ReadPair) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_ReadPair.ProtoReflect.Descriptor instead.
func (*UniswapReq_ReadPair) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 2}
}

func (x *UniswapReq_ReadPair) GetBaseAssetId() string {
	if x != nil {
		return x.BaseAssetId
	}
	return ""
}

func (x *UniswapReq_ReadPair) GetQuoteAssetId() string {
	if x != nil {
		return x.QuoteAssetId
	}
	return ""
}

type UniswapReq_ListPairs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId string `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
}

func (x *UniswapReq_ListPairs) Reset() {
	*x = UniswapReq_ListPairs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_ListPairs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_ListPairs) ProtoMessage() {}

func (x *UniswapReq_ListPairs) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_ListPairs.ProtoReflect.Descriptor instead.
func (*UniswapReq_ListPairs) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 3}
}

func (x *UniswapReq_ListPairs) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

type UniswapReq_ReadDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowId string `protobuf:"bytes,1,opt,name=follow_id,json=followId,proto3" json:"follow_id,omitempty"`
}

func (x *UniswapReq_ReadDeposit) Reset() {
	*x = UniswapReq_ReadDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_ReadDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_ReadDeposit) ProtoMessage() {}

func (x *UniswapReq_ReadDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_ReadDeposit.ProtoReflect.Descriptor instead.
func (*UniswapReq_ReadDeposit) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 4}
}

func (x *UniswapReq_ReadDeposit) GetFollowId() string {
	if x != nil {
		return x.FollowId
	}
	return ""
}

type UniswapReq_ReadTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAssetId  string `protobuf:"bytes,1,opt,name=base_asset_id,json=baseAssetId,proto3" json:"base_asset_id,omitempty"`
	QuoteAssetId string `protobuf:"bytes,2,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty"`
	FollowId     string `protobuf:"bytes,3,opt,name=follow_id,json=followId,proto3" json:"follow_id,omitempty"`
}

func (x *UniswapReq_ReadTransaction) Reset() {
	*x = UniswapReq_ReadTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_ReadTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_ReadTransaction) ProtoMessage() {}

func (x *UniswapReq_ReadTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_ReadTransaction.ProtoReflect.Descriptor instead.
func (*UniswapReq_ReadTransaction) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 5}
}

func (x *UniswapReq_ReadTransaction) GetBaseAssetId() string {
	if x != nil {
		return x.BaseAssetId
	}
	return ""
}

func (x *UniswapReq_ReadTransaction) GetQuoteAssetId() string {
	if x != nil {
		return x.QuoteAssetId
	}
	return ""
}

func (x *UniswapReq_ReadTransaction) GetFollowId() string {
	if x != nil {
		return x.FollowId
	}
	return ""
}

type UniswapReq_ReadOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowId string `protobuf:"bytes,1,opt,name=follow_id,json=followId,proto3" json:"follow_id,omitempty"`
}

func (x *UniswapReq_ReadOrder) Reset() {
	*x = UniswapReq_ReadOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_ReadOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_ReadOrder) ProtoMessage() {}

func (x *UniswapReq_ReadOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_ReadOrder.ProtoReflect.Descriptor instead.
func (*UniswapReq_ReadOrder) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 6}
}

func (x *UniswapReq_ReadOrder) GetFollowId() string {
	if x != nil {
		return x.FollowId
	}
	return ""
}

type UniswapReq_PreOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayAssetId  string `protobuf:"bytes,1,opt,name=pay_asset_id,json=payAssetId,proto3" json:"pay_asset_id,omitempty"`
	FillAssetId string `protobuf:"bytes,2,opt,name=fill_asset_id,json=fillAssetId,proto3" json:"fill_asset_id,omitempty"`
	PayAmount   string `protobuf:"bytes,3,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount,omitempty"`
	FillAmount  string `protobuf:"bytes,4,opt,name=fill_amount,json=fillAmount,proto3" json:"fill_amount,omitempty"`
	MinAmount   string `protobuf:"bytes,5,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// deprecated
	Funds string `protobuf:"bytes,6,opt,name=funds,proto3" json:"funds,omitempty"`
	// deprecated
	Amount string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UniswapReq_PreOrder) Reset() {
	*x = UniswapReq_PreOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_PreOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_PreOrder) ProtoMessage() {}

func (x *UniswapReq_PreOrder) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_PreOrder.ProtoReflect.Descriptor instead.
func (*UniswapReq_PreOrder) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 7}
}

func (x *UniswapReq_PreOrder) GetPayAssetId() string {
	if x != nil {
		return x.PayAssetId
	}
	return ""
}

func (x *UniswapReq_PreOrder) GetFillAssetId() string {
	if x != nil {
		return x.FillAssetId
	}
	return ""
}

func (x *UniswapReq_PreOrder) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *UniswapReq_PreOrder) GetFillAmount() string {
	if x != nil {
		return x.FillAmount
	}
	return ""
}

func (x *UniswapReq_PreOrder) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *UniswapReq_PreOrder) GetFunds() string {
	if x != nil {
		return x.Funds
	}
	return ""
}

func (x *UniswapReq_PreOrder) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type UniswapReq_ListTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAssetId  string `protobuf:"bytes,1,opt,name=base_asset_id,json=baseAssetId,proto3" json:"base_asset_id,omitempty"`
	QuoteAssetId string `protobuf:"bytes,2,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty"`
	Type         string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Cursor       string `protobuf:"bytes,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit        int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	UserId       string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Order        string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UniswapReq_ListTransactions) Reset() {
	*x = UniswapReq_ListTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_ListTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_ListTransactions) ProtoMessage() {}

func (x *UniswapReq_ListTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_ListTransactions.ProtoReflect.Descriptor instead.
func (*UniswapReq_ListTransactions) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 8}
}

func (x *UniswapReq_ListTransactions) GetBaseAssetId() string {
	if x != nil {
		return x.BaseAssetId
	}
	return ""
}

func (x *UniswapReq_ListTransactions) GetQuoteAssetId() string {
	if x != nil {
		return x.QuoteAssetId
	}
	return ""
}

func (x *UniswapReq_ListTransactions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UniswapReq_ListTransactions) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *UniswapReq_ListTransactions) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UniswapReq_ListTransactions) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UniswapReq_ListTransactions) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type UniswapReq_UpdateRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseAssetId  string `protobuf:"bytes,2,opt,name=base_asset_id,json=baseAssetId,proto3" json:"base_asset_id,omitempty"`
	QuoteAssetId string `protobuf:"bytes,3,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty"`
}

func (x *UniswapReq_UpdateRoom) Reset() {
	*x = UniswapReq_UpdateRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_UpdateRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_UpdateRoom) ProtoMessage() {}

func (x *UniswapReq_UpdateRoom) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_UpdateRoom.ProtoReflect.Descriptor instead.
func (*UniswapReq_UpdateRoom) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 9}
}

func (x *UniswapReq_UpdateRoom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UniswapReq_UpdateRoom) GetBaseAssetId() string {
	if x != nil {
		return x.BaseAssetId
	}
	return ""
}

func (x *UniswapReq_UpdateRoom) GetQuoteAssetId() string {
	if x != nil {
		return x.QuoteAssetId
	}
	return ""
}

type UniswapReq_FindRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UniswapReq_FindRoom) Reset() {
	*x = UniswapReq_FindRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_FindRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_FindRoom) ProtoMessage() {}

func (x *UniswapReq_FindRoom) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_FindRoom.ProtoReflect.Descriptor instead.
func (*UniswapReq_FindRoom) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 10}
}

func (x *UniswapReq_FindRoom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UniswapReq_ListProposals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit  int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UniswapReq_ListProposals) Reset() {
	*x = UniswapReq_ListProposals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_ListProposals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_ListProposals) ProtoMessage() {}

func (x *UniswapReq_ListProposals) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_ListProposals.ProtoReflect.Descriptor instead.
func (*UniswapReq_ListProposals) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 11}
}

func (x *UniswapReq_ListProposals) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *UniswapReq_ListProposals) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UniswapReq_FindProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UniswapReq_FindProposal) Reset() {
	*x = UniswapReq_FindProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapReq_FindProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapReq_FindProposal) ProtoMessage() {}

func (x *UniswapReq_FindProposal) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapReq_FindProposal.ProtoReflect.Descriptor instead.
func (*UniswapReq_FindProposal) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{8, 12}
}

func (x *UniswapReq_FindProposal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UniswapResp_ListAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *UniswapResp_ListAssets) Reset() {
	*x = UniswapResp_ListAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapResp_ListAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapResp_ListAssets) ProtoMessage() {}

func (x *UniswapResp_ListAssets) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapResp_ListAssets.ProtoReflect.Descriptor instead.
func (*UniswapResp_ListAssets) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{9, 0}
}

func (x *UniswapResp_ListAssets) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type UniswapResp_ListPairs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs                []*Pair  `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	PairCount            int32    `protobuf:"varint,2,opt,name=pair_count,json=pairCount,proto3" json:"pair_count,omitempty"`
	TransactionCount_24H int32    `protobuf:"varint,3,opt,name=transaction_count_24h,json=transactionCount24h,proto3" json:"transaction_count_24h,omitempty"`
	LiquidityValue       string   `protobuf:"bytes,4,opt,name=liquidity_value,json=liquidityValue,proto3" json:"liquidity_value,omitempty"`
	Volume_24H           string   `protobuf:"bytes,5,opt,name=volume_24h,json=volume24h,proto3" json:"volume_24h,omitempty"`
	Fee_24H              string   `protobuf:"bytes,6,opt,name=fee_24h,json=fee24h,proto3" json:"fee_24h,omitempty"`
	Ts                   float64  `protobuf:"fixed64,7,opt,name=ts,proto3" json:"ts,omitempty"`
	Whitelists           []string `protobuf:"bytes,8,rep,name=whitelists,proto3" json:"whitelists,omitempty"`
}

func (x *UniswapResp_ListPairs) Reset() {
	*x = UniswapResp_ListPairs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapResp_ListPairs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapResp_ListPairs) ProtoMessage() {}

func (x *UniswapResp_ListPairs) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapResp_ListPairs.ProtoReflect.Descriptor instead.
func (*UniswapResp_ListPairs) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{9, 1}
}

func (x *UniswapResp_ListPairs) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *UniswapResp_ListPairs) GetPairCount() int32 {
	if x != nil {
		return x.PairCount
	}
	return 0
}

func (x *UniswapResp_ListPairs) GetTransactionCount_24H() int32 {
	if x != nil {
		return x.TransactionCount_24H
	}
	return 0
}

func (x *UniswapResp_ListPairs) GetLiquidityValue() string {
	if x != nil {
		return x.LiquidityValue
	}
	return ""
}

func (x *UniswapResp_ListPairs) GetVolume_24H() string {
	if x != nil {
		return x.Volume_24H
	}
	return ""
}

func (x *UniswapResp_ListPairs) GetFee_24H() string {
	if x != nil {
		return x.Fee_24H
	}
	return ""
}

func (x *UniswapResp_ListPairs) GetTs() float64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *UniswapResp_ListPairs) GetWhitelists() []string {
	if x != nil {
		return x.Whitelists
	}
	return nil
}

type UniswapResp_ListTransactionsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAddBaseAmount     string `protobuf:"bytes,1,opt,name=total_add_base_amount,json=totalAddBaseAmount,proto3" json:"total_add_base_amount,omitempty"`
	TotalAddQuoteAmount    string `protobuf:"bytes,2,opt,name=total_add_quote_amount,json=totalAddQuoteAmount,proto3" json:"total_add_quote_amount,omitempty"`
	TotalRemoveBaseAmount  string `protobuf:"bytes,3,opt,name=total_remove_base_amount,json=totalRemoveBaseAmount,proto3" json:"total_remove_base_amount,omitempty"`
	TotalRemoveQuoteAmount string `protobuf:"bytes,4,opt,name=total_remove_quote_amount,json=totalRemoveQuoteAmount,proto3" json:"total_remove_quote_amount,omitempty"`
}

func (x *UniswapResp_ListTransactionsSummary) Reset() {
	*x = UniswapResp_ListTransactionsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapResp_ListTransactionsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapResp_ListTransactionsSummary) ProtoMessage() {}

func (x *UniswapResp_ListTransactionsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapResp_ListTransactionsSummary.ProtoReflect.Descriptor instead.
func (*UniswapResp_ListTransactionsSummary) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{9, 2}
}

func (x *UniswapResp_ListTransactionsSummary) GetTotalAddBaseAmount() string {
	if x != nil {
		return x.TotalAddBaseAmount
	}
	return ""
}

func (x *UniswapResp_ListTransactionsSummary) GetTotalAddQuoteAmount() string {
	if x != nil {
		return x.TotalAddQuoteAmount
	}
	return ""
}

func (x *UniswapResp_ListTransactionsSummary) GetTotalRemoveBaseAmount() string {
	if x != nil {
		return x.TotalRemoveBaseAmount
	}
	return ""
}

func (x *UniswapResp_ListTransactionsSummary) GetTotalRemoveQuoteAmount() string {
	if x != nil {
		return x.TotalRemoveQuoteAmount
	}
	return ""
}

type UniswapResp_ListTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction                       `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Pagination   *Pagination                          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Summary      *UniswapResp_ListTransactionsSummary `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *UniswapResp_ListTransactions) Reset() {
	*x = UniswapResp_ListTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapResp_ListTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapResp_ListTransactions) ProtoMessage() {}

func (x *UniswapResp_ListTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapResp_ListTransactions.ProtoReflect.Descriptor instead.
func (*UniswapResp_ListTransactions) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{9, 3}
}

func (x *UniswapResp_ListTransactions) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *UniswapResp_ListTransactions) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *UniswapResp_ListTransactions) GetSummary() *UniswapResp_ListTransactionsSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type UniswapResp_ListProposals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals  []*Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *UniswapResp_ListProposals) Reset() {
	*x = UniswapResp_ListProposals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fswap_v1_fswap_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniswapResp_ListProposals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniswapResp_ListProposals) ProtoMessage() {}

func (x *UniswapResp_ListProposals) ProtoReflect() protoreflect.Message {
	mi := &file_fswap_v1_fswap_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniswapResp_ListProposals.ProtoReflect.Descriptor instead.
func (*UniswapResp_ListProposals) Descriptor() ([]byte, []int) {
	return file_fswap_v1_fswap_proto_rawDescGZIP(), []int{9, 4}
}

func (x *UniswapResp_ListProposals) GetProposals() []*Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *UniswapResp_ListProposals) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_fswap_v1_fswap_proto protoreflect.FileDescriptor

var file_fswap_v1_fswap_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73,
	0x4e, 0x65, 0x78, 0x74, 0x22, 0xaa, 0x02, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x8f, 0x06, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65,
	0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65,
	0x32, 0x34, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x34, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x77,
	0x61, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x32, 0x34, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x72, 0x5f,
	0x32, 0x34, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x52, 0x6f,
	0x72, 0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x72, 0x5f,
	0x37, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x52, 0x6f, 0x72,
	0x37, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x72, 0x5f, 0x33, 0x30,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x52, 0x6f, 0x72, 0x33,
	0x30, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6f, 0x78, 0x2e,
	0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61,
	0x67, 0x65, 0x22, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x03, 0x22, 0xa8, 0x05, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6f, 0x78,
	0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a,
	0x01, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x77, 0x61,
	0x70, 0x10, 0x03, 0x22, 0x89, 0x05, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x03, 0x22,
	0xb1, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x5a, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xa5, 0x08, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a,
	0x26, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x54, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x28, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x2a, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x1a, 0x78, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x1a, 0x28, 0x0a,
	0x09, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x1a, 0xdd, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xcd, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x66, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x3d, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x1e, 0x0a, 0x0c, 0x46, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdc, 0x07, 0x0a, 0x0b, 0x55,
	0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x1a, 0x3e, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x9e, 0x02, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73,
	0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x69,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x34, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x34, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32,
	0x34, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x32, 0x34, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0xf5, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0xe7, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66,
	0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x89, 0x01,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12,
	0x39, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x97, 0x09, 0x0a, 0x07, 0x55, 0x6e,
	0x69, 0x73, 0x77, 0x61, 0x70, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x27, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x6f,
	0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x61, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x29, 0x2e,
	0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x26, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x17, 0x2e, 0x66,
	0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x5e, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x12, 0x27, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x1a, 0x28, 0x2e, 0x66, 0x6f,
	0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x29, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x1a,
	0x1a, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x60, 0x0a, 0x0f, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x2e,
	0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x2f, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x27, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x4c, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26,
	0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x50, 0x72,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77,
	0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x4f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x28,
	0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x1a, 0x17, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x4b, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x26, 0x2e,
	0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x1a, 0x17, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x57,
	0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2a,
	0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x1a, 0x1b, 0x2e, 0x66, 0x6f, 0x78,
	0x2e, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69,
	0x73, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x1a, 0x2c, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x66, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x6f, 0x78, 0x2d, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x61, 0x6e, 0x64, 0x6f, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x3b,
	0x66, 0x73, 0x77, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fswap_v1_fswap_proto_rawDescOnce sync.Once
	file_fswap_v1_fswap_proto_rawDescData = file_fswap_v1_fswap_proto_rawDesc
)

func file_fswap_v1_fswap_proto_rawDescGZIP() []byte {
	file_fswap_v1_fswap_proto_rawDescOnce.Do(func() {
		file_fswap_v1_fswap_proto_rawDescData = protoimpl.X.CompressGZIP(file_fswap_v1_fswap_proto_rawDescData)
	})
	return file_fswap_v1_fswap_proto_rawDescData
}

var file_fswap_v1_fswap_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fswap_v1_fswap_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_fswap_v1_fswap_proto_goTypes = []interface{}{
	(Deposit_State)(0),                          // 0: fox.fswap.service.Deposit.State
	(Transaction_Type)(0),                       // 1: fox.fswap.service.Transaction.Type
	(Order_State)(0),                            // 2: fox.fswap.service.Order.State
	(*Pagination)(nil),                          // 3: fox.fswap.service.Pagination
	(*Asset)(nil),                               // 4: fox.fswap.service.Asset
	(*Pair)(nil),                                // 5: fox.fswap.service.Pair
	(*Deposit)(nil),                             // 6: fox.fswap.service.Deposit
	(*Transaction)(nil),                         // 7: fox.fswap.service.Transaction
	(*Order)(nil),                               // 8: fox.fswap.service.Order
	(*Proposal)(nil),                            // 9: fox.fswap.service.Proposal
	(*Room)(nil),                                // 10: fox.fswap.service.Room
	(*UniswapReq)(nil),                          // 11: fox.fswap.service.UniswapReq
	(*UniswapResp)(nil),                         // 12: fox.fswap.service.UniswapResp
	(*Proposal_Item)(nil),                       // 13: fox.fswap.service.Proposal.Item
	(*UniswapReq_ListAssets)(nil),               // 14: fox.fswap.service.UniswapReq.ListAssets
	(*UniswapReq_ReadAsset)(nil),                // 15: fox.fswap.service.UniswapReq.ReadAsset
	(*UniswapReq_ReadPair)(nil),                 // 16: fox.fswap.service.UniswapReq.ReadPair
	(*UniswapReq_ListPairs)(nil),                // 17: fox.fswap.service.UniswapReq.ListPairs
	(*UniswapReq_ReadDeposit)(nil),              // 18: fox.fswap.service.UniswapReq.ReadDeposit
	(*UniswapReq_ReadTransaction)(nil),          // 19: fox.fswap.service.UniswapReq.ReadTransaction
	(*UniswapReq_ReadOrder)(nil),                // 20: fox.fswap.service.UniswapReq.ReadOrder
	(*UniswapReq_PreOrder)(nil),                 // 21: fox.fswap.service.UniswapReq.PreOrder
	(*UniswapReq_ListTransactions)(nil),         // 22: fox.fswap.service.UniswapReq.ListTransactions
	(*UniswapReq_UpdateRoom)(nil),               // 23: fox.fswap.service.UniswapReq.UpdateRoom
	(*UniswapReq_FindRoom)(nil),                 // 24: fox.fswap.service.UniswapReq.FindRoom
	(*UniswapReq_ListProposals)(nil),            // 25: fox.fswap.service.UniswapReq.ListProposals
	(*UniswapReq_FindProposal)(nil),             // 26: fox.fswap.service.UniswapReq.FindProposal
	(*UniswapResp_ListAssets)(nil),              // 27: fox.fswap.service.UniswapResp.ListAssets
	(*UniswapResp_ListPairs)(nil),               // 28: fox.fswap.service.UniswapResp.ListPairs
	(*UniswapResp_ListTransactionsSummary)(nil), // 29: fox.fswap.service.UniswapResp.ListTransactionsSummary
	(*UniswapResp_ListTransactions)(nil),        // 30: fox.fswap.service.UniswapResp.ListTransactions
	(*UniswapResp_ListProposals)(nil),           // 31: fox.fswap.service.UniswapResp.ListProposals
	(*timestamppb.Timestamp)(nil),               // 32: google.protobuf.Timestamp
}
var file_fswap_v1_fswap_proto_depIdxs = []int32{
	4,  // 0: fox.fswap.service.Asset.chain:type_name -> fox.fswap.service.Asset
	32, // 1: fox.fswap.service.Deposit.created_at:type_name -> google.protobuf.Timestamp
	0,  // 2: fox.fswap.service.Deposit.state:type_name -> fox.fswap.service.Deposit.State
	32, // 3: fox.fswap.service.Transaction.created_at:type_name -> google.protobuf.Timestamp
	1,  // 4: fox.fswap.service.Transaction.type:type_name -> fox.fswap.service.Transaction.Type
	32, // 5: fox.fswap.service.Order.created_at:type_name -> google.protobuf.Timestamp
	2,  // 6: fox.fswap.service.Order.state:type_name -> fox.fswap.service.Order.State
	7,  // 7: fox.fswap.service.Order.transactions:type_name -> fox.fswap.service.Transaction
	32, // 8: fox.fswap.service.Proposal.created_at:type_name -> google.protobuf.Timestamp
	32, // 9: fox.fswap.service.Proposal.passed_at:type_name -> google.protobuf.Timestamp
	13, // 10: fox.fswap.service.Proposal.items:type_name -> fox.fswap.service.Proposal.Item
	4,  // 11: fox.fswap.service.UniswapResp.ListAssets.assets:type_name -> fox.fswap.service.Asset
	5,  // 12: fox.fswap.service.UniswapResp.ListPairs.pairs:type_name -> fox.fswap.service.Pair
	7,  // 13: fox.fswap.service.UniswapResp.ListTransactions.transactions:type_name -> fox.fswap.service.Transaction
	3,  // 14: fox.fswap.service.UniswapResp.ListTransactions.pagination:type_name -> fox.fswap.service.Pagination
	29, // 15: fox.fswap.service.UniswapResp.ListTransactions.summary:type_name -> fox.fswap.service.UniswapResp.ListTransactionsSummary
	9,  // 16: fox.fswap.service.UniswapResp.ListProposals.proposals:type_name -> fox.fswap.service.Proposal
	3,  // 17: fox.fswap.service.UniswapResp.ListProposals.pagination:type_name -> fox.fswap.service.Pagination
	15, // 18: fox.fswap.service.Uniswap.ReadAsset:input_type -> fox.fswap.service.UniswapReq.ReadAsset
	14, // 19: fox.fswap.service.Uniswap.ListAssets:input_type -> fox.fswap.service.UniswapReq.ListAssets
	16, // 20: fox.fswap.service.Uniswap.ReadPair:input_type -> fox.fswap.service.UniswapReq.ReadPair
	17, // 21: fox.fswap.service.Uniswap.ListPairs:input_type -> fox.fswap.service.UniswapReq.ListPairs
	18, // 22: fox.fswap.service.Uniswap.ReadDeposit:input_type -> fox.fswap.service.UniswapReq.ReadDeposit
	19, // 23: fox.fswap.service.Uniswap.ReadTransaction:input_type -> fox.fswap.service.UniswapReq.ReadTransaction
	22, // 24: fox.fswap.service.Uniswap.ListTransactions:input_type -> fox.fswap.service.UniswapReq.ListTransactions
	20, // 25: fox.fswap.service.Uniswap.ReadOrder:input_type -> fox.fswap.service.UniswapReq.ReadOrder
	21, // 26: fox.fswap.service.Uniswap.PreOrder:input_type -> fox.fswap.service.UniswapReq.PreOrder
	23, // 27: fox.fswap.service.Uniswap.UpdateRoom:input_type -> fox.fswap.service.UniswapReq.UpdateRoom
	24, // 28: fox.fswap.service.Uniswap.FindRoom:input_type -> fox.fswap.service.UniswapReq.FindRoom
	26, // 29: fox.fswap.service.Uniswap.FindProposal:input_type -> fox.fswap.service.UniswapReq.FindProposal
	25, // 30: fox.fswap.service.Uniswap.ListProposals:input_type -> fox.fswap.service.UniswapReq.ListProposals
	4,  // 31: fox.fswap.service.Uniswap.ReadAsset:output_type -> fox.fswap.service.Asset
	27, // 32: fox.fswap.service.Uniswap.ListAssets:output_type -> fox.fswap.service.UniswapResp.ListAssets
	5,  // 33: fox.fswap.service.Uniswap.ReadPair:output_type -> fox.fswap.service.Pair
	28, // 34: fox.fswap.service.Uniswap.ListPairs:output_type -> fox.fswap.service.UniswapResp.ListPairs
	6,  // 35: fox.fswap.service.Uniswap.ReadDeposit:output_type -> fox.fswap.service.Deposit
	7,  // 36: fox.fswap.service.Uniswap.ReadTransaction:output_type -> fox.fswap.service.Transaction
	30, // 37: fox.fswap.service.Uniswap.ListTransactions:output_type -> fox.fswap.service.UniswapResp.ListTransactions
	8,  // 38: fox.fswap.service.Uniswap.ReadOrder:output_type -> fox.fswap.service.Order
	8,  // 39: fox.fswap.service.Uniswap.PreOrder:output_type -> fox.fswap.service.Order
	10, // 40: fox.fswap.service.Uniswap.UpdateRoom:output_type -> fox.fswap.service.Room
	10, // 41: fox.fswap.service.Uniswap.FindRoom:output_type -> fox.fswap.service.Room
	9,  // 42: fox.fswap.service.Uniswap.FindProposal:output_type -> fox.fswap.service.Proposal
	31, // 43: fox.fswap.service.Uniswap.ListProposals:output_type -> fox.fswap.service.UniswapResp.ListProposals
	31, // [31:44] is the sub-list for method output_type
	18, // [18:31] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_fswap_v1_fswap_proto_init() }
func file_fswap_v1_fswap_proto_init() {
	if File_fswap_v1_fswap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fswap_v1_fswap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_ListAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_ReadAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_ReadPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_ListPairs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_ReadDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_ReadTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_ReadOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_PreOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_ListTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_UpdateRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_FindRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_ListProposals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapReq_FindProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapResp_ListAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapResp_ListPairs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapResp_ListTransactionsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapResp_ListTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fswap_v1_fswap_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniswapResp_ListProposals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fswap_v1_fswap_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fswap_v1_fswap_proto_goTypes,
		DependencyIndexes: file_fswap_v1_fswap_proto_depIdxs,
		EnumInfos:         file_fswap_v1_fswap_proto_enumTypes,
		MessageInfos:      file_fswap_v1_fswap_proto_msgTypes,
	}.Build()
	File_fswap_v1_fswap_proto = out.File
	file_fswap_v1_fswap_proto_rawDesc = nil
	file_fswap_v1_fswap_proto_goTypes = nil
	file_fswap_v1_fswap_proto_depIdxs = nil
}
