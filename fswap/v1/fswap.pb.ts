// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: fswap/v1/fswap.proto
/* eslint-disable */

import type { ByteSource, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";

import { Timestamp, TimestampJSON } from "../../google/protobuf/timestamp.pb";

//========================================//
//        Uniswap Protobuf Client         //
//========================================//

/**
 * ReadAsset 查询 asset 详情
 */
export async function ReadAsset(
  readAsset: UniswapReq.ReadAsset,
  config?: ClientConfiguration
): Promise<Asset> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/ReadAsset",
    UniswapReq.ReadAsset.encode(readAsset),
    config
  );
  return Asset.decode(response);
}

/**
 * ListAssets 返回 assets 列表
 */
export async function ListAssets(
  listAssets: UniswapReq.ListAssets,
  config?: ClientConfiguration
): Promise<UniswapResp.ListAssets> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/ListAssets",
    UniswapReq.ListAssets.encode(listAssets),
    config
  );
  return UniswapResp.ListAssets.decode(response);
}

/**
 * ReadPair 读取 pair 详情
 */
export async function ReadPair(
  readPair: UniswapReq.ReadPair,
  config?: ClientConfiguration
): Promise<Pair> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/ReadPair",
    UniswapReq.ReadPair.encode(readPair),
    config
  );
  return Pair.decode(response);
}

/**
 * ListPairs 读取 pair 列表
 */
export async function ListPairs(
  listPairs: UniswapReq.ListPairs,
  config?: ClientConfiguration
): Promise<UniswapResp.ListPairs> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/ListPairs",
    UniswapReq.ListPairs.encode(listPairs),
    config
  );
  return UniswapResp.ListPairs.decode(response);
}

/**
 * ReadDeposit 读取充值详情
 */
export async function ReadDeposit(
  readDeposit: UniswapReq.ReadDeposit,
  config?: ClientConfiguration
): Promise<Deposit> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/ReadDeposit",
    UniswapReq.ReadDeposit.encode(readDeposit),
    config
  );
  return Deposit.decode(response);
}

/**
 * ReadTransaction 读取 transaction 详情
 */
export async function ReadTransaction(
  readTransaction: UniswapReq.ReadTransaction,
  config?: ClientConfiguration
): Promise<Transaction> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/ReadTransaction",
    UniswapReq.ReadTransaction.encode(readTransaction),
    config
  );
  return Transaction.decode(response);
}

/**
 * ListTransactions 返回 transaction 列表
 */
export async function ListTransactions(
  listTransactions: UniswapReq.ListTransactions,
  config?: ClientConfiguration
): Promise<UniswapResp.ListTransactions> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/ListTransactions",
    UniswapReq.ListTransactions.encode(listTransactions),
    config
  );
  return UniswapResp.ListTransactions.decode(response);
}

/**
 * ReadOrder 读取 order 详情
 */
export async function ReadOrder(
  readOrder: UniswapReq.ReadOrder,
  config?: ClientConfiguration
): Promise<Order> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/ReadOrder",
    UniswapReq.ReadOrder.encode(readOrder),
    config
  );
  return Order.decode(response);
}

/**
 * PreOrder 预下单
 */
export async function PreOrder(
  preOrder: UniswapReq.PreOrder,
  config?: ClientConfiguration
): Promise<Order> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/PreOrder",
    UniswapReq.PreOrder.encode(preOrder),
    config
  );
  return Order.decode(response);
}

/**
 * UpdateRoom 设置小群默认交易对
 */
export async function UpdateRoom(
  updateRoom: UniswapReq.UpdateRoom,
  config?: ClientConfiguration
): Promise<Room> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/UpdateRoom",
    UniswapReq.UpdateRoom.encode(updateRoom),
    config
  );
  return Room.decode(response);
}

/**
 * FindRoom 查看小群默认交易对
 */
export async function FindRoom(
  findRoom: UniswapReq.FindRoom,
  config?: ClientConfiguration
): Promise<Room> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/FindRoom",
    UniswapReq.FindRoom.encode(findRoom),
    config
  );
  return Room.decode(response);
}

/**
 * proposals
 */
export async function FindProposal(
  findProposal: UniswapReq.FindProposal,
  config?: ClientConfiguration
): Promise<Proposal> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/FindProposal",
    UniswapReq.FindProposal.encode(findProposal),
    config
  );
  return Proposal.decode(response);
}

export async function ListProposals(
  listProposals: UniswapReq.ListProposals,
  config?: ClientConfiguration
): Promise<UniswapResp.ListProposals> {
  const response = await PBrequest(
    "/fox.fswap.service.Uniswap/ListProposals",
    UniswapReq.ListProposals.encode(listProposals),
    config
  );
  return UniswapResp.ListProposals.decode(response);
}

//========================================//
//          Uniswap JSON Client           //
//========================================//

/**
 * ReadAsset 查询 asset 详情
 */
export async function ReadAssetJSON(
  readAsset: UniswapReq.ReadAsset,
  config?: ClientConfiguration
): Promise<Asset> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/ReadAsset",
    UniswapReqJSON.ReadAsset.encode(readAsset),
    config
  );
  return AssetJSON.decode(response);
}

/**
 * ListAssets 返回 assets 列表
 */
export async function ListAssetsJSON(
  listAssets: UniswapReq.ListAssets,
  config?: ClientConfiguration
): Promise<UniswapResp.ListAssets> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/ListAssets",
    UniswapReqJSON.ListAssets.encode(listAssets),
    config
  );
  return UniswapRespJSON.ListAssets.decode(response);
}

/**
 * ReadPair 读取 pair 详情
 */
export async function ReadPairJSON(
  readPair: UniswapReq.ReadPair,
  config?: ClientConfiguration
): Promise<Pair> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/ReadPair",
    UniswapReqJSON.ReadPair.encode(readPair),
    config
  );
  return PairJSON.decode(response);
}

/**
 * ListPairs 读取 pair 列表
 */
export async function ListPairsJSON(
  listPairs: UniswapReq.ListPairs,
  config?: ClientConfiguration
): Promise<UniswapResp.ListPairs> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/ListPairs",
    UniswapReqJSON.ListPairs.encode(listPairs),
    config
  );
  return UniswapRespJSON.ListPairs.decode(response);
}

/**
 * ReadDeposit 读取充值详情
 */
export async function ReadDepositJSON(
  readDeposit: UniswapReq.ReadDeposit,
  config?: ClientConfiguration
): Promise<Deposit> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/ReadDeposit",
    UniswapReqJSON.ReadDeposit.encode(readDeposit),
    config
  );
  return DepositJSON.decode(response);
}

/**
 * ReadTransaction 读取 transaction 详情
 */
export async function ReadTransactionJSON(
  readTransaction: UniswapReq.ReadTransaction,
  config?: ClientConfiguration
): Promise<Transaction> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/ReadTransaction",
    UniswapReqJSON.ReadTransaction.encode(readTransaction),
    config
  );
  return TransactionJSON.decode(response);
}

/**
 * ListTransactions 返回 transaction 列表
 */
export async function ListTransactionsJSON(
  listTransactions: UniswapReq.ListTransactions,
  config?: ClientConfiguration
): Promise<UniswapResp.ListTransactions> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/ListTransactions",
    UniswapReqJSON.ListTransactions.encode(listTransactions),
    config
  );
  return UniswapRespJSON.ListTransactions.decode(response);
}

/**
 * ReadOrder 读取 order 详情
 */
export async function ReadOrderJSON(
  readOrder: UniswapReq.ReadOrder,
  config?: ClientConfiguration
): Promise<Order> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/ReadOrder",
    UniswapReqJSON.ReadOrder.encode(readOrder),
    config
  );
  return OrderJSON.decode(response);
}

/**
 * PreOrder 预下单
 */
export async function PreOrderJSON(
  preOrder: UniswapReq.PreOrder,
  config?: ClientConfiguration
): Promise<Order> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/PreOrder",
    UniswapReqJSON.PreOrder.encode(preOrder),
    config
  );
  return OrderJSON.decode(response);
}

/**
 * UpdateRoom 设置小群默认交易对
 */
export async function UpdateRoomJSON(
  updateRoom: UniswapReq.UpdateRoom,
  config?: ClientConfiguration
): Promise<Room> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/UpdateRoom",
    UniswapReqJSON.UpdateRoom.encode(updateRoom),
    config
  );
  return RoomJSON.decode(response);
}

/**
 * FindRoom 查看小群默认交易对
 */
export async function FindRoomJSON(
  findRoom: UniswapReq.FindRoom,
  config?: ClientConfiguration
): Promise<Room> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/FindRoom",
    UniswapReqJSON.FindRoom.encode(findRoom),
    config
  );
  return RoomJSON.decode(response);
}

/**
 * proposals
 */
export async function FindProposalJSON(
  findProposal: UniswapReq.FindProposal,
  config?: ClientConfiguration
): Promise<Proposal> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/FindProposal",
    UniswapReqJSON.FindProposal.encode(findProposal),
    config
  );
  return ProposalJSON.decode(response);
}

export async function ListProposalsJSON(
  listProposals: UniswapReq.ListProposals,
  config?: ClientConfiguration
): Promise<UniswapResp.ListProposals> {
  const response = await JSONrequest(
    "/fox.fswap.service.Uniswap/ListProposals",
    UniswapReqJSON.ListProposals.encode(listProposals),
    config
  );
  return UniswapRespJSON.ListProposals.decode(response);
}

//========================================//
//                Uniswap                 //
//========================================//

export interface Uniswap<Context = unknown> {
  /**
   * ReadAsset 查询 asset 详情
   */
  ReadAsset: (
    readAsset: UniswapReq.ReadAsset,
    context: Context
  ) => Promise<Asset> | Asset;
  /**
   * ListAssets 返回 assets 列表
   */
  ListAssets: (
    listAssets: UniswapReq.ListAssets,
    context: Context
  ) => Promise<UniswapResp.ListAssets> | UniswapResp.ListAssets;
  /**
   * ReadPair 读取 pair 详情
   */
  ReadPair: (
    readPair: UniswapReq.ReadPair,
    context: Context
  ) => Promise<Pair> | Pair;
  /**
   * ListPairs 读取 pair 列表
   */
  ListPairs: (
    listPairs: UniswapReq.ListPairs,
    context: Context
  ) => Promise<UniswapResp.ListPairs> | UniswapResp.ListPairs;
  /**
   * ReadDeposit 读取充值详情
   */
  ReadDeposit: (
    readDeposit: UniswapReq.ReadDeposit,
    context: Context
  ) => Promise<Deposit> | Deposit;
  /**
   * ReadTransaction 读取 transaction 详情
   */
  ReadTransaction: (
    readTransaction: UniswapReq.ReadTransaction,
    context: Context
  ) => Promise<Transaction> | Transaction;
  /**
   * ListTransactions 返回 transaction 列表
   */
  ListTransactions: (
    listTransactions: UniswapReq.ListTransactions,
    context: Context
  ) => Promise<UniswapResp.ListTransactions> | UniswapResp.ListTransactions;
  /**
   * ReadOrder 读取 order 详情
   */
  ReadOrder: (
    readOrder: UniswapReq.ReadOrder,
    context: Context
  ) => Promise<Order> | Order;
  /**
   * PreOrder 预下单
   */
  PreOrder: (
    preOrder: UniswapReq.PreOrder,
    context: Context
  ) => Promise<Order> | Order;
  /**
   * UpdateRoom 设置小群默认交易对
   */
  UpdateRoom: (
    updateRoom: UniswapReq.UpdateRoom,
    context: Context
  ) => Promise<Room> | Room;
  /**
   * FindRoom 查看小群默认交易对
   */
  FindRoom: (
    findRoom: UniswapReq.FindRoom,
    context: Context
  ) => Promise<Room> | Room;
  /**
   * proposals
   */
  FindProposal: (
    findProposal: UniswapReq.FindProposal,
    context: Context
  ) => Promise<Proposal> | Proposal;
  ListProposals: (
    listProposals: UniswapReq.ListProposals,
    context: Context
  ) => Promise<UniswapResp.ListProposals> | UniswapResp.ListProposals;
}

export function createUniswap<Context>(service: Uniswap<Context>) {
  return {
    name: "fox.fswap.service.Uniswap",
    methods: {
      ReadAsset: {
        name: "ReadAsset",
        handler: service.ReadAsset,
        input: {
          protobuf: UniswapReq.ReadAsset,
          json: UniswapReqJSON.ReadAsset,
        },
        output: { protobuf: Asset, json: AssetJSON },
      },
      ListAssets: {
        name: "ListAssets",
        handler: service.ListAssets,
        input: {
          protobuf: UniswapReq.ListAssets,
          json: UniswapReqJSON.ListAssets,
        },
        output: {
          protobuf: UniswapResp.ListAssets,
          json: UniswapRespJSON.ListAssets,
        },
      },
      ReadPair: {
        name: "ReadPair",
        handler: service.ReadPair,
        input: { protobuf: UniswapReq.ReadPair, json: UniswapReqJSON.ReadPair },
        output: { protobuf: Pair, json: PairJSON },
      },
      ListPairs: {
        name: "ListPairs",
        handler: service.ListPairs,
        input: {
          protobuf: UniswapReq.ListPairs,
          json: UniswapReqJSON.ListPairs,
        },
        output: {
          protobuf: UniswapResp.ListPairs,
          json: UniswapRespJSON.ListPairs,
        },
      },
      ReadDeposit: {
        name: "ReadDeposit",
        handler: service.ReadDeposit,
        input: {
          protobuf: UniswapReq.ReadDeposit,
          json: UniswapReqJSON.ReadDeposit,
        },
        output: { protobuf: Deposit, json: DepositJSON },
      },
      ReadTransaction: {
        name: "ReadTransaction",
        handler: service.ReadTransaction,
        input: {
          protobuf: UniswapReq.ReadTransaction,
          json: UniswapReqJSON.ReadTransaction,
        },
        output: { protobuf: Transaction, json: TransactionJSON },
      },
      ListTransactions: {
        name: "ListTransactions",
        handler: service.ListTransactions,
        input: {
          protobuf: UniswapReq.ListTransactions,
          json: UniswapReqJSON.ListTransactions,
        },
        output: {
          protobuf: UniswapResp.ListTransactions,
          json: UniswapRespJSON.ListTransactions,
        },
      },
      ReadOrder: {
        name: "ReadOrder",
        handler: service.ReadOrder,
        input: {
          protobuf: UniswapReq.ReadOrder,
          json: UniswapReqJSON.ReadOrder,
        },
        output: { protobuf: Order, json: OrderJSON },
      },
      PreOrder: {
        name: "PreOrder",
        handler: service.PreOrder,
        input: { protobuf: UniswapReq.PreOrder, json: UniswapReqJSON.PreOrder },
        output: { protobuf: Order, json: OrderJSON },
      },
      UpdateRoom: {
        name: "UpdateRoom",
        handler: service.UpdateRoom,
        input: {
          protobuf: UniswapReq.UpdateRoom,
          json: UniswapReqJSON.UpdateRoom,
        },
        output: { protobuf: Room, json: RoomJSON },
      },
      FindRoom: {
        name: "FindRoom",
        handler: service.FindRoom,
        input: { protobuf: UniswapReq.FindRoom, json: UniswapReqJSON.FindRoom },
        output: { protobuf: Room, json: RoomJSON },
      },
      FindProposal: {
        name: "FindProposal",
        handler: service.FindProposal,
        input: {
          protobuf: UniswapReq.FindProposal,
          json: UniswapReqJSON.FindProposal,
        },
        output: { protobuf: Proposal, json: ProposalJSON },
      },
      ListProposals: {
        name: "ListProposals",
        handler: service.ListProposals,
        input: {
          protobuf: UniswapReq.ListProposals,
          json: UniswapReqJSON.ListProposals,
        },
        output: {
          protobuf: UniswapResp.ListProposals,
          json: UniswapRespJSON.ListProposals,
        },
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export interface Pagination {
  nextCursor: string;
  hasNext: boolean;
}

export interface Asset {
  id: string;
  name: string;
  symbol: string;
  logo: string;
  chainId: string;
  chain: Asset;
  price: string;
  displaySymbol: string;
  extra: string;
  tag: string;
  priceChange: string;
}

export interface Pair {
  baseAssetId: string;
  quoteAssetId: string;
  baseAmount: string;
  quoteAmount: string;
  share: string;
  liquidity: string;
  liquidityAssetId: string;
  routeId: number;
  feePercent: string;
  maxLiquidity: string;
  baseValue: string;
  quoteValue: string;
  volume24h: string;
  fee24h: string;
  transactionCount24h: number;
  swapMethod: string;
  version: number;
  baseVolume24h: string;
  quoteVolume24h: string;
  netRor24h: string;
  netRor7d: string;
  netRor30d: string;
  profitRate: string;
}

export interface Deposit {
  id: string;
  createdAt: Timestamp;
  state: Deposit.State;
  userId: string;
  followId: string;
  baseAssetId: string;
  baseAmount: string;
  quoteAssetId: string;
  quoteAmount: string;
  slippage: string;
}

export declare namespace Deposit {
  export type State = "_" | "Pending" | "Cancelled" | "Done";
}

export interface Transaction {
  id: string;
  createdAt: Timestamp;
  userId: string;
  type: Transaction.Type;
  baseAssetId: string;
  quoteAssetId: string;
  baseAmount: string;
  quoteAmount: string;
  feeAssetId: string;
  feeAmount: string;
  payAssetId: string;
  filledAssetId: string;
  funds: string;
  amount: string;
  value: string;
  feeValue: string;
  followId: string;
  liquidity: string;
}

export declare namespace Transaction {
  export type Type = "_" | "Add" | "Remove" | "Swap";
}

export interface Order {
  id: string;
  createdAt: Timestamp;
  userId: string;
  state: Order.State;
  payAssetId: string;
  fillAssetId: string;
  payAmount: string;
  fillAmount: string;
  minAmount: string;
  routes: string;
  routeAssets: string[];
  transactions: Transaction[];
  routePrice: string;
  priceImpact: string;
  followId: string;
  funds: string;
  amount: string;
}

export declare namespace Order {
  export type State = "_" | "Trading" | "Rejected" | "Done";
}

export interface Proposal {
  id: string;
  createdAt: Timestamp;
  passedAt: Timestamp;
  creator: string;
  assetId: string;
  amount: string;
  action: string;
  data: string;
  votes: string[];
  items: Proposal.Item[];
}

export declare namespace Proposal {
  export interface Item {
    key: string;
    value: string;
    hint: string;
    action: string;
  }
}

export interface Room {
  id: string;
  baseAssetId: string;
  quoteAssetId: string;
  admins: string[];
  name: string;
}

export interface UniswapReq {}

export declare namespace UniswapReq {
  export interface ListAssets {}

  export interface ReadAsset {
    assetId: string;
  }

  export interface ReadPair {
    baseAssetId: string;
    quoteAssetId: string;
  }

  export interface ListPairs {
    brokerId: string;
  }

  export interface ReadDeposit {
    followId: string;
  }

  export interface ReadTransaction {
    baseAssetId: string;
    quoteAssetId: string;
    followId: string;
  }

  export interface ReadOrder {
    followId: string;
  }

  export interface PreOrder {
    payAssetId: string;
    fillAssetId: string;
    payAmount: string;
    fillAmount: string;
    minAmount: string;
    /**
     * deprecated
     */
    funds: string;
    /**
     * deprecated
     */
    amount: string;
  }

  export interface ListTransactions {
    baseAssetId: string;
    quoteAssetId: string;
    type: string;
    cursor: string;
    limit: bigint;
    userId: string;
    order: string;
  }

  export interface UpdateRoom {
    id: string;
    baseAssetId: string;
    quoteAssetId: string;
  }

  export interface FindRoom {
    id: string;
  }

  export interface ListProposals {
    cursor: string;
    limit: bigint;
  }

  export interface FindProposal {
    id: string;
  }
}

export interface UniswapResp {}

export declare namespace UniswapResp {
  export interface ListAssets {
    assets: Asset[];
  }

  export interface ListPairs {
    pairs: Pair[];
    pairCount: number;
    transactionCount24h: number;
    liquidityValue: string;
    volume24h: string;
    fee24h: string;
    ts: number;
    whitelists: string[];
  }

  export interface ListTransactionsSummary {
    totalAddBaseAmount: string;
    totalAddQuoteAmount: string;
    totalRemoveBaseAmount: string;
    totalRemoveQuoteAmount: string;
  }

  export interface ListTransactions {
    transactions: Transaction[];
    pagination: Pagination;
    summary: UniswapResp.ListTransactionsSummary;
  }

  export interface ListProposals {
    proposals: Proposal[];
    pagination: Pagination;
  }
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Pagination = {
  /**
   * Serializes Pagination to protobuf.
   */
  encode: function (msg: Partial<Pagination>): Uint8Array {
    return Pagination._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Pagination from protobuf.
   */
  decode: function (bytes: ByteSource): Pagination {
    return Pagination._readMessage(
      Pagination.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Pagination with all fields set to their default value.
   */
  initialize: function (): Pagination {
    return {
      nextCursor: "",
      hasNext: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Pagination>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.nextCursor) {
      writer.writeString(1, msg.nextCursor);
    }
    if (msg.hasNext) {
      writer.writeBool(2, msg.hasNext);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pagination, reader: BinaryReader): Pagination {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.nextCursor = reader.readString();
          break;
        }
        case 2: {
          msg.hasNext = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Asset = {
  /**
   * Serializes Asset to protobuf.
   */
  encode: function (msg: Partial<Asset>): Uint8Array {
    return Asset._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Asset from protobuf.
   */
  decode: function (bytes: ByteSource): Asset {
    return Asset._readMessage(Asset.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (): Asset {
    return {
      id: "",
      name: "",
      symbol: "",
      logo: "",
      chainId: "",
      chain: Asset.initialize(),
      price: "",
      displaySymbol: "",
      extra: "",
      tag: "",
      priceChange: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Asset>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    if (msg.symbol) {
      writer.writeString(3, msg.symbol);
    }
    if (msg.logo) {
      writer.writeString(4, msg.logo);
    }
    if (msg.chainId) {
      writer.writeString(5, msg.chainId);
    }
    if (msg.chain) {
      writer.writeMessage(6, msg.chain, Asset._writeMessage);
    }
    if (msg.price) {
      writer.writeString(7, msg.price);
    }
    if (msg.displaySymbol) {
      writer.writeString(8, msg.displaySymbol);
    }
    if (msg.extra) {
      writer.writeString(9, msg.extra);
    }
    if (msg.tag) {
      writer.writeString(10, msg.tag);
    }
    if (msg.priceChange) {
      writer.writeString(11, msg.priceChange);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, reader: BinaryReader): Asset {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.symbol = reader.readString();
          break;
        }
        case 4: {
          msg.logo = reader.readString();
          break;
        }
        case 5: {
          msg.chainId = reader.readString();
          break;
        }
        case 6: {
          reader.readMessage(msg.chain, Asset._readMessage);
          break;
        }
        case 7: {
          msg.price = reader.readString();
          break;
        }
        case 8: {
          msg.displaySymbol = reader.readString();
          break;
        }
        case 9: {
          msg.extra = reader.readString();
          break;
        }
        case 10: {
          msg.tag = reader.readString();
          break;
        }
        case 11: {
          msg.priceChange = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Pair = {
  /**
   * Serializes Pair to protobuf.
   */
  encode: function (msg: Partial<Pair>): Uint8Array {
    return Pair._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Pair from protobuf.
   */
  decode: function (bytes: ByteSource): Pair {
    return Pair._readMessage(Pair.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Pair with all fields set to their default value.
   */
  initialize: function (): Pair {
    return {
      baseAssetId: "",
      quoteAssetId: "",
      baseAmount: "",
      quoteAmount: "",
      share: "",
      liquidity: "",
      liquidityAssetId: "",
      routeId: 0,
      feePercent: "",
      maxLiquidity: "",
      baseValue: "",
      quoteValue: "",
      volume24h: "",
      fee24h: "",
      transactionCount24h: 0,
      swapMethod: "",
      version: 0,
      baseVolume24h: "",
      quoteVolume24h: "",
      netRor24h: "",
      netRor7d: "",
      netRor30d: "",
      profitRate: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Pair>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.baseAssetId) {
      writer.writeString(1, msg.baseAssetId);
    }
    if (msg.quoteAssetId) {
      writer.writeString(2, msg.quoteAssetId);
    }
    if (msg.baseAmount) {
      writer.writeString(3, msg.baseAmount);
    }
    if (msg.quoteAmount) {
      writer.writeString(4, msg.quoteAmount);
    }
    if (msg.share) {
      writer.writeString(5, msg.share);
    }
    if (msg.liquidity) {
      writer.writeString(6, msg.liquidity);
    }
    if (msg.liquidityAssetId) {
      writer.writeString(7, msg.liquidityAssetId);
    }
    if (msg.routeId) {
      writer.writeInt32(8, msg.routeId);
    }
    if (msg.feePercent) {
      writer.writeString(9, msg.feePercent);
    }
    if (msg.maxLiquidity) {
      writer.writeString(10, msg.maxLiquidity);
    }
    if (msg.baseValue) {
      writer.writeString(11, msg.baseValue);
    }
    if (msg.quoteValue) {
      writer.writeString(12, msg.quoteValue);
    }
    if (msg.volume24h) {
      writer.writeString(13, msg.volume24h);
    }
    if (msg.fee24h) {
      writer.writeString(14, msg.fee24h);
    }
    if (msg.transactionCount24h) {
      writer.writeInt32(15, msg.transactionCount24h);
    }
    if (msg.swapMethod) {
      writer.writeString(16, msg.swapMethod);
    }
    if (msg.version) {
      writer.writeInt32(17, msg.version);
    }
    if (msg.baseVolume24h) {
      writer.writeString(18, msg.baseVolume24h);
    }
    if (msg.quoteVolume24h) {
      writer.writeString(19, msg.quoteVolume24h);
    }
    if (msg.netRor24h) {
      writer.writeString(20, msg.netRor24h);
    }
    if (msg.netRor7d) {
      writer.writeString(21, msg.netRor7d);
    }
    if (msg.netRor30d) {
      writer.writeString(22, msg.netRor30d);
    }
    if (msg.profitRate) {
      writer.writeString(23, msg.profitRate);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pair, reader: BinaryReader): Pair {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 2: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 3: {
          msg.baseAmount = reader.readString();
          break;
        }
        case 4: {
          msg.quoteAmount = reader.readString();
          break;
        }
        case 5: {
          msg.share = reader.readString();
          break;
        }
        case 6: {
          msg.liquidity = reader.readString();
          break;
        }
        case 7: {
          msg.liquidityAssetId = reader.readString();
          break;
        }
        case 8: {
          msg.routeId = reader.readInt32();
          break;
        }
        case 9: {
          msg.feePercent = reader.readString();
          break;
        }
        case 10: {
          msg.maxLiquidity = reader.readString();
          break;
        }
        case 11: {
          msg.baseValue = reader.readString();
          break;
        }
        case 12: {
          msg.quoteValue = reader.readString();
          break;
        }
        case 13: {
          msg.volume24h = reader.readString();
          break;
        }
        case 14: {
          msg.fee24h = reader.readString();
          break;
        }
        case 15: {
          msg.transactionCount24h = reader.readInt32();
          break;
        }
        case 16: {
          msg.swapMethod = reader.readString();
          break;
        }
        case 17: {
          msg.version = reader.readInt32();
          break;
        }
        case 18: {
          msg.baseVolume24h = reader.readString();
          break;
        }
        case 19: {
          msg.quoteVolume24h = reader.readString();
          break;
        }
        case 20: {
          msg.netRor24h = reader.readString();
          break;
        }
        case 21: {
          msg.netRor7d = reader.readString();
          break;
        }
        case 22: {
          msg.netRor30d = reader.readString();
          break;
        }
        case 23: {
          msg.profitRate = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Deposit = {
  /**
   * Serializes Deposit to protobuf.
   */
  encode: function (msg: Partial<Deposit>): Uint8Array {
    return Deposit._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Deposit from protobuf.
   */
  decode: function (bytes: ByteSource): Deposit {
    return Deposit._readMessage(Deposit.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Deposit with all fields set to their default value.
   */
  initialize: function (): Deposit {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      state: Deposit.State._fromInt(0),
      userId: "",
      followId: "",
      baseAssetId: "",
      baseAmount: "",
      quoteAssetId: "",
      quoteAmount: "",
      slippage: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Deposit>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(2, msg.createdAt, Timestamp._writeMessage);
    }
    if (msg.state && Deposit.State._toInt(msg.state)) {
      writer.writeEnum(3, Deposit.State._toInt(msg.state));
    }
    if (msg.userId) {
      writer.writeString(4, msg.userId);
    }
    if (msg.followId) {
      writer.writeString(5, msg.followId);
    }
    if (msg.baseAssetId) {
      writer.writeString(6, msg.baseAssetId);
    }
    if (msg.baseAmount) {
      writer.writeString(7, msg.baseAmount);
    }
    if (msg.quoteAssetId) {
      writer.writeString(8, msg.quoteAssetId);
    }
    if (msg.quoteAmount) {
      writer.writeString(9, msg.quoteAmount);
    }
    if (msg.slippage) {
      writer.writeString(10, msg.slippage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Deposit, reader: BinaryReader): Deposit {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.state = Deposit.State._fromInt(reader.readEnum());
          break;
        }
        case 4: {
          msg.userId = reader.readString();
          break;
        }
        case 5: {
          msg.followId = reader.readString();
          break;
        }
        case 6: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 7: {
          msg.baseAmount = reader.readString();
          break;
        }
        case 8: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 9: {
          msg.quoteAmount = reader.readString();
          break;
        }
        case 10: {
          msg.slippage = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  State: {
    _: "_",
    Pending: "Pending",
    Cancelled: "Cancelled",
    Done: "Done",
    /**
     * @private
     */
    _fromInt: function (i: number): Deposit.State {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Pending";
        }
        case 2: {
          return "Cancelled";
        }
        case 3: {
          return "Done";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Deposit.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Deposit.State): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Pending": {
          return 1;
        }
        case "Cancelled": {
          return 2;
        }
        case "Done": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const Transaction = {
  /**
   * Serializes Transaction to protobuf.
   */
  encode: function (msg: Partial<Transaction>): Uint8Array {
    return Transaction._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Transaction from protobuf.
   */
  decode: function (bytes: ByteSource): Transaction {
    return Transaction._readMessage(
      Transaction.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Transaction with all fields set to their default value.
   */
  initialize: function (): Transaction {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      userId: "",
      type: Transaction.Type._fromInt(0),
      baseAssetId: "",
      quoteAssetId: "",
      baseAmount: "",
      quoteAmount: "",
      feeAssetId: "",
      feeAmount: "",
      payAssetId: "",
      filledAssetId: "",
      funds: "",
      amount: "",
      value: "",
      feeValue: "",
      followId: "",
      liquidity: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Transaction>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(2, msg.createdAt, Timestamp._writeMessage);
    }
    if (msg.userId) {
      writer.writeString(3, msg.userId);
    }
    if (msg.type && Transaction.Type._toInt(msg.type)) {
      writer.writeEnum(4, Transaction.Type._toInt(msg.type));
    }
    if (msg.baseAssetId) {
      writer.writeString(5, msg.baseAssetId);
    }
    if (msg.quoteAssetId) {
      writer.writeString(6, msg.quoteAssetId);
    }
    if (msg.baseAmount) {
      writer.writeString(7, msg.baseAmount);
    }
    if (msg.quoteAmount) {
      writer.writeString(8, msg.quoteAmount);
    }
    if (msg.feeAssetId) {
      writer.writeString(9, msg.feeAssetId);
    }
    if (msg.feeAmount) {
      writer.writeString(10, msg.feeAmount);
    }
    if (msg.payAssetId) {
      writer.writeString(11, msg.payAssetId);
    }
    if (msg.filledAssetId) {
      writer.writeString(12, msg.filledAssetId);
    }
    if (msg.funds) {
      writer.writeString(13, msg.funds);
    }
    if (msg.amount) {
      writer.writeString(14, msg.amount);
    }
    if (msg.value) {
      writer.writeString(15, msg.value);
    }
    if (msg.feeValue) {
      writer.writeString(16, msg.feeValue);
    }
    if (msg.followId) {
      writer.writeString(17, msg.followId);
    }
    if (msg.liquidity) {
      writer.writeString(18, msg.liquidity);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Transaction, reader: BinaryReader): Transaction {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.userId = reader.readString();
          break;
        }
        case 4: {
          msg.type = Transaction.Type._fromInt(reader.readEnum());
          break;
        }
        case 5: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 6: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 7: {
          msg.baseAmount = reader.readString();
          break;
        }
        case 8: {
          msg.quoteAmount = reader.readString();
          break;
        }
        case 9: {
          msg.feeAssetId = reader.readString();
          break;
        }
        case 10: {
          msg.feeAmount = reader.readString();
          break;
        }
        case 11: {
          msg.payAssetId = reader.readString();
          break;
        }
        case 12: {
          msg.filledAssetId = reader.readString();
          break;
        }
        case 13: {
          msg.funds = reader.readString();
          break;
        }
        case 14: {
          msg.amount = reader.readString();
          break;
        }
        case 15: {
          msg.value = reader.readString();
          break;
        }
        case 16: {
          msg.feeValue = reader.readString();
          break;
        }
        case 17: {
          msg.followId = reader.readString();
          break;
        }
        case 18: {
          msg.liquidity = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Type: {
    _: "_",
    Add: "Add",
    Remove: "Remove",
    Swap: "Swap",
    /**
     * @private
     */
    _fromInt: function (i: number): Transaction.Type {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Add";
        }
        case 2: {
          return "Remove";
        }
        case 3: {
          return "Swap";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Transaction.Type;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Transaction.Type): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Add": {
          return 1;
        }
        case "Remove": {
          return 2;
        }
        case "Swap": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const Order = {
  /**
   * Serializes Order to protobuf.
   */
  encode: function (msg: Partial<Order>): Uint8Array {
    return Order._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Order from protobuf.
   */
  decode: function (bytes: ByteSource): Order {
    return Order._readMessage(Order.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Order with all fields set to their default value.
   */
  initialize: function (): Order {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      userId: "",
      state: Order.State._fromInt(0),
      payAssetId: "",
      fillAssetId: "",
      payAmount: "",
      fillAmount: "",
      minAmount: "",
      routes: "",
      routeAssets: [],
      transactions: [],
      routePrice: "",
      priceImpact: "",
      followId: "",
      funds: "",
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Order>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(2, msg.createdAt, Timestamp._writeMessage);
    }
    if (msg.userId) {
      writer.writeString(3, msg.userId);
    }
    if (msg.state && Order.State._toInt(msg.state)) {
      writer.writeEnum(4, Order.State._toInt(msg.state));
    }
    if (msg.payAssetId) {
      writer.writeString(5, msg.payAssetId);
    }
    if (msg.fillAssetId) {
      writer.writeString(6, msg.fillAssetId);
    }
    if (msg.payAmount) {
      writer.writeString(7, msg.payAmount);
    }
    if (msg.fillAmount) {
      writer.writeString(8, msg.fillAmount);
    }
    if (msg.minAmount) {
      writer.writeString(9, msg.minAmount);
    }
    if (msg.routes) {
      writer.writeString(10, msg.routes);
    }
    if (msg.routeAssets?.length) {
      writer.writeRepeatedString(11, msg.routeAssets);
    }
    if (msg.transactions?.length) {
      writer.writeRepeatedMessage(
        12,
        msg.transactions as any,
        Transaction._writeMessage
      );
    }
    if (msg.routePrice) {
      writer.writeString(13, msg.routePrice);
    }
    if (msg.priceImpact) {
      writer.writeString(14, msg.priceImpact);
    }
    if (msg.followId) {
      writer.writeString(15, msg.followId);
    }
    if (msg.funds) {
      writer.writeString(16, msg.funds);
    }
    if (msg.amount) {
      writer.writeString(17, msg.amount);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Order, reader: BinaryReader): Order {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.userId = reader.readString();
          break;
        }
        case 4: {
          msg.state = Order.State._fromInt(reader.readEnum());
          break;
        }
        case 5: {
          msg.payAssetId = reader.readString();
          break;
        }
        case 6: {
          msg.fillAssetId = reader.readString();
          break;
        }
        case 7: {
          msg.payAmount = reader.readString();
          break;
        }
        case 8: {
          msg.fillAmount = reader.readString();
          break;
        }
        case 9: {
          msg.minAmount = reader.readString();
          break;
        }
        case 10: {
          msg.routes = reader.readString();
          break;
        }
        case 11: {
          msg.routeAssets.push(reader.readString());
          break;
        }
        case 12: {
          const m = Transaction.initialize();
          reader.readMessage(m, Transaction._readMessage);
          msg.transactions.push(m);
          break;
        }
        case 13: {
          msg.routePrice = reader.readString();
          break;
        }
        case 14: {
          msg.priceImpact = reader.readString();
          break;
        }
        case 15: {
          msg.followId = reader.readString();
          break;
        }
        case 16: {
          msg.funds = reader.readString();
          break;
        }
        case 17: {
          msg.amount = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  State: {
    _: "_",
    Trading: "Trading",
    Rejected: "Rejected",
    Done: "Done",
    /**
     * @private
     */
    _fromInt: function (i: number): Order.State {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Trading";
        }
        case 2: {
          return "Rejected";
        }
        case 3: {
          return "Done";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Order.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Order.State): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Trading": {
          return 1;
        }
        case "Rejected": {
          return 2;
        }
        case "Done": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const Proposal = {
  /**
   * Serializes Proposal to protobuf.
   */
  encode: function (msg: Partial<Proposal>): Uint8Array {
    return Proposal._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Proposal from protobuf.
   */
  decode: function (bytes: ByteSource): Proposal {
    return Proposal._readMessage(
      Proposal.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Proposal with all fields set to their default value.
   */
  initialize: function (): Proposal {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      passedAt: Timestamp.initialize(),
      creator: "",
      assetId: "",
      amount: "",
      action: "",
      data: "",
      votes: [],
      items: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Proposal>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(2, msg.createdAt, Timestamp._writeMessage);
    }
    if (msg.passedAt) {
      writer.writeMessage(3, msg.passedAt, Timestamp._writeMessage);
    }
    if (msg.creator) {
      writer.writeString(4, msg.creator);
    }
    if (msg.assetId) {
      writer.writeString(5, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(6, msg.amount);
    }
    if (msg.action) {
      writer.writeString(7, msg.action);
    }
    if (msg.data) {
      writer.writeString(8, msg.data);
    }
    if (msg.votes?.length) {
      writer.writeRepeatedString(9, msg.votes);
    }
    if (msg.items?.length) {
      writer.writeRepeatedMessage(
        10,
        msg.items as any,
        Proposal.Item._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Proposal, reader: BinaryReader): Proposal {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, Timestamp._readMessage);
          break;
        }
        case 3: {
          reader.readMessage(msg.passedAt, Timestamp._readMessage);
          break;
        }
        case 4: {
          msg.creator = reader.readString();
          break;
        }
        case 5: {
          msg.assetId = reader.readString();
          break;
        }
        case 6: {
          msg.amount = reader.readString();
          break;
        }
        case 7: {
          msg.action = reader.readString();
          break;
        }
        case 8: {
          msg.data = reader.readString();
          break;
        }
        case 9: {
          msg.votes.push(reader.readString());
          break;
        }
        case 10: {
          const m = Proposal.Item.initialize();
          reader.readMessage(m, Proposal.Item._readMessage);
          msg.items.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Item: {
    /**
     * Serializes Proposal.Item to protobuf.
     */
    encode: function (msg: Partial<Proposal.Item>): Uint8Array {
      return Proposal.Item._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes Proposal.Item from protobuf.
     */
    decode: function (bytes: ByteSource): Proposal.Item {
      return Proposal.Item._readMessage(
        Proposal.Item.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes Proposal.Item with all fields set to their default value.
     */
    initialize: function (): Proposal.Item {
      return {
        key: "",
        value: "",
        hint: "",
        action: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Proposal.Item>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeString(2, msg.value);
      }
      if (msg.hint) {
        writer.writeString(3, msg.hint);
      }
      if (msg.action) {
        writer.writeString(4, msg.action);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Proposal.Item,
      reader: BinaryReader
    ): Proposal.Item {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = reader.readString();
            break;
          }
          case 3: {
            msg.hint = reader.readString();
            break;
          }
          case 4: {
            msg.action = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const Room = {
  /**
   * Serializes Room to protobuf.
   */
  encode: function (msg: Partial<Room>): Uint8Array {
    return Room._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Room from protobuf.
   */
  decode: function (bytes: ByteSource): Room {
    return Room._readMessage(Room.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Room with all fields set to their default value.
   */
  initialize: function (): Room {
    return {
      id: "",
      baseAssetId: "",
      quoteAssetId: "",
      admins: [],
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Room>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.baseAssetId) {
      writer.writeString(2, msg.baseAssetId);
    }
    if (msg.quoteAssetId) {
      writer.writeString(3, msg.quoteAssetId);
    }
    if (msg.admins?.length) {
      writer.writeRepeatedString(4, msg.admins);
    }
    if (msg.name) {
      writer.writeString(5, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Room, reader: BinaryReader): Room {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 3: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 4: {
          msg.admins.push(reader.readString());
          break;
        }
        case 5: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UniswapReq = {
  /**
   * Serializes UniswapReq to protobuf.
   */
  encode: function (_msg?: Partial<UniswapReq>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes UniswapReq from protobuf.
   */
  decode: function (_bytes?: ByteSource): UniswapReq {
    return {};
  },

  /**
   * Initializes UniswapReq with all fields set to their default value.
   */
  initialize: function (): UniswapReq {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<UniswapReq>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg: UniswapReq, _reader: BinaryReader): UniswapReq {
    return _msg;
  },

  ListAssets: {
    /**
     * Serializes UniswapReq.ListAssets to protobuf.
     */
    encode: function (_msg?: Partial<UniswapReq.ListAssets>): Uint8Array {
      return new Uint8Array();
    },

    /**
     * Deserializes UniswapReq.ListAssets from protobuf.
     */
    decode: function (_bytes?: ByteSource): UniswapReq.ListAssets {
      return {};
    },

    /**
     * Initializes UniswapReq.ListAssets with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ListAssets {
      return {};
    },

    /**
     * @private
     */
    _writeMessage: function (
      _msg: Partial<UniswapReq.ListAssets>,
      writer: BinaryWriter
    ): BinaryWriter {
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      _msg: UniswapReq.ListAssets,
      _reader: BinaryReader
    ): UniswapReq.ListAssets {
      return _msg;
    },
  },

  ReadAsset: {
    /**
     * Serializes UniswapReq.ReadAsset to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.ReadAsset>): Uint8Array {
      return UniswapReq.ReadAsset._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadAsset from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadAsset {
      return UniswapReq.ReadAsset._readMessage(
        UniswapReq.ReadAsset.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.ReadAsset with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadAsset {
      return {
        assetId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadAsset>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.assetId) {
        writer.writeString(1, msg.assetId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadAsset,
      reader: BinaryReader
    ): UniswapReq.ReadAsset {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.assetId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReadPair: {
    /**
     * Serializes UniswapReq.ReadPair to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.ReadPair>): Uint8Array {
      return UniswapReq.ReadPair._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadPair from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadPair {
      return UniswapReq.ReadPair._readMessage(
        UniswapReq.ReadPair.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.ReadPair with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadPair {
      return {
        baseAssetId: "",
        quoteAssetId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadPair>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.baseAssetId) {
        writer.writeString(1, msg.baseAssetId);
      }
      if (msg.quoteAssetId) {
        writer.writeString(2, msg.quoteAssetId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadPair,
      reader: BinaryReader
    ): UniswapReq.ReadPair {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.baseAssetId = reader.readString();
            break;
          }
          case 2: {
            msg.quoteAssetId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListPairs: {
    /**
     * Serializes UniswapReq.ListPairs to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.ListPairs>): Uint8Array {
      return UniswapReq.ListPairs._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ListPairs from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ListPairs {
      return UniswapReq.ListPairs._readMessage(
        UniswapReq.ListPairs.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.ListPairs with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ListPairs {
      return {
        brokerId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ListPairs>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.brokerId) {
        writer.writeString(1, msg.brokerId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListPairs,
      reader: BinaryReader
    ): UniswapReq.ListPairs {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.brokerId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReadDeposit: {
    /**
     * Serializes UniswapReq.ReadDeposit to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.ReadDeposit>): Uint8Array {
      return UniswapReq.ReadDeposit._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadDeposit from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadDeposit {
      return UniswapReq.ReadDeposit._readMessage(
        UniswapReq.ReadDeposit.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.ReadDeposit with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadDeposit {
      return {
        followId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadDeposit>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.followId) {
        writer.writeString(1, msg.followId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadDeposit,
      reader: BinaryReader
    ): UniswapReq.ReadDeposit {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.followId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReadTransaction: {
    /**
     * Serializes UniswapReq.ReadTransaction to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.ReadTransaction>): Uint8Array {
      return UniswapReq.ReadTransaction._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadTransaction from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadTransaction {
      return UniswapReq.ReadTransaction._readMessage(
        UniswapReq.ReadTransaction.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.ReadTransaction with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadTransaction {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        followId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadTransaction>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.baseAssetId) {
        writer.writeString(1, msg.baseAssetId);
      }
      if (msg.quoteAssetId) {
        writer.writeString(2, msg.quoteAssetId);
      }
      if (msg.followId) {
        writer.writeString(3, msg.followId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadTransaction,
      reader: BinaryReader
    ): UniswapReq.ReadTransaction {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.baseAssetId = reader.readString();
            break;
          }
          case 2: {
            msg.quoteAssetId = reader.readString();
            break;
          }
          case 3: {
            msg.followId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReadOrder: {
    /**
     * Serializes UniswapReq.ReadOrder to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.ReadOrder>): Uint8Array {
      return UniswapReq.ReadOrder._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadOrder from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadOrder {
      return UniswapReq.ReadOrder._readMessage(
        UniswapReq.ReadOrder.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.ReadOrder with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadOrder {
      return {
        followId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadOrder>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.followId) {
        writer.writeString(1, msg.followId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadOrder,
      reader: BinaryReader
    ): UniswapReq.ReadOrder {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.followId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  PreOrder: {
    /**
     * Serializes UniswapReq.PreOrder to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.PreOrder>): Uint8Array {
      return UniswapReq.PreOrder._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.PreOrder from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.PreOrder {
      return UniswapReq.PreOrder._readMessage(
        UniswapReq.PreOrder.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.PreOrder with all fields set to their default value.
     */
    initialize: function (): UniswapReq.PreOrder {
      return {
        payAssetId: "",
        fillAssetId: "",
        payAmount: "",
        fillAmount: "",
        minAmount: "",
        funds: "",
        amount: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.PreOrder>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.payAssetId) {
        writer.writeString(1, msg.payAssetId);
      }
      if (msg.fillAssetId) {
        writer.writeString(2, msg.fillAssetId);
      }
      if (msg.payAmount) {
        writer.writeString(3, msg.payAmount);
      }
      if (msg.fillAmount) {
        writer.writeString(4, msg.fillAmount);
      }
      if (msg.minAmount) {
        writer.writeString(5, msg.minAmount);
      }
      if (msg.funds) {
        writer.writeString(6, msg.funds);
      }
      if (msg.amount) {
        writer.writeString(7, msg.amount);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.PreOrder,
      reader: BinaryReader
    ): UniswapReq.PreOrder {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.payAssetId = reader.readString();
            break;
          }
          case 2: {
            msg.fillAssetId = reader.readString();
            break;
          }
          case 3: {
            msg.payAmount = reader.readString();
            break;
          }
          case 4: {
            msg.fillAmount = reader.readString();
            break;
          }
          case 5: {
            msg.minAmount = reader.readString();
            break;
          }
          case 6: {
            msg.funds = reader.readString();
            break;
          }
          case 7: {
            msg.amount = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListTransactions: {
    /**
     * Serializes UniswapReq.ListTransactions to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.ListTransactions>): Uint8Array {
      return UniswapReq.ListTransactions._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ListTransactions from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ListTransactions {
      return UniswapReq.ListTransactions._readMessage(
        UniswapReq.ListTransactions.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.ListTransactions with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ListTransactions {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        type: "",
        cursor: "",
        limit: 0n,
        userId: "",
        order: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ListTransactions>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.baseAssetId) {
        writer.writeString(1, msg.baseAssetId);
      }
      if (msg.quoteAssetId) {
        writer.writeString(2, msg.quoteAssetId);
      }
      if (msg.type) {
        writer.writeString(3, msg.type);
      }
      if (msg.cursor) {
        writer.writeString(4, msg.cursor);
      }
      if (msg.limit) {
        writer.writeInt64String(5, msg.limit.toString() as any);
      }
      if (msg.userId) {
        writer.writeString(6, msg.userId);
      }
      if (msg.order) {
        writer.writeString(7, msg.order);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListTransactions,
      reader: BinaryReader
    ): UniswapReq.ListTransactions {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.baseAssetId = reader.readString();
            break;
          }
          case 2: {
            msg.quoteAssetId = reader.readString();
            break;
          }
          case 3: {
            msg.type = reader.readString();
            break;
          }
          case 4: {
            msg.cursor = reader.readString();
            break;
          }
          case 5: {
            msg.limit = BigInt(reader.readInt64String());
            break;
          }
          case 6: {
            msg.userId = reader.readString();
            break;
          }
          case 7: {
            msg.order = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  UpdateRoom: {
    /**
     * Serializes UniswapReq.UpdateRoom to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.UpdateRoom>): Uint8Array {
      return UniswapReq.UpdateRoom._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.UpdateRoom from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.UpdateRoom {
      return UniswapReq.UpdateRoom._readMessage(
        UniswapReq.UpdateRoom.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.UpdateRoom with all fields set to their default value.
     */
    initialize: function (): UniswapReq.UpdateRoom {
      return {
        id: "",
        baseAssetId: "",
        quoteAssetId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.UpdateRoom>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id);
      }
      if (msg.baseAssetId) {
        writer.writeString(2, msg.baseAssetId);
      }
      if (msg.quoteAssetId) {
        writer.writeString(3, msg.quoteAssetId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.UpdateRoom,
      reader: BinaryReader
    ): UniswapReq.UpdateRoom {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.id = reader.readString();
            break;
          }
          case 2: {
            msg.baseAssetId = reader.readString();
            break;
          }
          case 3: {
            msg.quoteAssetId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  FindRoom: {
    /**
     * Serializes UniswapReq.FindRoom to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.FindRoom>): Uint8Array {
      return UniswapReq.FindRoom._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.FindRoom from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.FindRoom {
      return UniswapReq.FindRoom._readMessage(
        UniswapReq.FindRoom.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.FindRoom with all fields set to their default value.
     */
    initialize: function (): UniswapReq.FindRoom {
      return {
        id: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.FindRoom>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.FindRoom,
      reader: BinaryReader
    ): UniswapReq.FindRoom {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.id = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListProposals: {
    /**
     * Serializes UniswapReq.ListProposals to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.ListProposals>): Uint8Array {
      return UniswapReq.ListProposals._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ListProposals from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ListProposals {
      return UniswapReq.ListProposals._readMessage(
        UniswapReq.ListProposals.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.ListProposals with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ListProposals {
      return {
        cursor: "",
        limit: 0n,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ListProposals>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.cursor) {
        writer.writeString(1, msg.cursor);
      }
      if (msg.limit) {
        writer.writeInt64String(2, msg.limit.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListProposals,
      reader: BinaryReader
    ): UniswapReq.ListProposals {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.cursor = reader.readString();
            break;
          }
          case 2: {
            msg.limit = BigInt(reader.readInt64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  FindProposal: {
    /**
     * Serializes UniswapReq.FindProposal to protobuf.
     */
    encode: function (msg: Partial<UniswapReq.FindProposal>): Uint8Array {
      return UniswapReq.FindProposal._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.FindProposal from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.FindProposal {
      return UniswapReq.FindProposal._readMessage(
        UniswapReq.FindProposal.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapReq.FindProposal with all fields set to their default value.
     */
    initialize: function (): UniswapReq.FindProposal {
      return {
        id: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.FindProposal>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.FindProposal,
      reader: BinaryReader
    ): UniswapReq.FindProposal {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.id = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const UniswapResp = {
  /**
   * Serializes UniswapResp to protobuf.
   */
  encode: function (_msg?: Partial<UniswapResp>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes UniswapResp from protobuf.
   */
  decode: function (_bytes?: ByteSource): UniswapResp {
    return {};
  },

  /**
   * Initializes UniswapResp with all fields set to their default value.
   */
  initialize: function (): UniswapResp {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<UniswapResp>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: UniswapResp,
    _reader: BinaryReader
  ): UniswapResp {
    return _msg;
  },

  ListAssets: {
    /**
     * Serializes UniswapResp.ListAssets to protobuf.
     */
    encode: function (msg: Partial<UniswapResp.ListAssets>): Uint8Array {
      return UniswapResp.ListAssets._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListAssets from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListAssets {
      return UniswapResp.ListAssets._readMessage(
        UniswapResp.ListAssets.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapResp.ListAssets with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListAssets {
      return {
        assets: [],
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListAssets>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.assets?.length) {
        writer.writeRepeatedMessage(1, msg.assets as any, Asset._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListAssets,
      reader: BinaryReader
    ): UniswapResp.ListAssets {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            const m = Asset.initialize();
            reader.readMessage(m, Asset._readMessage);
            msg.assets.push(m);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListPairs: {
    /**
     * Serializes UniswapResp.ListPairs to protobuf.
     */
    encode: function (msg: Partial<UniswapResp.ListPairs>): Uint8Array {
      return UniswapResp.ListPairs._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListPairs from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListPairs {
      return UniswapResp.ListPairs._readMessage(
        UniswapResp.ListPairs.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapResp.ListPairs with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListPairs {
      return {
        pairs: [],
        pairCount: 0,
        transactionCount24h: 0,
        liquidityValue: "",
        volume24h: "",
        fee24h: "",
        ts: 0,
        whitelists: [],
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListPairs>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.pairs?.length) {
        writer.writeRepeatedMessage(1, msg.pairs as any, Pair._writeMessage);
      }
      if (msg.pairCount) {
        writer.writeInt32(2, msg.pairCount);
      }
      if (msg.transactionCount24h) {
        writer.writeInt32(3, msg.transactionCount24h);
      }
      if (msg.liquidityValue) {
        writer.writeString(4, msg.liquidityValue);
      }
      if (msg.volume24h) {
        writer.writeString(5, msg.volume24h);
      }
      if (msg.fee24h) {
        writer.writeString(6, msg.fee24h);
      }
      if (msg.ts) {
        writer.writeDouble(7, msg.ts);
      }
      if (msg.whitelists?.length) {
        writer.writeRepeatedString(8, msg.whitelists);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListPairs,
      reader: BinaryReader
    ): UniswapResp.ListPairs {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            const m = Pair.initialize();
            reader.readMessage(m, Pair._readMessage);
            msg.pairs.push(m);
            break;
          }
          case 2: {
            msg.pairCount = reader.readInt32();
            break;
          }
          case 3: {
            msg.transactionCount24h = reader.readInt32();
            break;
          }
          case 4: {
            msg.liquidityValue = reader.readString();
            break;
          }
          case 5: {
            msg.volume24h = reader.readString();
            break;
          }
          case 6: {
            msg.fee24h = reader.readString();
            break;
          }
          case 7: {
            msg.ts = reader.readDouble();
            break;
          }
          case 8: {
            msg.whitelists.push(reader.readString());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListTransactionsSummary: {
    /**
     * Serializes UniswapResp.ListTransactionsSummary to protobuf.
     */
    encode: function (
      msg: Partial<UniswapResp.ListTransactionsSummary>
    ): Uint8Array {
      return UniswapResp.ListTransactionsSummary._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListTransactionsSummary from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListTransactionsSummary {
      return UniswapResp.ListTransactionsSummary._readMessage(
        UniswapResp.ListTransactionsSummary.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapResp.ListTransactionsSummary with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListTransactionsSummary {
      return {
        totalAddBaseAmount: "",
        totalAddQuoteAmount: "",
        totalRemoveBaseAmount: "",
        totalRemoveQuoteAmount: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListTransactionsSummary>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.totalAddBaseAmount) {
        writer.writeString(1, msg.totalAddBaseAmount);
      }
      if (msg.totalAddQuoteAmount) {
        writer.writeString(2, msg.totalAddQuoteAmount);
      }
      if (msg.totalRemoveBaseAmount) {
        writer.writeString(3, msg.totalRemoveBaseAmount);
      }
      if (msg.totalRemoveQuoteAmount) {
        writer.writeString(4, msg.totalRemoveQuoteAmount);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListTransactionsSummary,
      reader: BinaryReader
    ): UniswapResp.ListTransactionsSummary {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.totalAddBaseAmount = reader.readString();
            break;
          }
          case 2: {
            msg.totalAddQuoteAmount = reader.readString();
            break;
          }
          case 3: {
            msg.totalRemoveBaseAmount = reader.readString();
            break;
          }
          case 4: {
            msg.totalRemoveQuoteAmount = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListTransactions: {
    /**
     * Serializes UniswapResp.ListTransactions to protobuf.
     */
    encode: function (msg: Partial<UniswapResp.ListTransactions>): Uint8Array {
      return UniswapResp.ListTransactions._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListTransactions from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListTransactions {
      return UniswapResp.ListTransactions._readMessage(
        UniswapResp.ListTransactions.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapResp.ListTransactions with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListTransactions {
      return {
        transactions: [],
        pagination: Pagination.initialize(),
        summary: UniswapResp.ListTransactionsSummary.initialize(),
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListTransactions>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.transactions?.length) {
        writer.writeRepeatedMessage(
          1,
          msg.transactions as any,
          Transaction._writeMessage
        );
      }
      if (msg.pagination) {
        writer.writeMessage(2, msg.pagination, Pagination._writeMessage);
      }
      if (msg.summary) {
        writer.writeMessage(
          3,
          msg.summary,
          UniswapResp.ListTransactionsSummary._writeMessage
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListTransactions,
      reader: BinaryReader
    ): UniswapResp.ListTransactions {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            const m = Transaction.initialize();
            reader.readMessage(m, Transaction._readMessage);
            msg.transactions.push(m);
            break;
          }
          case 2: {
            reader.readMessage(msg.pagination, Pagination._readMessage);
            break;
          }
          case 3: {
            reader.readMessage(
              msg.summary,
              UniswapResp.ListTransactionsSummary._readMessage
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListProposals: {
    /**
     * Serializes UniswapResp.ListProposals to protobuf.
     */
    encode: function (msg: Partial<UniswapResp.ListProposals>): Uint8Array {
      return UniswapResp.ListProposals._writeMessage(
        msg,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListProposals from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListProposals {
      return UniswapResp.ListProposals._readMessage(
        UniswapResp.ListProposals.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Initializes UniswapResp.ListProposals with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListProposals {
      return {
        proposals: [],
        pagination: Pagination.initialize(),
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListProposals>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.proposals?.length) {
        writer.writeRepeatedMessage(
          1,
          msg.proposals as any,
          Proposal._writeMessage
        );
      }
      if (msg.pagination) {
        writer.writeMessage(2, msg.pagination, Pagination._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListProposals,
      reader: BinaryReader
    ): UniswapResp.ListProposals {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            const m = Proposal.initialize();
            reader.readMessage(m, Proposal._readMessage);
            msg.proposals.push(m);
            break;
          }
          case 2: {
            reader.readMessage(msg.pagination, Pagination._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const PaginationJSON = {
  /**
   * Serializes Pagination to JSON.
   */
  encode: function (msg: Partial<Pagination>): string {
    return JSON.stringify(PaginationJSON._writeMessage(msg));
  },

  /**
   * Deserializes Pagination from JSON.
   */
  decode: function (json: string): Pagination {
    return PaginationJSON._readMessage(
      PaginationJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Pagination with all fields set to their default value.
   */
  initialize: function (): Pagination {
    return {
      nextCursor: "",
      hasNext: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Pagination>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.nextCursor) {
      json.nextCursor = msg.nextCursor;
    }
    if (msg.hasNext) {
      json.hasNext = msg.hasNext;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pagination, json: any): Pagination {
    const _nextCursor = json.nextCursor ?? json.next_cursor;
    if (_nextCursor) {
      msg.nextCursor = _nextCursor;
    }
    const _hasNext = json.hasNext ?? json.has_next;
    if (_hasNext) {
      msg.hasNext = _hasNext;
    }
    return msg;
  },
};

export const AssetJSON = {
  /**
   * Serializes Asset to JSON.
   */
  encode: function (msg: Partial<Asset>): string {
    return JSON.stringify(AssetJSON._writeMessage(msg));
  },

  /**
   * Deserializes Asset from JSON.
   */
  decode: function (json: string): Asset {
    return AssetJSON._readMessage(AssetJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (): Asset {
    return {
      id: "",
      name: "",
      symbol: "",
      logo: "",
      chainId: "",
      chain: Asset.initialize(),
      price: "",
      displaySymbol: "",
      extra: "",
      tag: "",
      priceChange: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Asset>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.symbol) {
      json.symbol = msg.symbol;
    }
    if (msg.logo) {
      json.logo = msg.logo;
    }
    if (msg.chainId) {
      json.chainId = msg.chainId;
    }
    if (msg.chain) {
      const chain = AssetJSON._writeMessage(msg.chain);
      if (Object.keys(chain).length > 0) {
        json.chain = chain;
      }
    }
    if (msg.price) {
      json.price = msg.price;
    }
    if (msg.displaySymbol) {
      json.displaySymbol = msg.displaySymbol;
    }
    if (msg.extra) {
      json.extra = msg.extra;
    }
    if (msg.tag) {
      json.tag = msg.tag;
    }
    if (msg.priceChange) {
      json.priceChange = msg.priceChange;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, json: any): Asset {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _symbol = json.symbol;
    if (_symbol) {
      msg.symbol = _symbol;
    }
    const _logo = json.logo;
    if (_logo) {
      msg.logo = _logo;
    }
    const _chainId = json.chainId ?? json.chain_id;
    if (_chainId) {
      msg.chainId = _chainId;
    }
    const _chain = json.chain;
    if (_chain) {
      const m = Asset.initialize();
      AssetJSON._readMessage(m, _chain);
      msg.chain = m;
    }
    const _price = json.price;
    if (_price) {
      msg.price = _price;
    }
    const _displaySymbol = json.displaySymbol ?? json.display_symbol;
    if (_displaySymbol) {
      msg.displaySymbol = _displaySymbol;
    }
    const _extra = json.extra;
    if (_extra) {
      msg.extra = _extra;
    }
    const _tag = json.tag;
    if (_tag) {
      msg.tag = _tag;
    }
    const _priceChange = json.priceChange ?? json.price_change;
    if (_priceChange) {
      msg.priceChange = _priceChange;
    }
    return msg;
  },
};

export const PairJSON = {
  /**
   * Serializes Pair to JSON.
   */
  encode: function (msg: Partial<Pair>): string {
    return JSON.stringify(PairJSON._writeMessage(msg));
  },

  /**
   * Deserializes Pair from JSON.
   */
  decode: function (json: string): Pair {
    return PairJSON._readMessage(PairJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Pair with all fields set to their default value.
   */
  initialize: function (): Pair {
    return {
      baseAssetId: "",
      quoteAssetId: "",
      baseAmount: "",
      quoteAmount: "",
      share: "",
      liquidity: "",
      liquidityAssetId: "",
      routeId: 0,
      feePercent: "",
      maxLiquidity: "",
      baseValue: "",
      quoteValue: "",
      volume24h: "",
      fee24h: "",
      transactionCount24h: 0,
      swapMethod: "",
      version: 0,
      baseVolume24h: "",
      quoteVolume24h: "",
      netRor24h: "",
      netRor7d: "",
      netRor30d: "",
      profitRate: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Pair>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.baseAssetId) {
      json.baseAssetId = msg.baseAssetId;
    }
    if (msg.quoteAssetId) {
      json.quoteAssetId = msg.quoteAssetId;
    }
    if (msg.baseAmount) {
      json.baseAmount = msg.baseAmount;
    }
    if (msg.quoteAmount) {
      json.quoteAmount = msg.quoteAmount;
    }
    if (msg.share) {
      json.share = msg.share;
    }
    if (msg.liquidity) {
      json.liquidity = msg.liquidity;
    }
    if (msg.liquidityAssetId) {
      json.liquidityAssetId = msg.liquidityAssetId;
    }
    if (msg.routeId) {
      json.routeId = msg.routeId;
    }
    if (msg.feePercent) {
      json.feePercent = msg.feePercent;
    }
    if (msg.maxLiquidity) {
      json.maxLiquidity = msg.maxLiquidity;
    }
    if (msg.baseValue) {
      json.baseValue = msg.baseValue;
    }
    if (msg.quoteValue) {
      json.quoteValue = msg.quoteValue;
    }
    if (msg.volume24h) {
      json.volume24h = msg.volume24h;
    }
    if (msg.fee24h) {
      json.fee24h = msg.fee24h;
    }
    if (msg.transactionCount24h) {
      json.transactionCount24h = msg.transactionCount24h;
    }
    if (msg.swapMethod) {
      json.swapMethod = msg.swapMethod;
    }
    if (msg.version) {
      json.version = msg.version;
    }
    if (msg.baseVolume24h) {
      json.baseVolume24h = msg.baseVolume24h;
    }
    if (msg.quoteVolume24h) {
      json.quoteVolume24h = msg.quoteVolume24h;
    }
    if (msg.netRor24h) {
      json.netRor24h = msg.netRor24h;
    }
    if (msg.netRor7d) {
      json.netRor7d = msg.netRor7d;
    }
    if (msg.netRor30d) {
      json.netRor30d = msg.netRor30d;
    }
    if (msg.profitRate) {
      json.profitRate = msg.profitRate;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pair, json: any): Pair {
    const _baseAssetId = json.baseAssetId ?? json.base_asset_id;
    if (_baseAssetId) {
      msg.baseAssetId = _baseAssetId;
    }
    const _quoteAssetId = json.quoteAssetId ?? json.quote_asset_id;
    if (_quoteAssetId) {
      msg.quoteAssetId = _quoteAssetId;
    }
    const _baseAmount = json.baseAmount ?? json.base_amount;
    if (_baseAmount) {
      msg.baseAmount = _baseAmount;
    }
    const _quoteAmount = json.quoteAmount ?? json.quote_amount;
    if (_quoteAmount) {
      msg.quoteAmount = _quoteAmount;
    }
    const _share = json.share;
    if (_share) {
      msg.share = _share;
    }
    const _liquidity = json.liquidity;
    if (_liquidity) {
      msg.liquidity = _liquidity;
    }
    const _liquidityAssetId = json.liquidityAssetId ?? json.liquidity_asset_id;
    if (_liquidityAssetId) {
      msg.liquidityAssetId = _liquidityAssetId;
    }
    const _routeId = json.routeId ?? json.route_id;
    if (_routeId) {
      msg.routeId = _routeId;
    }
    const _feePercent = json.feePercent ?? json.fee_percent;
    if (_feePercent) {
      msg.feePercent = _feePercent;
    }
    const _maxLiquidity = json.maxLiquidity ?? json.max_liquidity;
    if (_maxLiquidity) {
      msg.maxLiquidity = _maxLiquidity;
    }
    const _baseValue = json.baseValue ?? json.base_value;
    if (_baseValue) {
      msg.baseValue = _baseValue;
    }
    const _quoteValue = json.quoteValue ?? json.quote_value;
    if (_quoteValue) {
      msg.quoteValue = _quoteValue;
    }
    const _volume24h = json.volume24h ?? json.volume_24h;
    if (_volume24h) {
      msg.volume24h = _volume24h;
    }
    const _fee24h = json.fee24h ?? json.fee_24h;
    if (_fee24h) {
      msg.fee24h = _fee24h;
    }
    const _transactionCount24h =
      json.transactionCount24h ?? json.transaction_count_24h;
    if (_transactionCount24h) {
      msg.transactionCount24h = _transactionCount24h;
    }
    const _swapMethod = json.swapMethod ?? json.swap_method;
    if (_swapMethod) {
      msg.swapMethod = _swapMethod;
    }
    const _version = json.version;
    if (_version) {
      msg.version = _version;
    }
    const _baseVolume24h = json.baseVolume24h ?? json.base_volume_24h;
    if (_baseVolume24h) {
      msg.baseVolume24h = _baseVolume24h;
    }
    const _quoteVolume24h = json.quoteVolume24h ?? json.quote_volume_24h;
    if (_quoteVolume24h) {
      msg.quoteVolume24h = _quoteVolume24h;
    }
    const _netRor24h = json.netRor24h ?? json.net_ror_24h;
    if (_netRor24h) {
      msg.netRor24h = _netRor24h;
    }
    const _netRor7d = json.netRor7d ?? json.net_ror_7d;
    if (_netRor7d) {
      msg.netRor7d = _netRor7d;
    }
    const _netRor30d = json.netRor30d ?? json.net_ror_30d;
    if (_netRor30d) {
      msg.netRor30d = _netRor30d;
    }
    const _profitRate = json.profitRate ?? json.profit_rate;
    if (_profitRate) {
      msg.profitRate = _profitRate;
    }
    return msg;
  },
};

export const DepositJSON = {
  /**
   * Serializes Deposit to JSON.
   */
  encode: function (msg: Partial<Deposit>): string {
    return JSON.stringify(DepositJSON._writeMessage(msg));
  },

  /**
   * Deserializes Deposit from JSON.
   */
  decode: function (json: string): Deposit {
    return DepositJSON._readMessage(DepositJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Deposit with all fields set to their default value.
   */
  initialize: function (): Deposit {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      state: Deposit.State._fromInt(0),
      userId: "",
      followId: "",
      baseAssetId: "",
      baseAmount: "",
      quoteAssetId: "",
      quoteAmount: "",
      slippage: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Deposit>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.createdAt) {
      const createdAt = TimestampJSON._writeMessage(msg.createdAt);
      if (Object.keys(createdAt).length > 0) {
        json.createdAt = createdAt;
      }
    }
    if (msg.state && DepositJSON.State._toInt(msg.state)) {
      json.state = msg.state;
    }
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.followId) {
      json.followId = msg.followId;
    }
    if (msg.baseAssetId) {
      json.baseAssetId = msg.baseAssetId;
    }
    if (msg.baseAmount) {
      json.baseAmount = msg.baseAmount;
    }
    if (msg.quoteAssetId) {
      json.quoteAssetId = msg.quoteAssetId;
    }
    if (msg.quoteAmount) {
      json.quoteAmount = msg.quoteAmount;
    }
    if (msg.slippage) {
      json.slippage = msg.slippage;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Deposit, json: any): Deposit {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _createdAt);
      msg.createdAt = m;
    }
    const _state = json.state;
    if (_state) {
      msg.state = _state;
    }
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _followId = json.followId ?? json.follow_id;
    if (_followId) {
      msg.followId = _followId;
    }
    const _baseAssetId = json.baseAssetId ?? json.base_asset_id;
    if (_baseAssetId) {
      msg.baseAssetId = _baseAssetId;
    }
    const _baseAmount = json.baseAmount ?? json.base_amount;
    if (_baseAmount) {
      msg.baseAmount = _baseAmount;
    }
    const _quoteAssetId = json.quoteAssetId ?? json.quote_asset_id;
    if (_quoteAssetId) {
      msg.quoteAssetId = _quoteAssetId;
    }
    const _quoteAmount = json.quoteAmount ?? json.quote_amount;
    if (_quoteAmount) {
      msg.quoteAmount = _quoteAmount;
    }
    const _slippage = json.slippage;
    if (_slippage) {
      msg.slippage = _slippage;
    }
    return msg;
  },

  State: {
    _: "_",
    Pending: "Pending",
    Cancelled: "Cancelled",
    Done: "Done",
    /**
     * @private
     */
    _fromInt: function (i: number): Deposit.State {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Pending";
        }
        case 2: {
          return "Cancelled";
        }
        case 3: {
          return "Done";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Deposit.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Deposit.State): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Pending": {
          return 1;
        }
        case "Cancelled": {
          return 2;
        }
        case "Done": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const TransactionJSON = {
  /**
   * Serializes Transaction to JSON.
   */
  encode: function (msg: Partial<Transaction>): string {
    return JSON.stringify(TransactionJSON._writeMessage(msg));
  },

  /**
   * Deserializes Transaction from JSON.
   */
  decode: function (json: string): Transaction {
    return TransactionJSON._readMessage(
      TransactionJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Transaction with all fields set to their default value.
   */
  initialize: function (): Transaction {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      userId: "",
      type: Transaction.Type._fromInt(0),
      baseAssetId: "",
      quoteAssetId: "",
      baseAmount: "",
      quoteAmount: "",
      feeAssetId: "",
      feeAmount: "",
      payAssetId: "",
      filledAssetId: "",
      funds: "",
      amount: "",
      value: "",
      feeValue: "",
      followId: "",
      liquidity: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Transaction>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.createdAt) {
      const createdAt = TimestampJSON._writeMessage(msg.createdAt);
      if (Object.keys(createdAt).length > 0) {
        json.createdAt = createdAt;
      }
    }
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.type && TransactionJSON.Type._toInt(msg.type)) {
      json.type = msg.type;
    }
    if (msg.baseAssetId) {
      json.baseAssetId = msg.baseAssetId;
    }
    if (msg.quoteAssetId) {
      json.quoteAssetId = msg.quoteAssetId;
    }
    if (msg.baseAmount) {
      json.baseAmount = msg.baseAmount;
    }
    if (msg.quoteAmount) {
      json.quoteAmount = msg.quoteAmount;
    }
    if (msg.feeAssetId) {
      json.feeAssetId = msg.feeAssetId;
    }
    if (msg.feeAmount) {
      json.feeAmount = msg.feeAmount;
    }
    if (msg.payAssetId) {
      json.payAssetId = msg.payAssetId;
    }
    if (msg.filledAssetId) {
      json.filledAssetId = msg.filledAssetId;
    }
    if (msg.funds) {
      json.funds = msg.funds;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.value) {
      json.value = msg.value;
    }
    if (msg.feeValue) {
      json.feeValue = msg.feeValue;
    }
    if (msg.followId) {
      json.followId = msg.followId;
    }
    if (msg.liquidity) {
      json.liquidity = msg.liquidity;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Transaction, json: any): Transaction {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _createdAt);
      msg.createdAt = m;
    }
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _type = json.type;
    if (_type) {
      msg.type = _type;
    }
    const _baseAssetId = json.baseAssetId ?? json.base_asset_id;
    if (_baseAssetId) {
      msg.baseAssetId = _baseAssetId;
    }
    const _quoteAssetId = json.quoteAssetId ?? json.quote_asset_id;
    if (_quoteAssetId) {
      msg.quoteAssetId = _quoteAssetId;
    }
    const _baseAmount = json.baseAmount ?? json.base_amount;
    if (_baseAmount) {
      msg.baseAmount = _baseAmount;
    }
    const _quoteAmount = json.quoteAmount ?? json.quote_amount;
    if (_quoteAmount) {
      msg.quoteAmount = _quoteAmount;
    }
    const _feeAssetId = json.feeAssetId ?? json.fee_asset_id;
    if (_feeAssetId) {
      msg.feeAssetId = _feeAssetId;
    }
    const _feeAmount = json.feeAmount ?? json.fee_amount;
    if (_feeAmount) {
      msg.feeAmount = _feeAmount;
    }
    const _payAssetId = json.payAssetId ?? json.pay_asset_id;
    if (_payAssetId) {
      msg.payAssetId = _payAssetId;
    }
    const _filledAssetId = json.filledAssetId ?? json.filled_asset_id;
    if (_filledAssetId) {
      msg.filledAssetId = _filledAssetId;
    }
    const _funds = json.funds;
    if (_funds) {
      msg.funds = _funds;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _value = json.value;
    if (_value) {
      msg.value = _value;
    }
    const _feeValue = json.feeValue ?? json.fee_value;
    if (_feeValue) {
      msg.feeValue = _feeValue;
    }
    const _followId = json.followId ?? json.follow_id;
    if (_followId) {
      msg.followId = _followId;
    }
    const _liquidity = json.liquidity;
    if (_liquidity) {
      msg.liquidity = _liquidity;
    }
    return msg;
  },

  Type: {
    _: "_",
    Add: "Add",
    Remove: "Remove",
    Swap: "Swap",
    /**
     * @private
     */
    _fromInt: function (i: number): Transaction.Type {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Add";
        }
        case 2: {
          return "Remove";
        }
        case 3: {
          return "Swap";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Transaction.Type;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Transaction.Type): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Add": {
          return 1;
        }
        case "Remove": {
          return 2;
        }
        case "Swap": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const OrderJSON = {
  /**
   * Serializes Order to JSON.
   */
  encode: function (msg: Partial<Order>): string {
    return JSON.stringify(OrderJSON._writeMessage(msg));
  },

  /**
   * Deserializes Order from JSON.
   */
  decode: function (json: string): Order {
    return OrderJSON._readMessage(OrderJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Order with all fields set to their default value.
   */
  initialize: function (): Order {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      userId: "",
      state: Order.State._fromInt(0),
      payAssetId: "",
      fillAssetId: "",
      payAmount: "",
      fillAmount: "",
      minAmount: "",
      routes: "",
      routeAssets: [],
      transactions: [],
      routePrice: "",
      priceImpact: "",
      followId: "",
      funds: "",
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Order>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.createdAt) {
      const createdAt = TimestampJSON._writeMessage(msg.createdAt);
      if (Object.keys(createdAt).length > 0) {
        json.createdAt = createdAt;
      }
    }
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.state && OrderJSON.State._toInt(msg.state)) {
      json.state = msg.state;
    }
    if (msg.payAssetId) {
      json.payAssetId = msg.payAssetId;
    }
    if (msg.fillAssetId) {
      json.fillAssetId = msg.fillAssetId;
    }
    if (msg.payAmount) {
      json.payAmount = msg.payAmount;
    }
    if (msg.fillAmount) {
      json.fillAmount = msg.fillAmount;
    }
    if (msg.minAmount) {
      json.minAmount = msg.minAmount;
    }
    if (msg.routes) {
      json.routes = msg.routes;
    }
    if (msg.routeAssets?.length) {
      json.routeAssets = msg.routeAssets;
    }
    if (msg.transactions?.length) {
      json.transactions = msg.transactions.map(TransactionJSON._writeMessage);
    }
    if (msg.routePrice) {
      json.routePrice = msg.routePrice;
    }
    if (msg.priceImpact) {
      json.priceImpact = msg.priceImpact;
    }
    if (msg.followId) {
      json.followId = msg.followId;
    }
    if (msg.funds) {
      json.funds = msg.funds;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Order, json: any): Order {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _createdAt);
      msg.createdAt = m;
    }
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _state = json.state;
    if (_state) {
      msg.state = _state;
    }
    const _payAssetId = json.payAssetId ?? json.pay_asset_id;
    if (_payAssetId) {
      msg.payAssetId = _payAssetId;
    }
    const _fillAssetId = json.fillAssetId ?? json.fill_asset_id;
    if (_fillAssetId) {
      msg.fillAssetId = _fillAssetId;
    }
    const _payAmount = json.payAmount ?? json.pay_amount;
    if (_payAmount) {
      msg.payAmount = _payAmount;
    }
    const _fillAmount = json.fillAmount ?? json.fill_amount;
    if (_fillAmount) {
      msg.fillAmount = _fillAmount;
    }
    const _minAmount = json.minAmount ?? json.min_amount;
    if (_minAmount) {
      msg.minAmount = _minAmount;
    }
    const _routes = json.routes;
    if (_routes) {
      msg.routes = _routes;
    }
    const _routeAssets = json.routeAssets ?? json.route_assets;
    if (_routeAssets) {
      msg.routeAssets = _routeAssets;
    }
    const _transactions = json.transactions;
    if (_transactions) {
      for (const item of _transactions) {
        const m = Transaction.initialize();
        TransactionJSON._readMessage(m, item);
        msg.transactions.push(m);
      }
    }
    const _routePrice = json.routePrice ?? json.route_price;
    if (_routePrice) {
      msg.routePrice = _routePrice;
    }
    const _priceImpact = json.priceImpact ?? json.price_impact;
    if (_priceImpact) {
      msg.priceImpact = _priceImpact;
    }
    const _followId = json.followId ?? json.follow_id;
    if (_followId) {
      msg.followId = _followId;
    }
    const _funds = json.funds;
    if (_funds) {
      msg.funds = _funds;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    return msg;
  },

  State: {
    _: "_",
    Trading: "Trading",
    Rejected: "Rejected",
    Done: "Done",
    /**
     * @private
     */
    _fromInt: function (i: number): Order.State {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Trading";
        }
        case 2: {
          return "Rejected";
        }
        case 3: {
          return "Done";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Order.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Order.State): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Trading": {
          return 1;
        }
        case "Rejected": {
          return 2;
        }
        case "Done": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const ProposalJSON = {
  /**
   * Serializes Proposal to JSON.
   */
  encode: function (msg: Partial<Proposal>): string {
    return JSON.stringify(ProposalJSON._writeMessage(msg));
  },

  /**
   * Deserializes Proposal from JSON.
   */
  decode: function (json: string): Proposal {
    return ProposalJSON._readMessage(
      ProposalJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Proposal with all fields set to their default value.
   */
  initialize: function (): Proposal {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      passedAt: Timestamp.initialize(),
      creator: "",
      assetId: "",
      amount: "",
      action: "",
      data: "",
      votes: [],
      items: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Proposal>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.createdAt) {
      const createdAt = TimestampJSON._writeMessage(msg.createdAt);
      if (Object.keys(createdAt).length > 0) {
        json.createdAt = createdAt;
      }
    }
    if (msg.passedAt) {
      const passedAt = TimestampJSON._writeMessage(msg.passedAt);
      if (Object.keys(passedAt).length > 0) {
        json.passedAt = passedAt;
      }
    }
    if (msg.creator) {
      json.creator = msg.creator;
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.action) {
      json.action = msg.action;
    }
    if (msg.data) {
      json.data = msg.data;
    }
    if (msg.votes?.length) {
      json.votes = msg.votes;
    }
    if (msg.items?.length) {
      json.items = msg.items.map(ProposalJSON.Item._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Proposal, json: any): Proposal {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _createdAt);
      msg.createdAt = m;
    }
    const _passedAt = json.passedAt ?? json.passed_at;
    if (_passedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _passedAt);
      msg.passedAt = m;
    }
    const _creator = json.creator;
    if (_creator) {
      msg.creator = _creator;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _action = json.action;
    if (_action) {
      msg.action = _action;
    }
    const _data = json.data;
    if (_data) {
      msg.data = _data;
    }
    const _votes = json.votes;
    if (_votes) {
      msg.votes = _votes;
    }
    const _items = json.items;
    if (_items) {
      for (const item of _items) {
        const m = Proposal.Item.initialize();
        ProposalJSON.Item._readMessage(m, item);
        msg.items.push(m);
      }
    }
    return msg;
  },

  Item: {
    /**
     * Serializes Proposal.Item to JSON.
     */
    encode: function (msg: Partial<Proposal.Item>): string {
      return JSON.stringify(ProposalJSON.Item._writeMessage(msg));
    },

    /**
     * Deserializes Proposal.Item from JSON.
     */
    decode: function (json: string): Proposal.Item {
      return ProposalJSON.Item._readMessage(
        ProposalJSON.Item.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes Proposal.Item with all fields set to their default value.
     */
    initialize: function (): Proposal.Item {
      return {
        key: "",
        value: "",
        hint: "",
        action: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Proposal.Item>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json.key = msg.key;
      }
      if (msg.value) {
        json.value = msg.value;
      }
      if (msg.hint) {
        json.hint = msg.hint;
      }
      if (msg.action) {
        json.action = msg.action;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (msg: Proposal.Item, json: any): Proposal.Item {
      const _key = json.key;
      if (_key) {
        msg.key = _key;
      }
      const _value = json.value;
      if (_value) {
        msg.value = _value;
      }
      const _hint = json.hint;
      if (_hint) {
        msg.hint = _hint;
      }
      const _action = json.action;
      if (_action) {
        msg.action = _action;
      }
      return msg;
    },
  },
};

export const RoomJSON = {
  /**
   * Serializes Room to JSON.
   */
  encode: function (msg: Partial<Room>): string {
    return JSON.stringify(RoomJSON._writeMessage(msg));
  },

  /**
   * Deserializes Room from JSON.
   */
  decode: function (json: string): Room {
    return RoomJSON._readMessage(RoomJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Room with all fields set to their default value.
   */
  initialize: function (): Room {
    return {
      id: "",
      baseAssetId: "",
      quoteAssetId: "",
      admins: [],
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Room>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.baseAssetId) {
      json.baseAssetId = msg.baseAssetId;
    }
    if (msg.quoteAssetId) {
      json.quoteAssetId = msg.quoteAssetId;
    }
    if (msg.admins?.length) {
      json.admins = msg.admins;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Room, json: any): Room {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _baseAssetId = json.baseAssetId ?? json.base_asset_id;
    if (_baseAssetId) {
      msg.baseAssetId = _baseAssetId;
    }
    const _quoteAssetId = json.quoteAssetId ?? json.quote_asset_id;
    if (_quoteAssetId) {
      msg.quoteAssetId = _quoteAssetId;
    }
    const _admins = json.admins;
    if (_admins) {
      msg.admins = _admins;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    return msg;
  },
};

export const UniswapReqJSON = {
  /**
   * Serializes UniswapReq to JSON.
   */
  encode: function (_msg?: Partial<UniswapReq>): string {
    return "{}";
  },

  /**
   * Deserializes UniswapReq from JSON.
   */
  decode: function (_json?: string): UniswapReq {
    return {};
  },

  /**
   * Initializes UniswapReq with all fields set to their default value.
   */
  initialize: function (): UniswapReq {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg: Partial<UniswapReq>): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: UniswapReq, _json: any): UniswapReq {
    return msg;
  },

  ListAssets: {
    /**
     * Serializes UniswapReq.ListAssets to JSON.
     */
    encode: function (_msg?: Partial<UniswapReq.ListAssets>): string {
      return "{}";
    },

    /**
     * Deserializes UniswapReq.ListAssets from JSON.
     */
    decode: function (_json?: string): UniswapReq.ListAssets {
      return {};
    },

    /**
     * Initializes UniswapReq.ListAssets with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ListAssets {
      return {};
    },

    /**
     * @private
     */
    _writeMessage: function (
      _msg: Partial<UniswapReq.ListAssets>
    ): Record<string, unknown> {
      return {};
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListAssets,
      _json: any
    ): UniswapReq.ListAssets {
      return msg;
    },
  },

  ReadAsset: {
    /**
     * Serializes UniswapReq.ReadAsset to JSON.
     */
    encode: function (msg: Partial<UniswapReq.ReadAsset>): string {
      return JSON.stringify(UniswapReqJSON.ReadAsset._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadAsset from JSON.
     */
    decode: function (json: string): UniswapReq.ReadAsset {
      return UniswapReqJSON.ReadAsset._readMessage(
        UniswapReqJSON.ReadAsset.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.ReadAsset with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadAsset {
      return {
        assetId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadAsset>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.assetId) {
        json.assetId = msg.assetId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadAsset,
      json: any
    ): UniswapReq.ReadAsset {
      const _assetId = json.assetId ?? json.asset_id;
      if (_assetId) {
        msg.assetId = _assetId;
      }
      return msg;
    },
  },

  ReadPair: {
    /**
     * Serializes UniswapReq.ReadPair to JSON.
     */
    encode: function (msg: Partial<UniswapReq.ReadPair>): string {
      return JSON.stringify(UniswapReqJSON.ReadPair._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadPair from JSON.
     */
    decode: function (json: string): UniswapReq.ReadPair {
      return UniswapReqJSON.ReadPair._readMessage(
        UniswapReqJSON.ReadPair.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.ReadPair with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadPair {
      return {
        baseAssetId: "",
        quoteAssetId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadPair>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.baseAssetId) {
        json.baseAssetId = msg.baseAssetId;
      }
      if (msg.quoteAssetId) {
        json.quoteAssetId = msg.quoteAssetId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadPair,
      json: any
    ): UniswapReq.ReadPair {
      const _baseAssetId = json.baseAssetId ?? json.base_asset_id;
      if (_baseAssetId) {
        msg.baseAssetId = _baseAssetId;
      }
      const _quoteAssetId = json.quoteAssetId ?? json.quote_asset_id;
      if (_quoteAssetId) {
        msg.quoteAssetId = _quoteAssetId;
      }
      return msg;
    },
  },

  ListPairs: {
    /**
     * Serializes UniswapReq.ListPairs to JSON.
     */
    encode: function (msg: Partial<UniswapReq.ListPairs>): string {
      return JSON.stringify(UniswapReqJSON.ListPairs._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ListPairs from JSON.
     */
    decode: function (json: string): UniswapReq.ListPairs {
      return UniswapReqJSON.ListPairs._readMessage(
        UniswapReqJSON.ListPairs.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.ListPairs with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ListPairs {
      return {
        brokerId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ListPairs>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.brokerId) {
        json.brokerId = msg.brokerId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListPairs,
      json: any
    ): UniswapReq.ListPairs {
      const _brokerId = json.brokerId ?? json.broker_id;
      if (_brokerId) {
        msg.brokerId = _brokerId;
      }
      return msg;
    },
  },

  ReadDeposit: {
    /**
     * Serializes UniswapReq.ReadDeposit to JSON.
     */
    encode: function (msg: Partial<UniswapReq.ReadDeposit>): string {
      return JSON.stringify(UniswapReqJSON.ReadDeposit._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadDeposit from JSON.
     */
    decode: function (json: string): UniswapReq.ReadDeposit {
      return UniswapReqJSON.ReadDeposit._readMessage(
        UniswapReqJSON.ReadDeposit.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.ReadDeposit with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadDeposit {
      return {
        followId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadDeposit>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.followId) {
        json.followId = msg.followId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadDeposit,
      json: any
    ): UniswapReq.ReadDeposit {
      const _followId = json.followId ?? json.follow_id;
      if (_followId) {
        msg.followId = _followId;
      }
      return msg;
    },
  },

  ReadTransaction: {
    /**
     * Serializes UniswapReq.ReadTransaction to JSON.
     */
    encode: function (msg: Partial<UniswapReq.ReadTransaction>): string {
      return JSON.stringify(UniswapReqJSON.ReadTransaction._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadTransaction from JSON.
     */
    decode: function (json: string): UniswapReq.ReadTransaction {
      return UniswapReqJSON.ReadTransaction._readMessage(
        UniswapReqJSON.ReadTransaction.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.ReadTransaction with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadTransaction {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        followId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadTransaction>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.baseAssetId) {
        json.baseAssetId = msg.baseAssetId;
      }
      if (msg.quoteAssetId) {
        json.quoteAssetId = msg.quoteAssetId;
      }
      if (msg.followId) {
        json.followId = msg.followId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadTransaction,
      json: any
    ): UniswapReq.ReadTransaction {
      const _baseAssetId = json.baseAssetId ?? json.base_asset_id;
      if (_baseAssetId) {
        msg.baseAssetId = _baseAssetId;
      }
      const _quoteAssetId = json.quoteAssetId ?? json.quote_asset_id;
      if (_quoteAssetId) {
        msg.quoteAssetId = _quoteAssetId;
      }
      const _followId = json.followId ?? json.follow_id;
      if (_followId) {
        msg.followId = _followId;
      }
      return msg;
    },
  },

  ReadOrder: {
    /**
     * Serializes UniswapReq.ReadOrder to JSON.
     */
    encode: function (msg: Partial<UniswapReq.ReadOrder>): string {
      return JSON.stringify(UniswapReqJSON.ReadOrder._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadOrder from JSON.
     */
    decode: function (json: string): UniswapReq.ReadOrder {
      return UniswapReqJSON.ReadOrder._readMessage(
        UniswapReqJSON.ReadOrder.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.ReadOrder with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ReadOrder {
      return {
        followId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ReadOrder>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.followId) {
        json.followId = msg.followId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadOrder,
      json: any
    ): UniswapReq.ReadOrder {
      const _followId = json.followId ?? json.follow_id;
      if (_followId) {
        msg.followId = _followId;
      }
      return msg;
    },
  },

  PreOrder: {
    /**
     * Serializes UniswapReq.PreOrder to JSON.
     */
    encode: function (msg: Partial<UniswapReq.PreOrder>): string {
      return JSON.stringify(UniswapReqJSON.PreOrder._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.PreOrder from JSON.
     */
    decode: function (json: string): UniswapReq.PreOrder {
      return UniswapReqJSON.PreOrder._readMessage(
        UniswapReqJSON.PreOrder.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.PreOrder with all fields set to their default value.
     */
    initialize: function (): UniswapReq.PreOrder {
      return {
        payAssetId: "",
        fillAssetId: "",
        payAmount: "",
        fillAmount: "",
        minAmount: "",
        funds: "",
        amount: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.PreOrder>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.payAssetId) {
        json.payAssetId = msg.payAssetId;
      }
      if (msg.fillAssetId) {
        json.fillAssetId = msg.fillAssetId;
      }
      if (msg.payAmount) {
        json.payAmount = msg.payAmount;
      }
      if (msg.fillAmount) {
        json.fillAmount = msg.fillAmount;
      }
      if (msg.minAmount) {
        json.minAmount = msg.minAmount;
      }
      if (msg.funds) {
        json.funds = msg.funds;
      }
      if (msg.amount) {
        json.amount = msg.amount;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.PreOrder,
      json: any
    ): UniswapReq.PreOrder {
      const _payAssetId = json.payAssetId ?? json.pay_asset_id;
      if (_payAssetId) {
        msg.payAssetId = _payAssetId;
      }
      const _fillAssetId = json.fillAssetId ?? json.fill_asset_id;
      if (_fillAssetId) {
        msg.fillAssetId = _fillAssetId;
      }
      const _payAmount = json.payAmount ?? json.pay_amount;
      if (_payAmount) {
        msg.payAmount = _payAmount;
      }
      const _fillAmount = json.fillAmount ?? json.fill_amount;
      if (_fillAmount) {
        msg.fillAmount = _fillAmount;
      }
      const _minAmount = json.minAmount ?? json.min_amount;
      if (_minAmount) {
        msg.minAmount = _minAmount;
      }
      const _funds = json.funds;
      if (_funds) {
        msg.funds = _funds;
      }
      const _amount = json.amount;
      if (_amount) {
        msg.amount = _amount;
      }
      return msg;
    },
  },

  ListTransactions: {
    /**
     * Serializes UniswapReq.ListTransactions to JSON.
     */
    encode: function (msg: Partial<UniswapReq.ListTransactions>): string {
      return JSON.stringify(UniswapReqJSON.ListTransactions._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ListTransactions from JSON.
     */
    decode: function (json: string): UniswapReq.ListTransactions {
      return UniswapReqJSON.ListTransactions._readMessage(
        UniswapReqJSON.ListTransactions.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.ListTransactions with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ListTransactions {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        type: "",
        cursor: "",
        limit: 0n,
        userId: "",
        order: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ListTransactions>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.baseAssetId) {
        json.baseAssetId = msg.baseAssetId;
      }
      if (msg.quoteAssetId) {
        json.quoteAssetId = msg.quoteAssetId;
      }
      if (msg.type) {
        json.type = msg.type;
      }
      if (msg.cursor) {
        json.cursor = msg.cursor;
      }
      if (msg.limit) {
        json.limit = msg.limit.toString();
      }
      if (msg.userId) {
        json.userId = msg.userId;
      }
      if (msg.order) {
        json.order = msg.order;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListTransactions,
      json: any
    ): UniswapReq.ListTransactions {
      const _baseAssetId = json.baseAssetId ?? json.base_asset_id;
      if (_baseAssetId) {
        msg.baseAssetId = _baseAssetId;
      }
      const _quoteAssetId = json.quoteAssetId ?? json.quote_asset_id;
      if (_quoteAssetId) {
        msg.quoteAssetId = _quoteAssetId;
      }
      const _type = json.type;
      if (_type) {
        msg.type = _type;
      }
      const _cursor = json.cursor;
      if (_cursor) {
        msg.cursor = _cursor;
      }
      const _limit = json.limit;
      if (_limit) {
        msg.limit = BigInt(_limit);
      }
      const _userId = json.userId ?? json.user_id;
      if (_userId) {
        msg.userId = _userId;
      }
      const _order = json.order;
      if (_order) {
        msg.order = _order;
      }
      return msg;
    },
  },

  UpdateRoom: {
    /**
     * Serializes UniswapReq.UpdateRoom to JSON.
     */
    encode: function (msg: Partial<UniswapReq.UpdateRoom>): string {
      return JSON.stringify(UniswapReqJSON.UpdateRoom._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.UpdateRoom from JSON.
     */
    decode: function (json: string): UniswapReq.UpdateRoom {
      return UniswapReqJSON.UpdateRoom._readMessage(
        UniswapReqJSON.UpdateRoom.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.UpdateRoom with all fields set to their default value.
     */
    initialize: function (): UniswapReq.UpdateRoom {
      return {
        id: "",
        baseAssetId: "",
        quoteAssetId: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.UpdateRoom>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.id) {
        json.id = msg.id;
      }
      if (msg.baseAssetId) {
        json.baseAssetId = msg.baseAssetId;
      }
      if (msg.quoteAssetId) {
        json.quoteAssetId = msg.quoteAssetId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.UpdateRoom,
      json: any
    ): UniswapReq.UpdateRoom {
      const _id = json.id;
      if (_id) {
        msg.id = _id;
      }
      const _baseAssetId = json.baseAssetId ?? json.base_asset_id;
      if (_baseAssetId) {
        msg.baseAssetId = _baseAssetId;
      }
      const _quoteAssetId = json.quoteAssetId ?? json.quote_asset_id;
      if (_quoteAssetId) {
        msg.quoteAssetId = _quoteAssetId;
      }
      return msg;
    },
  },

  FindRoom: {
    /**
     * Serializes UniswapReq.FindRoom to JSON.
     */
    encode: function (msg: Partial<UniswapReq.FindRoom>): string {
      return JSON.stringify(UniswapReqJSON.FindRoom._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.FindRoom from JSON.
     */
    decode: function (json: string): UniswapReq.FindRoom {
      return UniswapReqJSON.FindRoom._readMessage(
        UniswapReqJSON.FindRoom.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.FindRoom with all fields set to their default value.
     */
    initialize: function (): UniswapReq.FindRoom {
      return {
        id: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.FindRoom>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.id) {
        json.id = msg.id;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.FindRoom,
      json: any
    ): UniswapReq.FindRoom {
      const _id = json.id;
      if (_id) {
        msg.id = _id;
      }
      return msg;
    },
  },

  ListProposals: {
    /**
     * Serializes UniswapReq.ListProposals to JSON.
     */
    encode: function (msg: Partial<UniswapReq.ListProposals>): string {
      return JSON.stringify(UniswapReqJSON.ListProposals._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ListProposals from JSON.
     */
    decode: function (json: string): UniswapReq.ListProposals {
      return UniswapReqJSON.ListProposals._readMessage(
        UniswapReqJSON.ListProposals.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.ListProposals with all fields set to their default value.
     */
    initialize: function (): UniswapReq.ListProposals {
      return {
        cursor: "",
        limit: 0n,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.ListProposals>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.cursor) {
        json.cursor = msg.cursor;
      }
      if (msg.limit) {
        json.limit = msg.limit.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListProposals,
      json: any
    ): UniswapReq.ListProposals {
      const _cursor = json.cursor;
      if (_cursor) {
        msg.cursor = _cursor;
      }
      const _limit = json.limit;
      if (_limit) {
        msg.limit = BigInt(_limit);
      }
      return msg;
    },
  },

  FindProposal: {
    /**
     * Serializes UniswapReq.FindProposal to JSON.
     */
    encode: function (msg: Partial<UniswapReq.FindProposal>): string {
      return JSON.stringify(UniswapReqJSON.FindProposal._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.FindProposal from JSON.
     */
    decode: function (json: string): UniswapReq.FindProposal {
      return UniswapReqJSON.FindProposal._readMessage(
        UniswapReqJSON.FindProposal.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapReq.FindProposal with all fields set to their default value.
     */
    initialize: function (): UniswapReq.FindProposal {
      return {
        id: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapReq.FindProposal>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.id) {
        json.id = msg.id;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.FindProposal,
      json: any
    ): UniswapReq.FindProposal {
      const _id = json.id;
      if (_id) {
        msg.id = _id;
      }
      return msg;
    },
  },
};

export const UniswapRespJSON = {
  /**
   * Serializes UniswapResp to JSON.
   */
  encode: function (_msg?: Partial<UniswapResp>): string {
    return "{}";
  },

  /**
   * Deserializes UniswapResp from JSON.
   */
  decode: function (_json?: string): UniswapResp {
    return {};
  },

  /**
   * Initializes UniswapResp with all fields set to their default value.
   */
  initialize: function (): UniswapResp {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<UniswapResp>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: UniswapResp, _json: any): UniswapResp {
    return msg;
  },

  ListAssets: {
    /**
     * Serializes UniswapResp.ListAssets to JSON.
     */
    encode: function (msg: Partial<UniswapResp.ListAssets>): string {
      return JSON.stringify(UniswapRespJSON.ListAssets._writeMessage(msg));
    },

    /**
     * Deserializes UniswapResp.ListAssets from JSON.
     */
    decode: function (json: string): UniswapResp.ListAssets {
      return UniswapRespJSON.ListAssets._readMessage(
        UniswapRespJSON.ListAssets.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapResp.ListAssets with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListAssets {
      return {
        assets: [],
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListAssets>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.assets?.length) {
        json.assets = msg.assets.map(AssetJSON._writeMessage);
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListAssets,
      json: any
    ): UniswapResp.ListAssets {
      const _assets = json.assets;
      if (_assets) {
        for (const item of _assets) {
          const m = Asset.initialize();
          AssetJSON._readMessage(m, item);
          msg.assets.push(m);
        }
      }
      return msg;
    },
  },

  ListPairs: {
    /**
     * Serializes UniswapResp.ListPairs to JSON.
     */
    encode: function (msg: Partial<UniswapResp.ListPairs>): string {
      return JSON.stringify(UniswapRespJSON.ListPairs._writeMessage(msg));
    },

    /**
     * Deserializes UniswapResp.ListPairs from JSON.
     */
    decode: function (json: string): UniswapResp.ListPairs {
      return UniswapRespJSON.ListPairs._readMessage(
        UniswapRespJSON.ListPairs.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapResp.ListPairs with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListPairs {
      return {
        pairs: [],
        pairCount: 0,
        transactionCount24h: 0,
        liquidityValue: "",
        volume24h: "",
        fee24h: "",
        ts: 0,
        whitelists: [],
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListPairs>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.pairs?.length) {
        json.pairs = msg.pairs.map(PairJSON._writeMessage);
      }
      if (msg.pairCount) {
        json.pairCount = msg.pairCount;
      }
      if (msg.transactionCount24h) {
        json.transactionCount24h = msg.transactionCount24h;
      }
      if (msg.liquidityValue) {
        json.liquidityValue = msg.liquidityValue;
      }
      if (msg.volume24h) {
        json.volume24h = msg.volume24h;
      }
      if (msg.fee24h) {
        json.fee24h = msg.fee24h;
      }
      if (msg.ts) {
        json.ts = msg.ts;
      }
      if (msg.whitelists?.length) {
        json.whitelists = msg.whitelists;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListPairs,
      json: any
    ): UniswapResp.ListPairs {
      const _pairs = json.pairs;
      if (_pairs) {
        for (const item of _pairs) {
          const m = Pair.initialize();
          PairJSON._readMessage(m, item);
          msg.pairs.push(m);
        }
      }
      const _pairCount = json.pairCount ?? json.pair_count;
      if (_pairCount) {
        msg.pairCount = _pairCount;
      }
      const _transactionCount24h =
        json.transactionCount24h ?? json.transaction_count_24h;
      if (_transactionCount24h) {
        msg.transactionCount24h = _transactionCount24h;
      }
      const _liquidityValue = json.liquidityValue ?? json.liquidity_value;
      if (_liquidityValue) {
        msg.liquidityValue = _liquidityValue;
      }
      const _volume24h = json.volume24h ?? json.volume_24h;
      if (_volume24h) {
        msg.volume24h = _volume24h;
      }
      const _fee24h = json.fee24h ?? json.fee_24h;
      if (_fee24h) {
        msg.fee24h = _fee24h;
      }
      const _ts = json.ts;
      if (_ts) {
        msg.ts = _ts;
      }
      const _whitelists = json.whitelists;
      if (_whitelists) {
        msg.whitelists = _whitelists;
      }
      return msg;
    },
  },

  ListTransactionsSummary: {
    /**
     * Serializes UniswapResp.ListTransactionsSummary to JSON.
     */
    encode: function (
      msg: Partial<UniswapResp.ListTransactionsSummary>
    ): string {
      return JSON.stringify(
        UniswapRespJSON.ListTransactionsSummary._writeMessage(msg)
      );
    },

    /**
     * Deserializes UniswapResp.ListTransactionsSummary from JSON.
     */
    decode: function (json: string): UniswapResp.ListTransactionsSummary {
      return UniswapRespJSON.ListTransactionsSummary._readMessage(
        UniswapRespJSON.ListTransactionsSummary.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapResp.ListTransactionsSummary with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListTransactionsSummary {
      return {
        totalAddBaseAmount: "",
        totalAddQuoteAmount: "",
        totalRemoveBaseAmount: "",
        totalRemoveQuoteAmount: "",
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListTransactionsSummary>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.totalAddBaseAmount) {
        json.totalAddBaseAmount = msg.totalAddBaseAmount;
      }
      if (msg.totalAddQuoteAmount) {
        json.totalAddQuoteAmount = msg.totalAddQuoteAmount;
      }
      if (msg.totalRemoveBaseAmount) {
        json.totalRemoveBaseAmount = msg.totalRemoveBaseAmount;
      }
      if (msg.totalRemoveQuoteAmount) {
        json.totalRemoveQuoteAmount = msg.totalRemoveQuoteAmount;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListTransactionsSummary,
      json: any
    ): UniswapResp.ListTransactionsSummary {
      const _totalAddBaseAmount =
        json.totalAddBaseAmount ?? json.total_add_base_amount;
      if (_totalAddBaseAmount) {
        msg.totalAddBaseAmount = _totalAddBaseAmount;
      }
      const _totalAddQuoteAmount =
        json.totalAddQuoteAmount ?? json.total_add_quote_amount;
      if (_totalAddQuoteAmount) {
        msg.totalAddQuoteAmount = _totalAddQuoteAmount;
      }
      const _totalRemoveBaseAmount =
        json.totalRemoveBaseAmount ?? json.total_remove_base_amount;
      if (_totalRemoveBaseAmount) {
        msg.totalRemoveBaseAmount = _totalRemoveBaseAmount;
      }
      const _totalRemoveQuoteAmount =
        json.totalRemoveQuoteAmount ?? json.total_remove_quote_amount;
      if (_totalRemoveQuoteAmount) {
        msg.totalRemoveQuoteAmount = _totalRemoveQuoteAmount;
      }
      return msg;
    },
  },

  ListTransactions: {
    /**
     * Serializes UniswapResp.ListTransactions to JSON.
     */
    encode: function (msg: Partial<UniswapResp.ListTransactions>): string {
      return JSON.stringify(
        UniswapRespJSON.ListTransactions._writeMessage(msg)
      );
    },

    /**
     * Deserializes UniswapResp.ListTransactions from JSON.
     */
    decode: function (json: string): UniswapResp.ListTransactions {
      return UniswapRespJSON.ListTransactions._readMessage(
        UniswapRespJSON.ListTransactions.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapResp.ListTransactions with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListTransactions {
      return {
        transactions: [],
        pagination: Pagination.initialize(),
        summary: UniswapResp.ListTransactionsSummary.initialize(),
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListTransactions>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.transactions?.length) {
        json.transactions = msg.transactions.map(TransactionJSON._writeMessage);
      }
      if (msg.pagination) {
        const pagination = PaginationJSON._writeMessage(msg.pagination);
        if (Object.keys(pagination).length > 0) {
          json.pagination = pagination;
        }
      }
      if (msg.summary) {
        const summary = UniswapRespJSON.ListTransactionsSummary._writeMessage(
          msg.summary
        );
        if (Object.keys(summary).length > 0) {
          json.summary = summary;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListTransactions,
      json: any
    ): UniswapResp.ListTransactions {
      const _transactions = json.transactions;
      if (_transactions) {
        for (const item of _transactions) {
          const m = Transaction.initialize();
          TransactionJSON._readMessage(m, item);
          msg.transactions.push(m);
        }
      }
      const _pagination = json.pagination;
      if (_pagination) {
        const m = Pagination.initialize();
        PaginationJSON._readMessage(m, _pagination);
        msg.pagination = m;
      }
      const _summary = json.summary;
      if (_summary) {
        const m = UniswapResp.ListTransactionsSummary.initialize();
        UniswapRespJSON.ListTransactionsSummary._readMessage(m, _summary);
        msg.summary = m;
      }
      return msg;
    },
  },

  ListProposals: {
    /**
     * Serializes UniswapResp.ListProposals to JSON.
     */
    encode: function (msg: Partial<UniswapResp.ListProposals>): string {
      return JSON.stringify(UniswapRespJSON.ListProposals._writeMessage(msg));
    },

    /**
     * Deserializes UniswapResp.ListProposals from JSON.
     */
    decode: function (json: string): UniswapResp.ListProposals {
      return UniswapRespJSON.ListProposals._readMessage(
        UniswapRespJSON.ListProposals.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes UniswapResp.ListProposals with all fields set to their default value.
     */
    initialize: function (): UniswapResp.ListProposals {
      return {
        proposals: [],
        pagination: Pagination.initialize(),
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<UniswapResp.ListProposals>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.proposals?.length) {
        json.proposals = msg.proposals.map(ProposalJSON._writeMessage);
      }
      if (msg.pagination) {
        const pagination = PaginationJSON._writeMessage(msg.pagination);
        if (Object.keys(pagination).length > 0) {
          json.pagination = pagination;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListProposals,
      json: any
    ): UniswapResp.ListProposals {
      const _proposals = json.proposals;
      if (_proposals) {
        for (const item of _proposals) {
          const m = Proposal.initialize();
          ProposalJSON._readMessage(m, item);
          msg.proposals.push(m);
        }
      }
      const _pagination = json.pagination;
      if (_pagination) {
        const m = Pagination.initialize();
        PaginationJSON._readMessage(m, _pagination);
        msg.pagination = m;
      }
      return msg;
    },
  },
};
