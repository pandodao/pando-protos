// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: fswap/v2/fswap.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface Pagination {
  nextCursor: string;
  hasNext: boolean;
}

export interface Asset {
  id: string;
  name: string;
  symbol: string;
  logo: string;
  chainId: string;
  chain: Asset | null | undefined;
  price: string;
  displaySymbol: string;
  extra: string;
  tag: string;
  priceChange: string;
}

export interface Pair {
  baseAssetId: string;
  quoteAssetId: string;
  baseAmount: string;
  quoteAmount: string;
  share: string;
  liquidity: string;
  liquidityAssetId: string;
  routeId: number;
  feePercent: string;
  maxLiquidity: string;
  baseValue: string;
  quoteValue: string;
  volume24h: string;
  fee24h: string;
  transactionCount24h: number;
  swapMethod: string;
  version: number;
  baseVolume24h: string;
  quoteVolume24h: string;
  netRor24h: string;
  netRor7d: string;
  netRor30d: string;
  profitRate: string;
}

export interface Deposit {
  id: string;
  createdAt: protoscript.Timestamp;
  state: Deposit.State;
  userId: string;
  followId: string;
  baseAssetId: string;
  baseAmount: string;
  quoteAssetId: string;
  quoteAmount: string;
  slippage: string;
}

export declare namespace Deposit {
  export type State = "_" | "Pending" | "Cancelled" | "Done";
}

export interface Transaction {
  id: string;
  createdAt: protoscript.Timestamp;
  userId: string;
  type: Transaction.Type;
  baseAssetId: string;
  quoteAssetId: string;
  baseAmount: string;
  quoteAmount: string;
  feeAssetId: string;
  feeAmount: string;
  payAssetId: string;
  filledAssetId: string;
  funds: string;
  amount: string;
  value: string;
  feeValue: string;
  followId: string;
  liquidity: string;
  groupId: string;
}

export declare namespace Transaction {
  export type Type = "_" | "Add" | "Remove" | "Swap";
}

export interface MultisigGroup {
  members: string[];
  threshold: number;
}

export interface Transfer {
  id: string;
  createdAt: protoscript.Timestamp;
  assetId: string;
  amount: string;
  memo: string;
  receiver: MultisigGroup;
  txHash: string;
}

export interface Order {
  id: string;
  createdAt: protoscript.Timestamp;
  userId: string;
  state: Order.State;
  payAssetId: string;
  fillAssetId: string;
  payAmount: string;
  fillAmount: string;
  minAmount: string;
  routes: string;
  routeAssets: string[];
  transactions: Transaction[];
  routePrice: string;
  priceImpact: string;
  followId: string;
  funds: string;
  amount: string;
  transfers: Transfer[];
}

export declare namespace Order {
  export type State = "_" | "Trading" | "Rejected" | "Done";
}

export interface Proposal {
  id: string;
  createdAt: protoscript.Timestamp;
  passedAt: protoscript.Timestamp;
  creator: string;
  assetId: string;
  amount: string;
  action: string;
  data: string;
  votes: string[];
  items: Proposal.Item[];
}

export declare namespace Proposal {
  export interface Item {
    key: string;
    value: string;
    hint: string;
    action: string;
  }
}

export interface Room {
  id: string;
  baseAssetId: string;
  quoteAssetId: string;
  admins: string[];
  name: string;
}

export interface UniswapReq {}

export declare namespace UniswapReq {
  export interface ListAssets {}

  export interface ReadAsset {
    assetId: string;
  }

  export interface ReadPair {
    baseAssetId: string;
    quoteAssetId: string;
  }

  export interface ListPairs {
    brokerId: string;
  }

  export interface ReadDeposit {
    followId: string;
  }

  export interface ListPendingDeposits {
    limit: number;
  }

  export interface ReadTransaction {
    baseAssetId: string;
    quoteAssetId: string;
    followId: string;
  }

  export interface ReadOrder {
    followId: string;
  }

  export interface PreOrder {
    payAssetId: string;
    fillAssetId: string;
    payAmount: string;
    fillAmount: string;
    minAmount: string;
    /**
     * deprecated
     */
    funds: string;
    /**
     * deprecated
     */
    amount: string;
  }

  export interface ListTransactions {
    baseAssetId: string;
    quoteAssetId: string;
    type: string;
    cursor: string;
    limit: bigint;
    userId: string;
    order: string;
  }

  export interface UpdateRoom {
    id: string;
    baseAssetId: string;
    quoteAssetId: string;
  }

  export interface FindRoom {
    id: string;
  }

  export interface ListProposals {
    cursor: string;
    limit: bigint;
  }

  export interface FindProposal {
    id: string;
  }
}

export interface UniswapResp {}

export declare namespace UniswapResp {
  export interface ListAssets {
    assets: Asset[];
  }

  export interface ListPairs {
    pairs: Pair[];
    pairCount: number;
    transactionCount24h: number;
    liquidityValue: string;
    volume24h: string;
    fee24h: string;
    ts: number;
    whitelists: string[];
  }

  export interface ListTransactionsSummary {
    totalAddBaseAmount: string;
    totalAddQuoteAmount: string;
    totalRemoveBaseAmount: string;
    totalRemoveQuoteAmount: string;
  }

  export interface ListTransactions {
    transactions: Transaction[];
    pagination: Pagination;
    summary: UniswapResp.ListTransactionsSummary;
  }

  export interface ListProposals {
    proposals: Proposal[];
    pagination: Pagination;
  }

  export interface ListPendingDeposits {
    deposits: Deposit[];
  }
}

//========================================//
//        Uniswap Protobuf Client         //
//========================================//

/**
 * ReadAsset 查询 asset 详情
 */
export async function ReadAsset(
  readAsset: UniswapReq.ReadAsset,
  config?: ClientConfiguration,
): Promise<Asset> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ReadAsset",
    UniswapReq.ReadAsset.encode(readAsset),
    config,
  );
  return Asset.decode(response);
}

/**
 * ListAssets 返回 assets 列表
 */
export async function ListAssets(
  listAssets: UniswapReq.ListAssets,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListAssets> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ListAssets",
    UniswapReq.ListAssets.encode(listAssets),
    config,
  );
  return UniswapResp.ListAssets.decode(response);
}

/**
 * ReadPair 读取 pair 详情
 */
export async function ReadPair(
  readPair: UniswapReq.ReadPair,
  config?: ClientConfiguration,
): Promise<Pair> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ReadPair",
    UniswapReq.ReadPair.encode(readPair),
    config,
  );
  return Pair.decode(response);
}

/**
 * ListPairs 读取 pair 列表
 */
export async function ListPairs(
  listPairs: UniswapReq.ListPairs,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListPairs> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ListPairs",
    UniswapReq.ListPairs.encode(listPairs),
    config,
  );
  return UniswapResp.ListPairs.decode(response);
}

/**
 * ReadDeposit 读取充值详情
 */
export async function ReadDeposit(
  readDeposit: UniswapReq.ReadDeposit,
  config?: ClientConfiguration,
): Promise<Deposit> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ReadDeposit",
    UniswapReq.ReadDeposit.encode(readDeposit),
    config,
  );
  return Deposit.decode(response);
}

/**
 * ListPendingDeposites
 */
export async function ListPendingDeposits(
  listPendingDeposits: UniswapReq.ListPendingDeposits,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListPendingDeposits> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ListPendingDeposits",
    UniswapReq.ListPendingDeposits.encode(listPendingDeposits),
    config,
  );
  return UniswapResp.ListPendingDeposits.decode(response);
}

/**
 * ReadTransaction 读取 transaction 详情
 */
export async function ReadTransaction(
  readTransaction: UniswapReq.ReadTransaction,
  config?: ClientConfiguration,
): Promise<Transaction> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ReadTransaction",
    UniswapReq.ReadTransaction.encode(readTransaction),
    config,
  );
  return Transaction.decode(response);
}

/**
 * ListTransactions 返回 transaction 列表
 */
export async function ListTransactions(
  listTransactions: UniswapReq.ListTransactions,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListTransactions> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ListTransactions",
    UniswapReq.ListTransactions.encode(listTransactions),
    config,
  );
  return UniswapResp.ListTransactions.decode(response);
}

/**
 * ReadOrder 读取 order 详情
 */
export async function ReadOrder(
  readOrder: UniswapReq.ReadOrder,
  config?: ClientConfiguration,
): Promise<Order> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ReadOrder",
    UniswapReq.ReadOrder.encode(readOrder),
    config,
  );
  return Order.decode(response);
}

/**
 * PreOrder 预下单
 */
export async function PreOrder(
  preOrder: UniswapReq.PreOrder,
  config?: ClientConfiguration,
): Promise<Order> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/PreOrder",
    UniswapReq.PreOrder.encode(preOrder),
    config,
  );
  return Order.decode(response);
}

/**
 * UpdateRoom 设置小群默认交易对
 */
export async function UpdateRoom(
  updateRoom: UniswapReq.UpdateRoom,
  config?: ClientConfiguration,
): Promise<Room> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/UpdateRoom",
    UniswapReq.UpdateRoom.encode(updateRoom),
    config,
  );
  return Room.decode(response);
}

/**
 * FindRoom 查看小群默认交易对
 */
export async function FindRoom(
  findRoom: UniswapReq.FindRoom,
  config?: ClientConfiguration,
): Promise<Room> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/FindRoom",
    UniswapReq.FindRoom.encode(findRoom),
    config,
  );
  return Room.decode(response);
}

/**
 * proposals
 */
export async function FindProposal(
  findProposal: UniswapReq.FindProposal,
  config?: ClientConfiguration,
): Promise<Proposal> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/FindProposal",
    UniswapReq.FindProposal.encode(findProposal),
    config,
  );
  return Proposal.decode(response);
}

export async function ListProposals(
  listProposals: UniswapReq.ListProposals,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListProposals> {
  const response = await PBrequest(
    "/fox.fswap.v2.service.Uniswap/ListProposals",
    UniswapReq.ListProposals.encode(listProposals),
    config,
  );
  return UniswapResp.ListProposals.decode(response);
}

//========================================//
//          Uniswap JSON Client           //
//========================================//

/**
 * ReadAsset 查询 asset 详情
 */
export async function ReadAssetJSON(
  readAsset: UniswapReq.ReadAsset,
  config?: ClientConfiguration,
): Promise<Asset> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ReadAsset",
    UniswapReqJSON.ReadAsset.encode(readAsset),
    config,
  );
  return AssetJSON.decode(response);
}

/**
 * ListAssets 返回 assets 列表
 */
export async function ListAssetsJSON(
  listAssets: UniswapReq.ListAssets,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListAssets> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ListAssets",
    UniswapReqJSON.ListAssets.encode(listAssets),
    config,
  );
  return UniswapRespJSON.ListAssets.decode(response);
}

/**
 * ReadPair 读取 pair 详情
 */
export async function ReadPairJSON(
  readPair: UniswapReq.ReadPair,
  config?: ClientConfiguration,
): Promise<Pair> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ReadPair",
    UniswapReqJSON.ReadPair.encode(readPair),
    config,
  );
  return PairJSON.decode(response);
}

/**
 * ListPairs 读取 pair 列表
 */
export async function ListPairsJSON(
  listPairs: UniswapReq.ListPairs,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListPairs> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ListPairs",
    UniswapReqJSON.ListPairs.encode(listPairs),
    config,
  );
  return UniswapRespJSON.ListPairs.decode(response);
}

/**
 * ReadDeposit 读取充值详情
 */
export async function ReadDepositJSON(
  readDeposit: UniswapReq.ReadDeposit,
  config?: ClientConfiguration,
): Promise<Deposit> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ReadDeposit",
    UniswapReqJSON.ReadDeposit.encode(readDeposit),
    config,
  );
  return DepositJSON.decode(response);
}

/**
 * ListPendingDeposites
 */
export async function ListPendingDepositsJSON(
  listPendingDeposits: UniswapReq.ListPendingDeposits,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListPendingDeposits> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ListPendingDeposits",
    UniswapReqJSON.ListPendingDeposits.encode(listPendingDeposits),
    config,
  );
  return UniswapRespJSON.ListPendingDeposits.decode(response);
}

/**
 * ReadTransaction 读取 transaction 详情
 */
export async function ReadTransactionJSON(
  readTransaction: UniswapReq.ReadTransaction,
  config?: ClientConfiguration,
): Promise<Transaction> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ReadTransaction",
    UniswapReqJSON.ReadTransaction.encode(readTransaction),
    config,
  );
  return TransactionJSON.decode(response);
}

/**
 * ListTransactions 返回 transaction 列表
 */
export async function ListTransactionsJSON(
  listTransactions: UniswapReq.ListTransactions,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListTransactions> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ListTransactions",
    UniswapReqJSON.ListTransactions.encode(listTransactions),
    config,
  );
  return UniswapRespJSON.ListTransactions.decode(response);
}

/**
 * ReadOrder 读取 order 详情
 */
export async function ReadOrderJSON(
  readOrder: UniswapReq.ReadOrder,
  config?: ClientConfiguration,
): Promise<Order> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ReadOrder",
    UniswapReqJSON.ReadOrder.encode(readOrder),
    config,
  );
  return OrderJSON.decode(response);
}

/**
 * PreOrder 预下单
 */
export async function PreOrderJSON(
  preOrder: UniswapReq.PreOrder,
  config?: ClientConfiguration,
): Promise<Order> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/PreOrder",
    UniswapReqJSON.PreOrder.encode(preOrder),
    config,
  );
  return OrderJSON.decode(response);
}

/**
 * UpdateRoom 设置小群默认交易对
 */
export async function UpdateRoomJSON(
  updateRoom: UniswapReq.UpdateRoom,
  config?: ClientConfiguration,
): Promise<Room> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/UpdateRoom",
    UniswapReqJSON.UpdateRoom.encode(updateRoom),
    config,
  );
  return RoomJSON.decode(response);
}

/**
 * FindRoom 查看小群默认交易对
 */
export async function FindRoomJSON(
  findRoom: UniswapReq.FindRoom,
  config?: ClientConfiguration,
): Promise<Room> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/FindRoom",
    UniswapReqJSON.FindRoom.encode(findRoom),
    config,
  );
  return RoomJSON.decode(response);
}

/**
 * proposals
 */
export async function FindProposalJSON(
  findProposal: UniswapReq.FindProposal,
  config?: ClientConfiguration,
): Promise<Proposal> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/FindProposal",
    UniswapReqJSON.FindProposal.encode(findProposal),
    config,
  );
  return ProposalJSON.decode(response);
}

export async function ListProposalsJSON(
  listProposals: UniswapReq.ListProposals,
  config?: ClientConfiguration,
): Promise<UniswapResp.ListProposals> {
  const response = await JSONrequest(
    "/fox.fswap.v2.service.Uniswap/ListProposals",
    UniswapReqJSON.ListProposals.encode(listProposals),
    config,
  );
  return UniswapRespJSON.ListProposals.decode(response);
}

//========================================//
//                Uniswap                 //
//========================================//

export interface Uniswap<Context = unknown> {
  /**
   * ReadAsset 查询 asset 详情
   */
  ReadAsset: (
    readAsset: UniswapReq.ReadAsset,
    context: Context,
  ) => Promise<Asset> | Asset;
  /**
   * ListAssets 返回 assets 列表
   */
  ListAssets: (
    listAssets: UniswapReq.ListAssets,
    context: Context,
  ) => Promise<UniswapResp.ListAssets> | UniswapResp.ListAssets;
  /**
   * ReadPair 读取 pair 详情
   */
  ReadPair: (
    readPair: UniswapReq.ReadPair,
    context: Context,
  ) => Promise<Pair> | Pair;
  /**
   * ListPairs 读取 pair 列表
   */
  ListPairs: (
    listPairs: UniswapReq.ListPairs,
    context: Context,
  ) => Promise<UniswapResp.ListPairs> | UniswapResp.ListPairs;
  /**
   * ReadDeposit 读取充值详情
   */
  ReadDeposit: (
    readDeposit: UniswapReq.ReadDeposit,
    context: Context,
  ) => Promise<Deposit> | Deposit;
  /**
   * ListPendingDeposites
   */
  ListPendingDeposits: (
    listPendingDeposits: UniswapReq.ListPendingDeposits,
    context: Context,
  ) =>
    | Promise<UniswapResp.ListPendingDeposits>
    | UniswapResp.ListPendingDeposits;
  /**
   * ReadTransaction 读取 transaction 详情
   */
  ReadTransaction: (
    readTransaction: UniswapReq.ReadTransaction,
    context: Context,
  ) => Promise<Transaction> | Transaction;
  /**
   * ListTransactions 返回 transaction 列表
   */
  ListTransactions: (
    listTransactions: UniswapReq.ListTransactions,
    context: Context,
  ) => Promise<UniswapResp.ListTransactions> | UniswapResp.ListTransactions;
  /**
   * ReadOrder 读取 order 详情
   */
  ReadOrder: (
    readOrder: UniswapReq.ReadOrder,
    context: Context,
  ) => Promise<Order> | Order;
  /**
   * PreOrder 预下单
   */
  PreOrder: (
    preOrder: UniswapReq.PreOrder,
    context: Context,
  ) => Promise<Order> | Order;
  /**
   * UpdateRoom 设置小群默认交易对
   */
  UpdateRoom: (
    updateRoom: UniswapReq.UpdateRoom,
    context: Context,
  ) => Promise<Room> | Room;
  /**
   * FindRoom 查看小群默认交易对
   */
  FindRoom: (
    findRoom: UniswapReq.FindRoom,
    context: Context,
  ) => Promise<Room> | Room;
  /**
   * proposals
   */
  FindProposal: (
    findProposal: UniswapReq.FindProposal,
    context: Context,
  ) => Promise<Proposal> | Proposal;
  ListProposals: (
    listProposals: UniswapReq.ListProposals,
    context: Context,
  ) => Promise<UniswapResp.ListProposals> | UniswapResp.ListProposals;
}

export function createUniswap<Context>(service: Uniswap<Context>) {
  return {
    name: "fox.fswap.v2.service.Uniswap",
    methods: {
      ReadAsset: {
        name: "ReadAsset",
        handler: service.ReadAsset,
        input: {
          protobuf: UniswapReq.ReadAsset,
          json: UniswapReqJSON.ReadAsset,
        },
        output: { protobuf: Asset, json: AssetJSON },
      },
      ListAssets: {
        name: "ListAssets",
        handler: service.ListAssets,
        input: {
          protobuf: UniswapReq.ListAssets,
          json: UniswapReqJSON.ListAssets,
        },
        output: {
          protobuf: UniswapResp.ListAssets,
          json: UniswapRespJSON.ListAssets,
        },
      },
      ReadPair: {
        name: "ReadPair",
        handler: service.ReadPair,
        input: { protobuf: UniswapReq.ReadPair, json: UniswapReqJSON.ReadPair },
        output: { protobuf: Pair, json: PairJSON },
      },
      ListPairs: {
        name: "ListPairs",
        handler: service.ListPairs,
        input: {
          protobuf: UniswapReq.ListPairs,
          json: UniswapReqJSON.ListPairs,
        },
        output: {
          protobuf: UniswapResp.ListPairs,
          json: UniswapRespJSON.ListPairs,
        },
      },
      ReadDeposit: {
        name: "ReadDeposit",
        handler: service.ReadDeposit,
        input: {
          protobuf: UniswapReq.ReadDeposit,
          json: UniswapReqJSON.ReadDeposit,
        },
        output: { protobuf: Deposit, json: DepositJSON },
      },
      ListPendingDeposits: {
        name: "ListPendingDeposits",
        handler: service.ListPendingDeposits,
        input: {
          protobuf: UniswapReq.ListPendingDeposits,
          json: UniswapReqJSON.ListPendingDeposits,
        },
        output: {
          protobuf: UniswapResp.ListPendingDeposits,
          json: UniswapRespJSON.ListPendingDeposits,
        },
      },
      ReadTransaction: {
        name: "ReadTransaction",
        handler: service.ReadTransaction,
        input: {
          protobuf: UniswapReq.ReadTransaction,
          json: UniswapReqJSON.ReadTransaction,
        },
        output: { protobuf: Transaction, json: TransactionJSON },
      },
      ListTransactions: {
        name: "ListTransactions",
        handler: service.ListTransactions,
        input: {
          protobuf: UniswapReq.ListTransactions,
          json: UniswapReqJSON.ListTransactions,
        },
        output: {
          protobuf: UniswapResp.ListTransactions,
          json: UniswapRespJSON.ListTransactions,
        },
      },
      ReadOrder: {
        name: "ReadOrder",
        handler: service.ReadOrder,
        input: {
          protobuf: UniswapReq.ReadOrder,
          json: UniswapReqJSON.ReadOrder,
        },
        output: { protobuf: Order, json: OrderJSON },
      },
      PreOrder: {
        name: "PreOrder",
        handler: service.PreOrder,
        input: { protobuf: UniswapReq.PreOrder, json: UniswapReqJSON.PreOrder },
        output: { protobuf: Order, json: OrderJSON },
      },
      UpdateRoom: {
        name: "UpdateRoom",
        handler: service.UpdateRoom,
        input: {
          protobuf: UniswapReq.UpdateRoom,
          json: UniswapReqJSON.UpdateRoom,
        },
        output: { protobuf: Room, json: RoomJSON },
      },
      FindRoom: {
        name: "FindRoom",
        handler: service.FindRoom,
        input: { protobuf: UniswapReq.FindRoom, json: UniswapReqJSON.FindRoom },
        output: { protobuf: Room, json: RoomJSON },
      },
      FindProposal: {
        name: "FindProposal",
        handler: service.FindProposal,
        input: {
          protobuf: UniswapReq.FindProposal,
          json: UniswapReqJSON.FindProposal,
        },
        output: { protobuf: Proposal, json: ProposalJSON },
      },
      ListProposals: {
        name: "ListProposals",
        handler: service.ListProposals,
        input: {
          protobuf: UniswapReq.ListProposals,
          json: UniswapReqJSON.ListProposals,
        },
        output: {
          protobuf: UniswapResp.ListProposals,
          json: UniswapRespJSON.ListProposals,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Pagination = {
  /**
   * Serializes Pagination to protobuf.
   */
  encode: function (msg: PartialDeep<Pagination>): Uint8Array {
    return Pagination._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Pagination from protobuf.
   */
  decode: function (bytes: ByteSource): Pagination {
    return Pagination._readMessage(
      Pagination.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Pagination with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Pagination>): Pagination {
    return {
      nextCursor: "",
      hasNext: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Pagination>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.nextCursor) {
      writer.writeString(1, msg.nextCursor);
    }
    if (msg.hasNext) {
      writer.writeBool(2, msg.hasNext);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Pagination,
    reader: protoscript.BinaryReader,
  ): Pagination {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.nextCursor = reader.readString();
          break;
        }
        case 2: {
          msg.hasNext = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Asset = {
  /**
   * Serializes Asset to protobuf.
   */
  encode: function (msg: PartialDeep<Asset>): Uint8Array {
    return Asset._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Asset from protobuf.
   */
  decode: function (bytes: ByteSource): Asset {
    return Asset._readMessage(
      Asset.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Asset>): Asset {
    return {
      id: "",
      name: "",
      symbol: "",
      logo: "",
      chainId: "",
      chain: undefined,
      price: "",
      displaySymbol: "",
      extra: "",
      tag: "",
      priceChange: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Asset>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    if (msg.symbol) {
      writer.writeString(3, msg.symbol);
    }
    if (msg.logo) {
      writer.writeString(4, msg.logo);
    }
    if (msg.chainId) {
      writer.writeString(5, msg.chainId);
    }
    if (msg.chain) {
      writer.writeMessage(6, msg.chain, Asset._writeMessage);
    }
    if (msg.price) {
      writer.writeString(7, msg.price);
    }
    if (msg.displaySymbol) {
      writer.writeString(8, msg.displaySymbol);
    }
    if (msg.extra) {
      writer.writeString(9, msg.extra);
    }
    if (msg.tag) {
      writer.writeString(10, msg.tag);
    }
    if (msg.priceChange) {
      writer.writeString(11, msg.priceChange);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, reader: protoscript.BinaryReader): Asset {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.symbol = reader.readString();
          break;
        }
        case 4: {
          msg.logo = reader.readString();
          break;
        }
        case 5: {
          msg.chainId = reader.readString();
          break;
        }
        case 6: {
          msg.chain = Asset.initialize();
          reader.readMessage(msg.chain, Asset._readMessage);
          break;
        }
        case 7: {
          msg.price = reader.readString();
          break;
        }
        case 8: {
          msg.displaySymbol = reader.readString();
          break;
        }
        case 9: {
          msg.extra = reader.readString();
          break;
        }
        case 10: {
          msg.tag = reader.readString();
          break;
        }
        case 11: {
          msg.priceChange = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Pair = {
  /**
   * Serializes Pair to protobuf.
   */
  encode: function (msg: PartialDeep<Pair>): Uint8Array {
    return Pair._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Pair from protobuf.
   */
  decode: function (bytes: ByteSource): Pair {
    return Pair._readMessage(
      Pair.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Pair with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Pair>): Pair {
    return {
      baseAssetId: "",
      quoteAssetId: "",
      baseAmount: "",
      quoteAmount: "",
      share: "",
      liquidity: "",
      liquidityAssetId: "",
      routeId: 0,
      feePercent: "",
      maxLiquidity: "",
      baseValue: "",
      quoteValue: "",
      volume24h: "",
      fee24h: "",
      transactionCount24h: 0,
      swapMethod: "",
      version: 0,
      baseVolume24h: "",
      quoteVolume24h: "",
      netRor24h: "",
      netRor7d: "",
      netRor30d: "",
      profitRate: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Pair>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.baseAssetId) {
      writer.writeString(1, msg.baseAssetId);
    }
    if (msg.quoteAssetId) {
      writer.writeString(2, msg.quoteAssetId);
    }
    if (msg.baseAmount) {
      writer.writeString(3, msg.baseAmount);
    }
    if (msg.quoteAmount) {
      writer.writeString(4, msg.quoteAmount);
    }
    if (msg.share) {
      writer.writeString(5, msg.share);
    }
    if (msg.liquidity) {
      writer.writeString(6, msg.liquidity);
    }
    if (msg.liquidityAssetId) {
      writer.writeString(7, msg.liquidityAssetId);
    }
    if (msg.routeId) {
      writer.writeInt32(8, msg.routeId);
    }
    if (msg.feePercent) {
      writer.writeString(9, msg.feePercent);
    }
    if (msg.maxLiquidity) {
      writer.writeString(10, msg.maxLiquidity);
    }
    if (msg.baseValue) {
      writer.writeString(11, msg.baseValue);
    }
    if (msg.quoteValue) {
      writer.writeString(12, msg.quoteValue);
    }
    if (msg.volume24h) {
      writer.writeString(13, msg.volume24h);
    }
    if (msg.fee24h) {
      writer.writeString(14, msg.fee24h);
    }
    if (msg.transactionCount24h) {
      writer.writeInt32(15, msg.transactionCount24h);
    }
    if (msg.swapMethod) {
      writer.writeString(16, msg.swapMethod);
    }
    if (msg.version) {
      writer.writeInt32(17, msg.version);
    }
    if (msg.baseVolume24h) {
      writer.writeString(18, msg.baseVolume24h);
    }
    if (msg.quoteVolume24h) {
      writer.writeString(19, msg.quoteVolume24h);
    }
    if (msg.netRor24h) {
      writer.writeString(20, msg.netRor24h);
    }
    if (msg.netRor7d) {
      writer.writeString(21, msg.netRor7d);
    }
    if (msg.netRor30d) {
      writer.writeString(22, msg.netRor30d);
    }
    if (msg.profitRate) {
      writer.writeString(23, msg.profitRate);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pair, reader: protoscript.BinaryReader): Pair {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 2: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 3: {
          msg.baseAmount = reader.readString();
          break;
        }
        case 4: {
          msg.quoteAmount = reader.readString();
          break;
        }
        case 5: {
          msg.share = reader.readString();
          break;
        }
        case 6: {
          msg.liquidity = reader.readString();
          break;
        }
        case 7: {
          msg.liquidityAssetId = reader.readString();
          break;
        }
        case 8: {
          msg.routeId = reader.readInt32();
          break;
        }
        case 9: {
          msg.feePercent = reader.readString();
          break;
        }
        case 10: {
          msg.maxLiquidity = reader.readString();
          break;
        }
        case 11: {
          msg.baseValue = reader.readString();
          break;
        }
        case 12: {
          msg.quoteValue = reader.readString();
          break;
        }
        case 13: {
          msg.volume24h = reader.readString();
          break;
        }
        case 14: {
          msg.fee24h = reader.readString();
          break;
        }
        case 15: {
          msg.transactionCount24h = reader.readInt32();
          break;
        }
        case 16: {
          msg.swapMethod = reader.readString();
          break;
        }
        case 17: {
          msg.version = reader.readInt32();
          break;
        }
        case 18: {
          msg.baseVolume24h = reader.readString();
          break;
        }
        case 19: {
          msg.quoteVolume24h = reader.readString();
          break;
        }
        case 20: {
          msg.netRor24h = reader.readString();
          break;
        }
        case 21: {
          msg.netRor7d = reader.readString();
          break;
        }
        case 22: {
          msg.netRor30d = reader.readString();
          break;
        }
        case 23: {
          msg.profitRate = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Deposit = {
  /**
   * Serializes Deposit to protobuf.
   */
  encode: function (msg: PartialDeep<Deposit>): Uint8Array {
    return Deposit._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Deposit from protobuf.
   */
  decode: function (bytes: ByteSource): Deposit {
    return Deposit._readMessage(
      Deposit.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Deposit with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Deposit>): Deposit {
    return {
      id: "",
      createdAt: protoscript.Timestamp.initialize(),
      state: Deposit.State._fromInt(0),
      userId: "",
      followId: "",
      baseAssetId: "",
      baseAmount: "",
      quoteAssetId: "",
      quoteAmount: "",
      slippage: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Deposit>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        2,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.state && Deposit.State._toInt(msg.state)) {
      writer.writeEnum(3, Deposit.State._toInt(msg.state));
    }
    if (msg.userId) {
      writer.writeString(4, msg.userId);
    }
    if (msg.followId) {
      writer.writeString(5, msg.followId);
    }
    if (msg.baseAssetId) {
      writer.writeString(6, msg.baseAssetId);
    }
    if (msg.baseAmount) {
      writer.writeString(7, msg.baseAmount);
    }
    if (msg.quoteAssetId) {
      writer.writeString(8, msg.quoteAssetId);
    }
    if (msg.quoteAmount) {
      writer.writeString(9, msg.quoteAmount);
    }
    if (msg.slippage) {
      writer.writeString(10, msg.slippage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Deposit,
    reader: protoscript.BinaryReader,
  ): Deposit {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.state = Deposit.State._fromInt(reader.readEnum());
          break;
        }
        case 4: {
          msg.userId = reader.readString();
          break;
        }
        case 5: {
          msg.followId = reader.readString();
          break;
        }
        case 6: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 7: {
          msg.baseAmount = reader.readString();
          break;
        }
        case 8: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 9: {
          msg.quoteAmount = reader.readString();
          break;
        }
        case 10: {
          msg.slippage = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  State: {
    _: "_",
    Pending: "Pending",
    Cancelled: "Cancelled",
    Done: "Done",
    /**
     * @private
     */
    _fromInt: function (i: number): Deposit.State {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Pending";
        }
        case 2: {
          return "Cancelled";
        }
        case 3: {
          return "Done";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Deposit.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Deposit.State): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Pending": {
          return 1;
        }
        case "Cancelled": {
          return 2;
        }
        case "Done": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const Transaction = {
  /**
   * Serializes Transaction to protobuf.
   */
  encode: function (msg: PartialDeep<Transaction>): Uint8Array {
    return Transaction._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Transaction from protobuf.
   */
  decode: function (bytes: ByteSource): Transaction {
    return Transaction._readMessage(
      Transaction.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Transaction with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Transaction>): Transaction {
    return {
      id: "",
      createdAt: protoscript.Timestamp.initialize(),
      userId: "",
      type: Transaction.Type._fromInt(0),
      baseAssetId: "",
      quoteAssetId: "",
      baseAmount: "",
      quoteAmount: "",
      feeAssetId: "",
      feeAmount: "",
      payAssetId: "",
      filledAssetId: "",
      funds: "",
      amount: "",
      value: "",
      feeValue: "",
      followId: "",
      liquidity: "",
      groupId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Transaction>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        2,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.userId) {
      writer.writeString(3, msg.userId);
    }
    if (msg.type && Transaction.Type._toInt(msg.type)) {
      writer.writeEnum(4, Transaction.Type._toInt(msg.type));
    }
    if (msg.baseAssetId) {
      writer.writeString(5, msg.baseAssetId);
    }
    if (msg.quoteAssetId) {
      writer.writeString(6, msg.quoteAssetId);
    }
    if (msg.baseAmount) {
      writer.writeString(7, msg.baseAmount);
    }
    if (msg.quoteAmount) {
      writer.writeString(8, msg.quoteAmount);
    }
    if (msg.feeAssetId) {
      writer.writeString(9, msg.feeAssetId);
    }
    if (msg.feeAmount) {
      writer.writeString(10, msg.feeAmount);
    }
    if (msg.payAssetId) {
      writer.writeString(11, msg.payAssetId);
    }
    if (msg.filledAssetId) {
      writer.writeString(12, msg.filledAssetId);
    }
    if (msg.funds) {
      writer.writeString(13, msg.funds);
    }
    if (msg.amount) {
      writer.writeString(14, msg.amount);
    }
    if (msg.value) {
      writer.writeString(15, msg.value);
    }
    if (msg.feeValue) {
      writer.writeString(16, msg.feeValue);
    }
    if (msg.followId) {
      writer.writeString(17, msg.followId);
    }
    if (msg.liquidity) {
      writer.writeString(18, msg.liquidity);
    }
    if (msg.groupId) {
      writer.writeString(19, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Transaction,
    reader: protoscript.BinaryReader,
  ): Transaction {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.userId = reader.readString();
          break;
        }
        case 4: {
          msg.type = Transaction.Type._fromInt(reader.readEnum());
          break;
        }
        case 5: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 6: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 7: {
          msg.baseAmount = reader.readString();
          break;
        }
        case 8: {
          msg.quoteAmount = reader.readString();
          break;
        }
        case 9: {
          msg.feeAssetId = reader.readString();
          break;
        }
        case 10: {
          msg.feeAmount = reader.readString();
          break;
        }
        case 11: {
          msg.payAssetId = reader.readString();
          break;
        }
        case 12: {
          msg.filledAssetId = reader.readString();
          break;
        }
        case 13: {
          msg.funds = reader.readString();
          break;
        }
        case 14: {
          msg.amount = reader.readString();
          break;
        }
        case 15: {
          msg.value = reader.readString();
          break;
        }
        case 16: {
          msg.feeValue = reader.readString();
          break;
        }
        case 17: {
          msg.followId = reader.readString();
          break;
        }
        case 18: {
          msg.liquidity = reader.readString();
          break;
        }
        case 19: {
          msg.groupId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Type: {
    _: "_",
    Add: "Add",
    Remove: "Remove",
    Swap: "Swap",
    /**
     * @private
     */
    _fromInt: function (i: number): Transaction.Type {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Add";
        }
        case 2: {
          return "Remove";
        }
        case 3: {
          return "Swap";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Transaction.Type;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Transaction.Type): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Add": {
          return 1;
        }
        case "Remove": {
          return 2;
        }
        case "Swap": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const MultisigGroup = {
  /**
   * Serializes MultisigGroup to protobuf.
   */
  encode: function (msg: PartialDeep<MultisigGroup>): Uint8Array {
    return MultisigGroup._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes MultisigGroup from protobuf.
   */
  decode: function (bytes: ByteSource): MultisigGroup {
    return MultisigGroup._readMessage(
      MultisigGroup.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes MultisigGroup with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MultisigGroup>): MultisigGroup {
    return {
      members: [],
      threshold: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MultisigGroup>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.members?.length) {
      writer.writeRepeatedString(1, msg.members);
    }
    if (msg.threshold) {
      writer.writeUint32(2, msg.threshold);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MultisigGroup,
    reader: protoscript.BinaryReader,
  ): MultisigGroup {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.members.push(reader.readString());
          break;
        }
        case 2: {
          msg.threshold = reader.readUint32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Transfer = {
  /**
   * Serializes Transfer to protobuf.
   */
  encode: function (msg: PartialDeep<Transfer>): Uint8Array {
    return Transfer._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Transfer from protobuf.
   */
  decode: function (bytes: ByteSource): Transfer {
    return Transfer._readMessage(
      Transfer.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Transfer with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Transfer>): Transfer {
    return {
      id: "",
      createdAt: protoscript.Timestamp.initialize(),
      assetId: "",
      amount: "",
      memo: "",
      receiver: MultisigGroup.initialize(),
      txHash: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Transfer>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        2,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.assetId) {
      writer.writeString(3, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(4, msg.amount);
    }
    if (msg.memo) {
      writer.writeString(5, msg.memo);
    }
    if (msg.receiver) {
      writer.writeMessage(6, msg.receiver, MultisigGroup._writeMessage);
    }
    if (msg.txHash) {
      writer.writeString(7, msg.txHash);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Transfer,
    reader: protoscript.BinaryReader,
  ): Transfer {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.assetId = reader.readString();
          break;
        }
        case 4: {
          msg.amount = reader.readString();
          break;
        }
        case 5: {
          msg.memo = reader.readString();
          break;
        }
        case 6: {
          reader.readMessage(msg.receiver, MultisigGroup._readMessage);
          break;
        }
        case 7: {
          msg.txHash = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Order = {
  /**
   * Serializes Order to protobuf.
   */
  encode: function (msg: PartialDeep<Order>): Uint8Array {
    return Order._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Order from protobuf.
   */
  decode: function (bytes: ByteSource): Order {
    return Order._readMessage(
      Order.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Order with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Order>): Order {
    return {
      id: "",
      createdAt: protoscript.Timestamp.initialize(),
      userId: "",
      state: Order.State._fromInt(0),
      payAssetId: "",
      fillAssetId: "",
      payAmount: "",
      fillAmount: "",
      minAmount: "",
      routes: "",
      routeAssets: [],
      transactions: [],
      routePrice: "",
      priceImpact: "",
      followId: "",
      funds: "",
      amount: "",
      transfers: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Order>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        2,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.userId) {
      writer.writeString(3, msg.userId);
    }
    if (msg.state && Order.State._toInt(msg.state)) {
      writer.writeEnum(4, Order.State._toInt(msg.state));
    }
    if (msg.payAssetId) {
      writer.writeString(5, msg.payAssetId);
    }
    if (msg.fillAssetId) {
      writer.writeString(6, msg.fillAssetId);
    }
    if (msg.payAmount) {
      writer.writeString(7, msg.payAmount);
    }
    if (msg.fillAmount) {
      writer.writeString(8, msg.fillAmount);
    }
    if (msg.minAmount) {
      writer.writeString(9, msg.minAmount);
    }
    if (msg.routes) {
      writer.writeString(10, msg.routes);
    }
    if (msg.routeAssets?.length) {
      writer.writeRepeatedString(11, msg.routeAssets);
    }
    if (msg.transactions?.length) {
      writer.writeRepeatedMessage(
        12,
        msg.transactions as any,
        Transaction._writeMessage,
      );
    }
    if (msg.routePrice) {
      writer.writeString(13, msg.routePrice);
    }
    if (msg.priceImpact) {
      writer.writeString(14, msg.priceImpact);
    }
    if (msg.followId) {
      writer.writeString(15, msg.followId);
    }
    if (msg.funds) {
      writer.writeString(16, msg.funds);
    }
    if (msg.amount) {
      writer.writeString(17, msg.amount);
    }
    if (msg.transfers?.length) {
      writer.writeRepeatedMessage(
        18,
        msg.transfers as any,
        Transfer._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Order, reader: protoscript.BinaryReader): Order {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.userId = reader.readString();
          break;
        }
        case 4: {
          msg.state = Order.State._fromInt(reader.readEnum());
          break;
        }
        case 5: {
          msg.payAssetId = reader.readString();
          break;
        }
        case 6: {
          msg.fillAssetId = reader.readString();
          break;
        }
        case 7: {
          msg.payAmount = reader.readString();
          break;
        }
        case 8: {
          msg.fillAmount = reader.readString();
          break;
        }
        case 9: {
          msg.minAmount = reader.readString();
          break;
        }
        case 10: {
          msg.routes = reader.readString();
          break;
        }
        case 11: {
          msg.routeAssets.push(reader.readString());
          break;
        }
        case 12: {
          const m = Transaction.initialize();
          reader.readMessage(m, Transaction._readMessage);
          msg.transactions.push(m);
          break;
        }
        case 13: {
          msg.routePrice = reader.readString();
          break;
        }
        case 14: {
          msg.priceImpact = reader.readString();
          break;
        }
        case 15: {
          msg.followId = reader.readString();
          break;
        }
        case 16: {
          msg.funds = reader.readString();
          break;
        }
        case 17: {
          msg.amount = reader.readString();
          break;
        }
        case 18: {
          const m = Transfer.initialize();
          reader.readMessage(m, Transfer._readMessage);
          msg.transfers.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  State: {
    _: "_",
    Trading: "Trading",
    Rejected: "Rejected",
    Done: "Done",
    /**
     * @private
     */
    _fromInt: function (i: number): Order.State {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Trading";
        }
        case 2: {
          return "Rejected";
        }
        case 3: {
          return "Done";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Order.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Order.State): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Trading": {
          return 1;
        }
        case "Rejected": {
          return 2;
        }
        case "Done": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const Proposal = {
  /**
   * Serializes Proposal to protobuf.
   */
  encode: function (msg: PartialDeep<Proposal>): Uint8Array {
    return Proposal._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Proposal from protobuf.
   */
  decode: function (bytes: ByteSource): Proposal {
    return Proposal._readMessage(
      Proposal.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Proposal with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Proposal>): Proposal {
    return {
      id: "",
      createdAt: protoscript.Timestamp.initialize(),
      passedAt: protoscript.Timestamp.initialize(),
      creator: "",
      assetId: "",
      amount: "",
      action: "",
      data: "",
      votes: [],
      items: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Proposal>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        2,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.passedAt) {
      writer.writeMessage(3, msg.passedAt, protoscript.Timestamp._writeMessage);
    }
    if (msg.creator) {
      writer.writeString(4, msg.creator);
    }
    if (msg.assetId) {
      writer.writeString(5, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(6, msg.amount);
    }
    if (msg.action) {
      writer.writeString(7, msg.action);
    }
    if (msg.data) {
      writer.writeString(8, msg.data);
    }
    if (msg.votes?.length) {
      writer.writeRepeatedString(9, msg.votes);
    }
    if (msg.items?.length) {
      writer.writeRepeatedMessage(
        10,
        msg.items as any,
        Proposal.Item._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Proposal,
    reader: protoscript.BinaryReader,
  ): Proposal {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 3: {
          reader.readMessage(msg.passedAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 4: {
          msg.creator = reader.readString();
          break;
        }
        case 5: {
          msg.assetId = reader.readString();
          break;
        }
        case 6: {
          msg.amount = reader.readString();
          break;
        }
        case 7: {
          msg.action = reader.readString();
          break;
        }
        case 8: {
          msg.data = reader.readString();
          break;
        }
        case 9: {
          msg.votes.push(reader.readString());
          break;
        }
        case 10: {
          const m = Proposal.Item.initialize();
          reader.readMessage(m, Proposal.Item._readMessage);
          msg.items.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Item: {
    /**
     * Serializes Proposal.Item to protobuf.
     */
    encode: function (msg: PartialDeep<Proposal.Item>): Uint8Array {
      return Proposal.Item._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes Proposal.Item from protobuf.
     */
    decode: function (bytes: ByteSource): Proposal.Item {
      return Proposal.Item._readMessage(
        Proposal.Item.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes Proposal.Item with all fields set to their default value.
     */
    initialize: function (msg?: Partial<Proposal.Item>): Proposal.Item {
      return {
        key: "",
        value: "",
        hint: "",
        action: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<Proposal.Item>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeString(2, msg.value);
      }
      if (msg.hint) {
        writer.writeString(3, msg.hint);
      }
      if (msg.action) {
        writer.writeString(4, msg.action);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Proposal.Item,
      reader: protoscript.BinaryReader,
    ): Proposal.Item {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = reader.readString();
            break;
          }
          case 3: {
            msg.hint = reader.readString();
            break;
          }
          case 4: {
            msg.action = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const Room = {
  /**
   * Serializes Room to protobuf.
   */
  encode: function (msg: PartialDeep<Room>): Uint8Array {
    return Room._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Room from protobuf.
   */
  decode: function (bytes: ByteSource): Room {
    return Room._readMessage(
      Room.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Room with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Room>): Room {
    return {
      id: "",
      baseAssetId: "",
      quoteAssetId: "",
      admins: [],
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Room>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.baseAssetId) {
      writer.writeString(2, msg.baseAssetId);
    }
    if (msg.quoteAssetId) {
      writer.writeString(3, msg.quoteAssetId);
    }
    if (msg.admins?.length) {
      writer.writeRepeatedString(4, msg.admins);
    }
    if (msg.name) {
      writer.writeString(5, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Room, reader: protoscript.BinaryReader): Room {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 3: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 4: {
          msg.admins.push(reader.readString());
          break;
        }
        case 5: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UniswapReq = {
  /**
   * Serializes UniswapReq to protobuf.
   */
  encode: function (_msg?: PartialDeep<UniswapReq>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes UniswapReq from protobuf.
   */
  decode: function (_bytes?: ByteSource): UniswapReq {
    return {};
  },

  /**
   * Initializes UniswapReq with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UniswapReq>): UniswapReq {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<UniswapReq>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: UniswapReq,
    _reader: protoscript.BinaryReader,
  ): UniswapReq {
    return _msg;
  },

  ListAssets: {
    /**
     * Serializes UniswapReq.ListAssets to protobuf.
     */
    encode: function (_msg?: PartialDeep<UniswapReq.ListAssets>): Uint8Array {
      return new Uint8Array();
    },

    /**
     * Deserializes UniswapReq.ListAssets from protobuf.
     */
    decode: function (_bytes?: ByteSource): UniswapReq.ListAssets {
      return {};
    },

    /**
     * Initializes UniswapReq.ListAssets with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListAssets>,
    ): UniswapReq.ListAssets {
      return {
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      _msg: PartialDeep<UniswapReq.ListAssets>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      _msg: UniswapReq.ListAssets,
      _reader: protoscript.BinaryReader,
    ): UniswapReq.ListAssets {
      return _msg;
    },
  },

  ReadAsset: {
    /**
     * Serializes UniswapReq.ReadAsset to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.ReadAsset>): Uint8Array {
      return UniswapReq.ReadAsset._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadAsset from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadAsset {
      return UniswapReq.ReadAsset._readMessage(
        UniswapReq.ReadAsset.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.ReadAsset with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadAsset>,
    ): UniswapReq.ReadAsset {
      return {
        assetId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadAsset>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.assetId) {
        writer.writeString(1, msg.assetId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadAsset,
      reader: protoscript.BinaryReader,
    ): UniswapReq.ReadAsset {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.assetId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReadPair: {
    /**
     * Serializes UniswapReq.ReadPair to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.ReadPair>): Uint8Array {
      return UniswapReq.ReadPair._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadPair from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadPair {
      return UniswapReq.ReadPair._readMessage(
        UniswapReq.ReadPair.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.ReadPair with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadPair>,
    ): UniswapReq.ReadPair {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadPair>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.baseAssetId) {
        writer.writeString(1, msg.baseAssetId);
      }
      if (msg.quoteAssetId) {
        writer.writeString(2, msg.quoteAssetId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadPair,
      reader: protoscript.BinaryReader,
    ): UniswapReq.ReadPair {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.baseAssetId = reader.readString();
            break;
          }
          case 2: {
            msg.quoteAssetId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListPairs: {
    /**
     * Serializes UniswapReq.ListPairs to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.ListPairs>): Uint8Array {
      return UniswapReq.ListPairs._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ListPairs from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ListPairs {
      return UniswapReq.ListPairs._readMessage(
        UniswapReq.ListPairs.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.ListPairs with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListPairs>,
    ): UniswapReq.ListPairs {
      return {
        brokerId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ListPairs>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.brokerId) {
        writer.writeString(1, msg.brokerId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListPairs,
      reader: protoscript.BinaryReader,
    ): UniswapReq.ListPairs {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.brokerId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReadDeposit: {
    /**
     * Serializes UniswapReq.ReadDeposit to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.ReadDeposit>): Uint8Array {
      return UniswapReq.ReadDeposit._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadDeposit from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadDeposit {
      return UniswapReq.ReadDeposit._readMessage(
        UniswapReq.ReadDeposit.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.ReadDeposit with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadDeposit>,
    ): UniswapReq.ReadDeposit {
      return {
        followId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadDeposit>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.followId) {
        writer.writeString(1, msg.followId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadDeposit,
      reader: protoscript.BinaryReader,
    ): UniswapReq.ReadDeposit {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.followId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListPendingDeposits: {
    /**
     * Serializes UniswapReq.ListPendingDeposits to protobuf.
     */
    encode: function (
      msg: PartialDeep<UniswapReq.ListPendingDeposits>,
    ): Uint8Array {
      return UniswapReq.ListPendingDeposits._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ListPendingDeposits from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ListPendingDeposits {
      return UniswapReq.ListPendingDeposits._readMessage(
        UniswapReq.ListPendingDeposits.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.ListPendingDeposits with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListPendingDeposits>,
    ): UniswapReq.ListPendingDeposits {
      return {
        limit: 0,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ListPendingDeposits>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.limit) {
        writer.writeUint32(1, msg.limit);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListPendingDeposits,
      reader: protoscript.BinaryReader,
    ): UniswapReq.ListPendingDeposits {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.limit = reader.readUint32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReadTransaction: {
    /**
     * Serializes UniswapReq.ReadTransaction to protobuf.
     */
    encode: function (
      msg: PartialDeep<UniswapReq.ReadTransaction>,
    ): Uint8Array {
      return UniswapReq.ReadTransaction._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadTransaction from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadTransaction {
      return UniswapReq.ReadTransaction._readMessage(
        UniswapReq.ReadTransaction.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.ReadTransaction with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadTransaction>,
    ): UniswapReq.ReadTransaction {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        followId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadTransaction>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.baseAssetId) {
        writer.writeString(1, msg.baseAssetId);
      }
      if (msg.quoteAssetId) {
        writer.writeString(2, msg.quoteAssetId);
      }
      if (msg.followId) {
        writer.writeString(3, msg.followId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadTransaction,
      reader: protoscript.BinaryReader,
    ): UniswapReq.ReadTransaction {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.baseAssetId = reader.readString();
            break;
          }
          case 2: {
            msg.quoteAssetId = reader.readString();
            break;
          }
          case 3: {
            msg.followId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReadOrder: {
    /**
     * Serializes UniswapReq.ReadOrder to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.ReadOrder>): Uint8Array {
      return UniswapReq.ReadOrder._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ReadOrder from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ReadOrder {
      return UniswapReq.ReadOrder._readMessage(
        UniswapReq.ReadOrder.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.ReadOrder with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadOrder>,
    ): UniswapReq.ReadOrder {
      return {
        followId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadOrder>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.followId) {
        writer.writeString(1, msg.followId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadOrder,
      reader: protoscript.BinaryReader,
    ): UniswapReq.ReadOrder {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.followId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  PreOrder: {
    /**
     * Serializes UniswapReq.PreOrder to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.PreOrder>): Uint8Array {
      return UniswapReq.PreOrder._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.PreOrder from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.PreOrder {
      return UniswapReq.PreOrder._readMessage(
        UniswapReq.PreOrder.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.PreOrder with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.PreOrder>,
    ): UniswapReq.PreOrder {
      return {
        payAssetId: "",
        fillAssetId: "",
        payAmount: "",
        fillAmount: "",
        minAmount: "",
        funds: "",
        amount: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.PreOrder>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.payAssetId) {
        writer.writeString(1, msg.payAssetId);
      }
      if (msg.fillAssetId) {
        writer.writeString(2, msg.fillAssetId);
      }
      if (msg.payAmount) {
        writer.writeString(3, msg.payAmount);
      }
      if (msg.fillAmount) {
        writer.writeString(4, msg.fillAmount);
      }
      if (msg.minAmount) {
        writer.writeString(5, msg.minAmount);
      }
      if (msg.funds) {
        writer.writeString(6, msg.funds);
      }
      if (msg.amount) {
        writer.writeString(7, msg.amount);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.PreOrder,
      reader: protoscript.BinaryReader,
    ): UniswapReq.PreOrder {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.payAssetId = reader.readString();
            break;
          }
          case 2: {
            msg.fillAssetId = reader.readString();
            break;
          }
          case 3: {
            msg.payAmount = reader.readString();
            break;
          }
          case 4: {
            msg.fillAmount = reader.readString();
            break;
          }
          case 5: {
            msg.minAmount = reader.readString();
            break;
          }
          case 6: {
            msg.funds = reader.readString();
            break;
          }
          case 7: {
            msg.amount = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListTransactions: {
    /**
     * Serializes UniswapReq.ListTransactions to protobuf.
     */
    encode: function (
      msg: PartialDeep<UniswapReq.ListTransactions>,
    ): Uint8Array {
      return UniswapReq.ListTransactions._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ListTransactions from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ListTransactions {
      return UniswapReq.ListTransactions._readMessage(
        UniswapReq.ListTransactions.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.ListTransactions with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListTransactions>,
    ): UniswapReq.ListTransactions {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        type: "",
        cursor: "",
        limit: 0n,
        userId: "",
        order: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ListTransactions>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.baseAssetId) {
        writer.writeString(1, msg.baseAssetId);
      }
      if (msg.quoteAssetId) {
        writer.writeString(2, msg.quoteAssetId);
      }
      if (msg.type) {
        writer.writeString(3, msg.type);
      }
      if (msg.cursor) {
        writer.writeString(4, msg.cursor);
      }
      if (msg.limit) {
        writer.writeInt64String(5, msg.limit.toString() as any);
      }
      if (msg.userId) {
        writer.writeString(6, msg.userId);
      }
      if (msg.order) {
        writer.writeString(7, msg.order);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListTransactions,
      reader: protoscript.BinaryReader,
    ): UniswapReq.ListTransactions {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.baseAssetId = reader.readString();
            break;
          }
          case 2: {
            msg.quoteAssetId = reader.readString();
            break;
          }
          case 3: {
            msg.type = reader.readString();
            break;
          }
          case 4: {
            msg.cursor = reader.readString();
            break;
          }
          case 5: {
            msg.limit = BigInt(reader.readInt64String());
            break;
          }
          case 6: {
            msg.userId = reader.readString();
            break;
          }
          case 7: {
            msg.order = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  UpdateRoom: {
    /**
     * Serializes UniswapReq.UpdateRoom to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.UpdateRoom>): Uint8Array {
      return UniswapReq.UpdateRoom._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.UpdateRoom from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.UpdateRoom {
      return UniswapReq.UpdateRoom._readMessage(
        UniswapReq.UpdateRoom.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.UpdateRoom with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.UpdateRoom>,
    ): UniswapReq.UpdateRoom {
      return {
        id: "",
        baseAssetId: "",
        quoteAssetId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.UpdateRoom>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id);
      }
      if (msg.baseAssetId) {
        writer.writeString(2, msg.baseAssetId);
      }
      if (msg.quoteAssetId) {
        writer.writeString(3, msg.quoteAssetId);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.UpdateRoom,
      reader: protoscript.BinaryReader,
    ): UniswapReq.UpdateRoom {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.id = reader.readString();
            break;
          }
          case 2: {
            msg.baseAssetId = reader.readString();
            break;
          }
          case 3: {
            msg.quoteAssetId = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  FindRoom: {
    /**
     * Serializes UniswapReq.FindRoom to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.FindRoom>): Uint8Array {
      return UniswapReq.FindRoom._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.FindRoom from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.FindRoom {
      return UniswapReq.FindRoom._readMessage(
        UniswapReq.FindRoom.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.FindRoom with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.FindRoom>,
    ): UniswapReq.FindRoom {
      return {
        id: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.FindRoom>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.FindRoom,
      reader: protoscript.BinaryReader,
    ): UniswapReq.FindRoom {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.id = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListProposals: {
    /**
     * Serializes UniswapReq.ListProposals to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.ListProposals>): Uint8Array {
      return UniswapReq.ListProposals._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.ListProposals from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.ListProposals {
      return UniswapReq.ListProposals._readMessage(
        UniswapReq.ListProposals.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.ListProposals with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListProposals>,
    ): UniswapReq.ListProposals {
      return {
        cursor: "",
        limit: 0n,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ListProposals>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.cursor) {
        writer.writeString(1, msg.cursor);
      }
      if (msg.limit) {
        writer.writeInt64String(2, msg.limit.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListProposals,
      reader: protoscript.BinaryReader,
    ): UniswapReq.ListProposals {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.cursor = reader.readString();
            break;
          }
          case 2: {
            msg.limit = BigInt(reader.readInt64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  FindProposal: {
    /**
     * Serializes UniswapReq.FindProposal to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapReq.FindProposal>): Uint8Array {
      return UniswapReq.FindProposal._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapReq.FindProposal from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapReq.FindProposal {
      return UniswapReq.FindProposal._readMessage(
        UniswapReq.FindProposal.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapReq.FindProposal with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.FindProposal>,
    ): UniswapReq.FindProposal {
      return {
        id: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.FindProposal>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.FindProposal,
      reader: protoscript.BinaryReader,
    ): UniswapReq.FindProposal {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.id = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const UniswapResp = {
  /**
   * Serializes UniswapResp to protobuf.
   */
  encode: function (_msg?: PartialDeep<UniswapResp>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes UniswapResp from protobuf.
   */
  decode: function (_bytes?: ByteSource): UniswapResp {
    return {};
  },

  /**
   * Initializes UniswapResp with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UniswapResp>): UniswapResp {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<UniswapResp>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: UniswapResp,
    _reader: protoscript.BinaryReader,
  ): UniswapResp {
    return _msg;
  },

  ListAssets: {
    /**
     * Serializes UniswapResp.ListAssets to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapResp.ListAssets>): Uint8Array {
      return UniswapResp.ListAssets._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListAssets from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListAssets {
      return UniswapResp.ListAssets._readMessage(
        UniswapResp.ListAssets.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapResp.ListAssets with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListAssets>,
    ): UniswapResp.ListAssets {
      return {
        assets: [],
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListAssets>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.assets?.length) {
        writer.writeRepeatedMessage(1, msg.assets as any, Asset._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListAssets,
      reader: protoscript.BinaryReader,
    ): UniswapResp.ListAssets {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            const m = Asset.initialize();
            reader.readMessage(m, Asset._readMessage);
            msg.assets.push(m);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListPairs: {
    /**
     * Serializes UniswapResp.ListPairs to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapResp.ListPairs>): Uint8Array {
      return UniswapResp.ListPairs._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListPairs from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListPairs {
      return UniswapResp.ListPairs._readMessage(
        UniswapResp.ListPairs.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapResp.ListPairs with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListPairs>,
    ): UniswapResp.ListPairs {
      return {
        pairs: [],
        pairCount: 0,
        transactionCount24h: 0,
        liquidityValue: "",
        volume24h: "",
        fee24h: "",
        ts: 0,
        whitelists: [],
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListPairs>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.pairs?.length) {
        writer.writeRepeatedMessage(1, msg.pairs as any, Pair._writeMessage);
      }
      if (msg.pairCount) {
        writer.writeInt32(2, msg.pairCount);
      }
      if (msg.transactionCount24h) {
        writer.writeInt32(3, msg.transactionCount24h);
      }
      if (msg.liquidityValue) {
        writer.writeString(4, msg.liquidityValue);
      }
      if (msg.volume24h) {
        writer.writeString(5, msg.volume24h);
      }
      if (msg.fee24h) {
        writer.writeString(6, msg.fee24h);
      }
      if (msg.ts) {
        writer.writeDouble(7, msg.ts);
      }
      if (msg.whitelists?.length) {
        writer.writeRepeatedString(8, msg.whitelists);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListPairs,
      reader: protoscript.BinaryReader,
    ): UniswapResp.ListPairs {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            const m = Pair.initialize();
            reader.readMessage(m, Pair._readMessage);
            msg.pairs.push(m);
            break;
          }
          case 2: {
            msg.pairCount = reader.readInt32();
            break;
          }
          case 3: {
            msg.transactionCount24h = reader.readInt32();
            break;
          }
          case 4: {
            msg.liquidityValue = reader.readString();
            break;
          }
          case 5: {
            msg.volume24h = reader.readString();
            break;
          }
          case 6: {
            msg.fee24h = reader.readString();
            break;
          }
          case 7: {
            msg.ts = reader.readDouble();
            break;
          }
          case 8: {
            msg.whitelists.push(reader.readString());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListTransactionsSummary: {
    /**
     * Serializes UniswapResp.ListTransactionsSummary to protobuf.
     */
    encode: function (
      msg: PartialDeep<UniswapResp.ListTransactionsSummary>,
    ): Uint8Array {
      return UniswapResp.ListTransactionsSummary._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListTransactionsSummary from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListTransactionsSummary {
      return UniswapResp.ListTransactionsSummary._readMessage(
        UniswapResp.ListTransactionsSummary.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapResp.ListTransactionsSummary with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListTransactionsSummary>,
    ): UniswapResp.ListTransactionsSummary {
      return {
        totalAddBaseAmount: "",
        totalAddQuoteAmount: "",
        totalRemoveBaseAmount: "",
        totalRemoveQuoteAmount: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListTransactionsSummary>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.totalAddBaseAmount) {
        writer.writeString(1, msg.totalAddBaseAmount);
      }
      if (msg.totalAddQuoteAmount) {
        writer.writeString(2, msg.totalAddQuoteAmount);
      }
      if (msg.totalRemoveBaseAmount) {
        writer.writeString(3, msg.totalRemoveBaseAmount);
      }
      if (msg.totalRemoveQuoteAmount) {
        writer.writeString(4, msg.totalRemoveQuoteAmount);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListTransactionsSummary,
      reader: protoscript.BinaryReader,
    ): UniswapResp.ListTransactionsSummary {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.totalAddBaseAmount = reader.readString();
            break;
          }
          case 2: {
            msg.totalAddQuoteAmount = reader.readString();
            break;
          }
          case 3: {
            msg.totalRemoveBaseAmount = reader.readString();
            break;
          }
          case 4: {
            msg.totalRemoveQuoteAmount = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListTransactions: {
    /**
     * Serializes UniswapResp.ListTransactions to protobuf.
     */
    encode: function (
      msg: PartialDeep<UniswapResp.ListTransactions>,
    ): Uint8Array {
      return UniswapResp.ListTransactions._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListTransactions from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListTransactions {
      return UniswapResp.ListTransactions._readMessage(
        UniswapResp.ListTransactions.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapResp.ListTransactions with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListTransactions>,
    ): UniswapResp.ListTransactions {
      return {
        transactions: [],
        pagination: Pagination.initialize(),
        summary: UniswapResp.ListTransactionsSummary.initialize(),
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListTransactions>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.transactions?.length) {
        writer.writeRepeatedMessage(
          1,
          msg.transactions as any,
          Transaction._writeMessage,
        );
      }
      if (msg.pagination) {
        writer.writeMessage(2, msg.pagination, Pagination._writeMessage);
      }
      if (msg.summary) {
        writer.writeMessage(
          3,
          msg.summary,
          UniswapResp.ListTransactionsSummary._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListTransactions,
      reader: protoscript.BinaryReader,
    ): UniswapResp.ListTransactions {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            const m = Transaction.initialize();
            reader.readMessage(m, Transaction._readMessage);
            msg.transactions.push(m);
            break;
          }
          case 2: {
            reader.readMessage(msg.pagination, Pagination._readMessage);
            break;
          }
          case 3: {
            reader.readMessage(
              msg.summary,
              UniswapResp.ListTransactionsSummary._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListProposals: {
    /**
     * Serializes UniswapResp.ListProposals to protobuf.
     */
    encode: function (msg: PartialDeep<UniswapResp.ListProposals>): Uint8Array {
      return UniswapResp.ListProposals._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListProposals from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListProposals {
      return UniswapResp.ListProposals._readMessage(
        UniswapResp.ListProposals.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapResp.ListProposals with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListProposals>,
    ): UniswapResp.ListProposals {
      return {
        proposals: [],
        pagination: Pagination.initialize(),
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListProposals>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.proposals?.length) {
        writer.writeRepeatedMessage(
          1,
          msg.proposals as any,
          Proposal._writeMessage,
        );
      }
      if (msg.pagination) {
        writer.writeMessage(2, msg.pagination, Pagination._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListProposals,
      reader: protoscript.BinaryReader,
    ): UniswapResp.ListProposals {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            const m = Proposal.initialize();
            reader.readMessage(m, Proposal._readMessage);
            msg.proposals.push(m);
            break;
          }
          case 2: {
            reader.readMessage(msg.pagination, Pagination._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ListPendingDeposits: {
    /**
     * Serializes UniswapResp.ListPendingDeposits to protobuf.
     */
    encode: function (
      msg: PartialDeep<UniswapResp.ListPendingDeposits>,
    ): Uint8Array {
      return UniswapResp.ListPendingDeposits._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes UniswapResp.ListPendingDeposits from protobuf.
     */
    decode: function (bytes: ByteSource): UniswapResp.ListPendingDeposits {
      return UniswapResp.ListPendingDeposits._readMessage(
        UniswapResp.ListPendingDeposits.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes UniswapResp.ListPendingDeposits with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListPendingDeposits>,
    ): UniswapResp.ListPendingDeposits {
      return {
        deposits: [],
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListPendingDeposits>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.deposits?.length) {
        writer.writeRepeatedMessage(
          1,
          msg.deposits as any,
          Deposit._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListPendingDeposits,
      reader: protoscript.BinaryReader,
    ): UniswapResp.ListPendingDeposits {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            const m = Deposit.initialize();
            reader.readMessage(m, Deposit._readMessage);
            msg.deposits.push(m);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const PaginationJSON = {
  /**
   * Serializes Pagination to JSON.
   */
  encode: function (msg: PartialDeep<Pagination>): string {
    return JSON.stringify(PaginationJSON._writeMessage(msg));
  },

  /**
   * Deserializes Pagination from JSON.
   */
  decode: function (json: string): Pagination {
    return PaginationJSON._readMessage(
      PaginationJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes Pagination with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Pagination>): Pagination {
    return {
      nextCursor: "",
      hasNext: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Pagination>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.nextCursor) {
      json["nextCursor"] = msg.nextCursor;
    }
    if (msg.hasNext) {
      json["hasNext"] = msg.hasNext;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pagination, json: any): Pagination {
    const _nextCursor_ = json["nextCursor"] ?? json["next_cursor"];
    if (_nextCursor_) {
      msg.nextCursor = _nextCursor_;
    }
    const _hasNext_ = json["hasNext"] ?? json["has_next"];
    if (_hasNext_) {
      msg.hasNext = _hasNext_;
    }
    return msg;
  },
};

export const AssetJSON = {
  /**
   * Serializes Asset to JSON.
   */
  encode: function (msg: PartialDeep<Asset>): string {
    return JSON.stringify(AssetJSON._writeMessage(msg));
  },

  /**
   * Deserializes Asset from JSON.
   */
  decode: function (json: string): Asset {
    return AssetJSON._readMessage(AssetJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Asset>): Asset {
    return {
      id: "",
      name: "",
      symbol: "",
      logo: "",
      chainId: "",
      chain: undefined,
      price: "",
      displaySymbol: "",
      extra: "",
      tag: "",
      priceChange: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Asset>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.symbol) {
      json["symbol"] = msg.symbol;
    }
    if (msg.logo) {
      json["logo"] = msg.logo;
    }
    if (msg.chainId) {
      json["chainId"] = msg.chainId;
    }
    if (msg.chain) {
      const _chain_ = AssetJSON._writeMessage(msg.chain);
      if (Object.keys(_chain_).length > 0) {
        json["chain"] = _chain_;
      }
    }
    if (msg.price) {
      json["price"] = msg.price;
    }
    if (msg.displaySymbol) {
      json["displaySymbol"] = msg.displaySymbol;
    }
    if (msg.extra) {
      json["extra"] = msg.extra;
    }
    if (msg.tag) {
      json["tag"] = msg.tag;
    }
    if (msg.priceChange) {
      json["priceChange"] = msg.priceChange;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, json: any): Asset {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _symbol_ = json["symbol"];
    if (_symbol_) {
      msg.symbol = _symbol_;
    }
    const _logo_ = json["logo"];
    if (_logo_) {
      msg.logo = _logo_;
    }
    const _chainId_ = json["chainId"] ?? json["chain_id"];
    if (_chainId_) {
      msg.chainId = _chainId_;
    }
    const _chain_ = json["chain"];
    if (_chain_) {
      msg.chain = AssetJSON.initialize();
      AssetJSON._readMessage(msg.chain, _chain_);
    }
    const _price_ = json["price"];
    if (_price_) {
      msg.price = _price_;
    }
    const _displaySymbol_ = json["displaySymbol"] ?? json["display_symbol"];
    if (_displaySymbol_) {
      msg.displaySymbol = _displaySymbol_;
    }
    const _extra_ = json["extra"];
    if (_extra_) {
      msg.extra = _extra_;
    }
    const _tag_ = json["tag"];
    if (_tag_) {
      msg.tag = _tag_;
    }
    const _priceChange_ = json["priceChange"] ?? json["price_change"];
    if (_priceChange_) {
      msg.priceChange = _priceChange_;
    }
    return msg;
  },
};

export const PairJSON = {
  /**
   * Serializes Pair to JSON.
   */
  encode: function (msg: PartialDeep<Pair>): string {
    return JSON.stringify(PairJSON._writeMessage(msg));
  },

  /**
   * Deserializes Pair from JSON.
   */
  decode: function (json: string): Pair {
    return PairJSON._readMessage(PairJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Pair with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Pair>): Pair {
    return {
      baseAssetId: "",
      quoteAssetId: "",
      baseAmount: "",
      quoteAmount: "",
      share: "",
      liquidity: "",
      liquidityAssetId: "",
      routeId: 0,
      feePercent: "",
      maxLiquidity: "",
      baseValue: "",
      quoteValue: "",
      volume24h: "",
      fee24h: "",
      transactionCount24h: 0,
      swapMethod: "",
      version: 0,
      baseVolume24h: "",
      quoteVolume24h: "",
      netRor24h: "",
      netRor7d: "",
      netRor30d: "",
      profitRate: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Pair>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.baseAssetId) {
      json["baseAssetId"] = msg.baseAssetId;
    }
    if (msg.quoteAssetId) {
      json["quoteAssetId"] = msg.quoteAssetId;
    }
    if (msg.baseAmount) {
      json["baseAmount"] = msg.baseAmount;
    }
    if (msg.quoteAmount) {
      json["quoteAmount"] = msg.quoteAmount;
    }
    if (msg.share) {
      json["share"] = msg.share;
    }
    if (msg.liquidity) {
      json["liquidity"] = msg.liquidity;
    }
    if (msg.liquidityAssetId) {
      json["liquidityAssetId"] = msg.liquidityAssetId;
    }
    if (msg.routeId) {
      json["routeId"] = msg.routeId;
    }
    if (msg.feePercent) {
      json["feePercent"] = msg.feePercent;
    }
    if (msg.maxLiquidity) {
      json["maxLiquidity"] = msg.maxLiquidity;
    }
    if (msg.baseValue) {
      json["baseValue"] = msg.baseValue;
    }
    if (msg.quoteValue) {
      json["quoteValue"] = msg.quoteValue;
    }
    if (msg.volume24h) {
      json["volume24h"] = msg.volume24h;
    }
    if (msg.fee24h) {
      json["fee24h"] = msg.fee24h;
    }
    if (msg.transactionCount24h) {
      json["transactionCount24h"] = msg.transactionCount24h;
    }
    if (msg.swapMethod) {
      json["swapMethod"] = msg.swapMethod;
    }
    if (msg.version) {
      json["version"] = msg.version;
    }
    if (msg.baseVolume24h) {
      json["baseVolume24h"] = msg.baseVolume24h;
    }
    if (msg.quoteVolume24h) {
      json["quoteVolume24h"] = msg.quoteVolume24h;
    }
    if (msg.netRor24h) {
      json["netRor24h"] = msg.netRor24h;
    }
    if (msg.netRor7d) {
      json["netRor7d"] = msg.netRor7d;
    }
    if (msg.netRor30d) {
      json["netRor30d"] = msg.netRor30d;
    }
    if (msg.profitRate) {
      json["profitRate"] = msg.profitRate;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pair, json: any): Pair {
    const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
    if (_baseAssetId_) {
      msg.baseAssetId = _baseAssetId_;
    }
    const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
    if (_quoteAssetId_) {
      msg.quoteAssetId = _quoteAssetId_;
    }
    const _baseAmount_ = json["baseAmount"] ?? json["base_amount"];
    if (_baseAmount_) {
      msg.baseAmount = _baseAmount_;
    }
    const _quoteAmount_ = json["quoteAmount"] ?? json["quote_amount"];
    if (_quoteAmount_) {
      msg.quoteAmount = _quoteAmount_;
    }
    const _share_ = json["share"];
    if (_share_) {
      msg.share = _share_;
    }
    const _liquidity_ = json["liquidity"];
    if (_liquidity_) {
      msg.liquidity = _liquidity_;
    }
    const _liquidityAssetId_ =
      json["liquidityAssetId"] ?? json["liquidity_asset_id"];
    if (_liquidityAssetId_) {
      msg.liquidityAssetId = _liquidityAssetId_;
    }
    const _routeId_ = json["routeId"] ?? json["route_id"];
    if (_routeId_) {
      msg.routeId = protoscript.parseNumber(_routeId_);
    }
    const _feePercent_ = json["feePercent"] ?? json["fee_percent"];
    if (_feePercent_) {
      msg.feePercent = _feePercent_;
    }
    const _maxLiquidity_ = json["maxLiquidity"] ?? json["max_liquidity"];
    if (_maxLiquidity_) {
      msg.maxLiquidity = _maxLiquidity_;
    }
    const _baseValue_ = json["baseValue"] ?? json["base_value"];
    if (_baseValue_) {
      msg.baseValue = _baseValue_;
    }
    const _quoteValue_ = json["quoteValue"] ?? json["quote_value"];
    if (_quoteValue_) {
      msg.quoteValue = _quoteValue_;
    }
    const _volume24h_ = json["volume24h"] ?? json["volume_24h"];
    if (_volume24h_) {
      msg.volume24h = _volume24h_;
    }
    const _fee24h_ = json["fee24h"] ?? json["fee_24h"];
    if (_fee24h_) {
      msg.fee24h = _fee24h_;
    }
    const _transactionCount24h_ =
      json["transactionCount24h"] ?? json["transaction_count_24h"];
    if (_transactionCount24h_) {
      msg.transactionCount24h = protoscript.parseNumber(_transactionCount24h_);
    }
    const _swapMethod_ = json["swapMethod"] ?? json["swap_method"];
    if (_swapMethod_) {
      msg.swapMethod = _swapMethod_;
    }
    const _version_ = json["version"];
    if (_version_) {
      msg.version = protoscript.parseNumber(_version_);
    }
    const _baseVolume24h_ = json["baseVolume24h"] ?? json["base_volume_24h"];
    if (_baseVolume24h_) {
      msg.baseVolume24h = _baseVolume24h_;
    }
    const _quoteVolume24h_ = json["quoteVolume24h"] ?? json["quote_volume_24h"];
    if (_quoteVolume24h_) {
      msg.quoteVolume24h = _quoteVolume24h_;
    }
    const _netRor24h_ = json["netRor24h"] ?? json["net_ror_24h"];
    if (_netRor24h_) {
      msg.netRor24h = _netRor24h_;
    }
    const _netRor7d_ = json["netRor7d"] ?? json["net_ror_7d"];
    if (_netRor7d_) {
      msg.netRor7d = _netRor7d_;
    }
    const _netRor30d_ = json["netRor30d"] ?? json["net_ror_30d"];
    if (_netRor30d_) {
      msg.netRor30d = _netRor30d_;
    }
    const _profitRate_ = json["profitRate"] ?? json["profit_rate"];
    if (_profitRate_) {
      msg.profitRate = _profitRate_;
    }
    return msg;
  },
};

export const DepositJSON = {
  /**
   * Serializes Deposit to JSON.
   */
  encode: function (msg: PartialDeep<Deposit>): string {
    return JSON.stringify(DepositJSON._writeMessage(msg));
  },

  /**
   * Deserializes Deposit from JSON.
   */
  decode: function (json: string): Deposit {
    return DepositJSON._readMessage(DepositJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Deposit with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Deposit>): Deposit {
    return {
      id: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      state: Deposit.State._fromInt(0),
      userId: "",
      followId: "",
      baseAssetId: "",
      baseAmount: "",
      quoteAssetId: "",
      quoteAmount: "",
      slippage: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Deposit>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.state && DepositJSON.State._toInt(msg.state)) {
      json["state"] = msg.state;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.followId) {
      json["followId"] = msg.followId;
    }
    if (msg.baseAssetId) {
      json["baseAssetId"] = msg.baseAssetId;
    }
    if (msg.baseAmount) {
      json["baseAmount"] = msg.baseAmount;
    }
    if (msg.quoteAssetId) {
      json["quoteAssetId"] = msg.quoteAssetId;
    }
    if (msg.quoteAmount) {
      json["quoteAmount"] = msg.quoteAmount;
    }
    if (msg.slippage) {
      json["slippage"] = msg.slippage;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Deposit, json: any): Deposit {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _state_ = json["state"];
    if (_state_) {
      msg.state = Deposit.State._fromInt(_state_);
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _followId_ = json["followId"] ?? json["follow_id"];
    if (_followId_) {
      msg.followId = _followId_;
    }
    const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
    if (_baseAssetId_) {
      msg.baseAssetId = _baseAssetId_;
    }
    const _baseAmount_ = json["baseAmount"] ?? json["base_amount"];
    if (_baseAmount_) {
      msg.baseAmount = _baseAmount_;
    }
    const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
    if (_quoteAssetId_) {
      msg.quoteAssetId = _quoteAssetId_;
    }
    const _quoteAmount_ = json["quoteAmount"] ?? json["quote_amount"];
    if (_quoteAmount_) {
      msg.quoteAmount = _quoteAmount_;
    }
    const _slippage_ = json["slippage"];
    if (_slippage_) {
      msg.slippage = _slippage_;
    }
    return msg;
  },

  State: {
    _: "_",
    Pending: "Pending",
    Cancelled: "Cancelled",
    Done: "Done",
    /**
     * @private
     */
    _fromInt: function (i: number): Deposit.State {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Pending";
        }
        case 2: {
          return "Cancelled";
        }
        case 3: {
          return "Done";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Deposit.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Deposit.State): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Pending": {
          return 1;
        }
        case "Cancelled": {
          return 2;
        }
        case "Done": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const TransactionJSON = {
  /**
   * Serializes Transaction to JSON.
   */
  encode: function (msg: PartialDeep<Transaction>): string {
    return JSON.stringify(TransactionJSON._writeMessage(msg));
  },

  /**
   * Deserializes Transaction from JSON.
   */
  decode: function (json: string): Transaction {
    return TransactionJSON._readMessage(
      TransactionJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes Transaction with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Transaction>): Transaction {
    return {
      id: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      userId: "",
      type: Transaction.Type._fromInt(0),
      baseAssetId: "",
      quoteAssetId: "",
      baseAmount: "",
      quoteAmount: "",
      feeAssetId: "",
      feeAmount: "",
      payAssetId: "",
      filledAssetId: "",
      funds: "",
      amount: "",
      value: "",
      feeValue: "",
      followId: "",
      liquidity: "",
      groupId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Transaction>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.type && TransactionJSON.Type._toInt(msg.type)) {
      json["type"] = msg.type;
    }
    if (msg.baseAssetId) {
      json["baseAssetId"] = msg.baseAssetId;
    }
    if (msg.quoteAssetId) {
      json["quoteAssetId"] = msg.quoteAssetId;
    }
    if (msg.baseAmount) {
      json["baseAmount"] = msg.baseAmount;
    }
    if (msg.quoteAmount) {
      json["quoteAmount"] = msg.quoteAmount;
    }
    if (msg.feeAssetId) {
      json["feeAssetId"] = msg.feeAssetId;
    }
    if (msg.feeAmount) {
      json["feeAmount"] = msg.feeAmount;
    }
    if (msg.payAssetId) {
      json["payAssetId"] = msg.payAssetId;
    }
    if (msg.filledAssetId) {
      json["filledAssetId"] = msg.filledAssetId;
    }
    if (msg.funds) {
      json["funds"] = msg.funds;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.value) {
      json["value"] = msg.value;
    }
    if (msg.feeValue) {
      json["feeValue"] = msg.feeValue;
    }
    if (msg.followId) {
      json["followId"] = msg.followId;
    }
    if (msg.liquidity) {
      json["liquidity"] = msg.liquidity;
    }
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Transaction, json: any): Transaction {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _type_ = json["type"];
    if (_type_) {
      msg.type = Transaction.Type._fromInt(_type_);
    }
    const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
    if (_baseAssetId_) {
      msg.baseAssetId = _baseAssetId_;
    }
    const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
    if (_quoteAssetId_) {
      msg.quoteAssetId = _quoteAssetId_;
    }
    const _baseAmount_ = json["baseAmount"] ?? json["base_amount"];
    if (_baseAmount_) {
      msg.baseAmount = _baseAmount_;
    }
    const _quoteAmount_ = json["quoteAmount"] ?? json["quote_amount"];
    if (_quoteAmount_) {
      msg.quoteAmount = _quoteAmount_;
    }
    const _feeAssetId_ = json["feeAssetId"] ?? json["fee_asset_id"];
    if (_feeAssetId_) {
      msg.feeAssetId = _feeAssetId_;
    }
    const _feeAmount_ = json["feeAmount"] ?? json["fee_amount"];
    if (_feeAmount_) {
      msg.feeAmount = _feeAmount_;
    }
    const _payAssetId_ = json["payAssetId"] ?? json["pay_asset_id"];
    if (_payAssetId_) {
      msg.payAssetId = _payAssetId_;
    }
    const _filledAssetId_ = json["filledAssetId"] ?? json["filled_asset_id"];
    if (_filledAssetId_) {
      msg.filledAssetId = _filledAssetId_;
    }
    const _funds_ = json["funds"];
    if (_funds_) {
      msg.funds = _funds_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _value_ = json["value"];
    if (_value_) {
      msg.value = _value_;
    }
    const _feeValue_ = json["feeValue"] ?? json["fee_value"];
    if (_feeValue_) {
      msg.feeValue = _feeValue_;
    }
    const _followId_ = json["followId"] ?? json["follow_id"];
    if (_followId_) {
      msg.followId = _followId_;
    }
    const _liquidity_ = json["liquidity"];
    if (_liquidity_) {
      msg.liquidity = _liquidity_;
    }
    const _groupId_ = json["groupId"] ?? json["group_id"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },

  Type: {
    _: "_",
    Add: "Add",
    Remove: "Remove",
    Swap: "Swap",
    /**
     * @private
     */
    _fromInt: function (i: number): Transaction.Type {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Add";
        }
        case 2: {
          return "Remove";
        }
        case 3: {
          return "Swap";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Transaction.Type;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Transaction.Type): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Add": {
          return 1;
        }
        case "Remove": {
          return 2;
        }
        case "Swap": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const MultisigGroupJSON = {
  /**
   * Serializes MultisigGroup to JSON.
   */
  encode: function (msg: PartialDeep<MultisigGroup>): string {
    return JSON.stringify(MultisigGroupJSON._writeMessage(msg));
  },

  /**
   * Deserializes MultisigGroup from JSON.
   */
  decode: function (json: string): MultisigGroup {
    return MultisigGroupJSON._readMessage(
      MultisigGroupJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes MultisigGroup with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MultisigGroup>): MultisigGroup {
    return {
      members: [],
      threshold: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MultisigGroup>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.members?.length) {
      json["members"] = msg.members;
    }
    if (msg.threshold) {
      json["threshold"] = msg.threshold;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MultisigGroup, json: any): MultisigGroup {
    const _members_ = json["members"];
    if (_members_) {
      msg.members = _members_;
    }
    const _threshold_ = json["threshold"];
    if (_threshold_) {
      msg.threshold = protoscript.parseNumber(_threshold_);
    }
    return msg;
  },
};

export const TransferJSON = {
  /**
   * Serializes Transfer to JSON.
   */
  encode: function (msg: PartialDeep<Transfer>): string {
    return JSON.stringify(TransferJSON._writeMessage(msg));
  },

  /**
   * Deserializes Transfer from JSON.
   */
  decode: function (json: string): Transfer {
    return TransferJSON._readMessage(
      TransferJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes Transfer with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Transfer>): Transfer {
    return {
      id: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      assetId: "",
      amount: "",
      memo: "",
      receiver: MultisigGroupJSON.initialize(),
      txHash: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Transfer>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.memo) {
      json["memo"] = msg.memo;
    }
    if (msg.receiver) {
      const _receiver_ = MultisigGroupJSON._writeMessage(msg.receiver);
      if (Object.keys(_receiver_).length > 0) {
        json["receiver"] = _receiver_;
      }
    }
    if (msg.txHash) {
      json["txHash"] = msg.txHash;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Transfer, json: any): Transfer {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _memo_ = json["memo"];
    if (_memo_) {
      msg.memo = _memo_;
    }
    const _receiver_ = json["receiver"];
    if (_receiver_) {
      MultisigGroupJSON._readMessage(msg.receiver, _receiver_);
    }
    const _txHash_ = json["txHash"] ?? json["tx_hash"];
    if (_txHash_) {
      msg.txHash = _txHash_;
    }
    return msg;
  },
};

export const OrderJSON = {
  /**
   * Serializes Order to JSON.
   */
  encode: function (msg: PartialDeep<Order>): string {
    return JSON.stringify(OrderJSON._writeMessage(msg));
  },

  /**
   * Deserializes Order from JSON.
   */
  decode: function (json: string): Order {
    return OrderJSON._readMessage(OrderJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Order with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Order>): Order {
    return {
      id: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      userId: "",
      state: Order.State._fromInt(0),
      payAssetId: "",
      fillAssetId: "",
      payAmount: "",
      fillAmount: "",
      minAmount: "",
      routes: "",
      routeAssets: [],
      transactions: [],
      routePrice: "",
      priceImpact: "",
      followId: "",
      funds: "",
      amount: "",
      transfers: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Order>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.state && OrderJSON.State._toInt(msg.state)) {
      json["state"] = msg.state;
    }
    if (msg.payAssetId) {
      json["payAssetId"] = msg.payAssetId;
    }
    if (msg.fillAssetId) {
      json["fillAssetId"] = msg.fillAssetId;
    }
    if (msg.payAmount) {
      json["payAmount"] = msg.payAmount;
    }
    if (msg.fillAmount) {
      json["fillAmount"] = msg.fillAmount;
    }
    if (msg.minAmount) {
      json["minAmount"] = msg.minAmount;
    }
    if (msg.routes) {
      json["routes"] = msg.routes;
    }
    if (msg.routeAssets?.length) {
      json["routeAssets"] = msg.routeAssets;
    }
    if (msg.transactions?.length) {
      json["transactions"] = msg.transactions.map(
        TransactionJSON._writeMessage,
      );
    }
    if (msg.routePrice) {
      json["routePrice"] = msg.routePrice;
    }
    if (msg.priceImpact) {
      json["priceImpact"] = msg.priceImpact;
    }
    if (msg.followId) {
      json["followId"] = msg.followId;
    }
    if (msg.funds) {
      json["funds"] = msg.funds;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.transfers?.length) {
      json["transfers"] = msg.transfers.map(TransferJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Order, json: any): Order {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _state_ = json["state"];
    if (_state_) {
      msg.state = Order.State._fromInt(_state_);
    }
    const _payAssetId_ = json["payAssetId"] ?? json["pay_asset_id"];
    if (_payAssetId_) {
      msg.payAssetId = _payAssetId_;
    }
    const _fillAssetId_ = json["fillAssetId"] ?? json["fill_asset_id"];
    if (_fillAssetId_) {
      msg.fillAssetId = _fillAssetId_;
    }
    const _payAmount_ = json["payAmount"] ?? json["pay_amount"];
    if (_payAmount_) {
      msg.payAmount = _payAmount_;
    }
    const _fillAmount_ = json["fillAmount"] ?? json["fill_amount"];
    if (_fillAmount_) {
      msg.fillAmount = _fillAmount_;
    }
    const _minAmount_ = json["minAmount"] ?? json["min_amount"];
    if (_minAmount_) {
      msg.minAmount = _minAmount_;
    }
    const _routes_ = json["routes"];
    if (_routes_) {
      msg.routes = _routes_;
    }
    const _routeAssets_ = json["routeAssets"] ?? json["route_assets"];
    if (_routeAssets_) {
      msg.routeAssets = _routeAssets_;
    }
    const _transactions_ = json["transactions"];
    if (_transactions_) {
      for (const item of _transactions_) {
        const m = TransactionJSON.initialize();
        TransactionJSON._readMessage(m, item);
        msg.transactions.push(m);
      }
    }
    const _routePrice_ = json["routePrice"] ?? json["route_price"];
    if (_routePrice_) {
      msg.routePrice = _routePrice_;
    }
    const _priceImpact_ = json["priceImpact"] ?? json["price_impact"];
    if (_priceImpact_) {
      msg.priceImpact = _priceImpact_;
    }
    const _followId_ = json["followId"] ?? json["follow_id"];
    if (_followId_) {
      msg.followId = _followId_;
    }
    const _funds_ = json["funds"];
    if (_funds_) {
      msg.funds = _funds_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _transfers_ = json["transfers"];
    if (_transfers_) {
      for (const item of _transfers_) {
        const m = TransferJSON.initialize();
        TransferJSON._readMessage(m, item);
        msg.transfers.push(m);
      }
    }
    return msg;
  },

  State: {
    _: "_",
    Trading: "Trading",
    Rejected: "Rejected",
    Done: "Done",
    /**
     * @private
     */
    _fromInt: function (i: number): Order.State {
      switch (i) {
        case 0: {
          return "_";
        }
        case 1: {
          return "Trading";
        }
        case 2: {
          return "Rejected";
        }
        case 3: {
          return "Done";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Order.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Order.State): number {
      switch (i) {
        case "_": {
          return 0;
        }
        case "Trading": {
          return 1;
        }
        case "Rejected": {
          return 2;
        }
        case "Done": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const ProposalJSON = {
  /**
   * Serializes Proposal to JSON.
   */
  encode: function (msg: PartialDeep<Proposal>): string {
    return JSON.stringify(ProposalJSON._writeMessage(msg));
  },

  /**
   * Deserializes Proposal from JSON.
   */
  decode: function (json: string): Proposal {
    return ProposalJSON._readMessage(
      ProposalJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes Proposal with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Proposal>): Proposal {
    return {
      id: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      passedAt: protoscript.TimestampJSON.initialize(),
      creator: "",
      assetId: "",
      amount: "",
      action: "",
      data: "",
      votes: [],
      items: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Proposal>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.passedAt && msg.passedAt.seconds && msg.passedAt.nanos) {
      json["passedAt"] = protoscript.serializeTimestamp(msg.passedAt);
    }
    if (msg.creator) {
      json["creator"] = msg.creator;
    }
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.action) {
      json["action"] = msg.action;
    }
    if (msg.data) {
      json["data"] = msg.data;
    }
    if (msg.votes?.length) {
      json["votes"] = msg.votes;
    }
    if (msg.items?.length) {
      json["items"] = msg.items.map(ProposalJSON.Item._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Proposal, json: any): Proposal {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _passedAt_ = json["passedAt"] ?? json["passed_at"];
    if (_passedAt_) {
      msg.passedAt = protoscript.parseTimestamp(_passedAt_);
    }
    const _creator_ = json["creator"];
    if (_creator_) {
      msg.creator = _creator_;
    }
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _action_ = json["action"];
    if (_action_) {
      msg.action = _action_;
    }
    const _data_ = json["data"];
    if (_data_) {
      msg.data = _data_;
    }
    const _votes_ = json["votes"];
    if (_votes_) {
      msg.votes = _votes_;
    }
    const _items_ = json["items"];
    if (_items_) {
      for (const item of _items_) {
        const m = ProposalJSON.Item.initialize();
        ProposalJSON.Item._readMessage(m, item);
        msg.items.push(m);
      }
    }
    return msg;
  },

  Item: {
    /**
     * Serializes Proposal.Item to JSON.
     */
    encode: function (msg: PartialDeep<Proposal.Item>): string {
      return JSON.stringify(ProposalJSON.Item._writeMessage(msg));
    },

    /**
     * Deserializes Proposal.Item from JSON.
     */
    decode: function (json: string): Proposal.Item {
      return ProposalJSON.Item._readMessage(
        ProposalJSON.Item.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes Proposal.Item with all fields set to their default value.
     */
    initialize: function (msg?: Partial<Proposal.Item>): Proposal.Item {
      return {
        key: "",
        value: "",
        hint: "",
        action: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<Proposal.Item>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      if (msg.hint) {
        json["hint"] = msg.hint;
      }
      if (msg.action) {
        json["action"] = msg.action;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (msg: Proposal.Item, json: any): Proposal.Item {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      const _hint_ = json["hint"];
      if (_hint_) {
        msg.hint = _hint_;
      }
      const _action_ = json["action"];
      if (_action_) {
        msg.action = _action_;
      }
      return msg;
    },
  },
};

export const RoomJSON = {
  /**
   * Serializes Room to JSON.
   */
  encode: function (msg: PartialDeep<Room>): string {
    return JSON.stringify(RoomJSON._writeMessage(msg));
  },

  /**
   * Deserializes Room from JSON.
   */
  decode: function (json: string): Room {
    return RoomJSON._readMessage(RoomJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Room with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Room>): Room {
    return {
      id: "",
      baseAssetId: "",
      quoteAssetId: "",
      admins: [],
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Room>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.baseAssetId) {
      json["baseAssetId"] = msg.baseAssetId;
    }
    if (msg.quoteAssetId) {
      json["quoteAssetId"] = msg.quoteAssetId;
    }
    if (msg.admins?.length) {
      json["admins"] = msg.admins;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Room, json: any): Room {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
    if (_baseAssetId_) {
      msg.baseAssetId = _baseAssetId_;
    }
    const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
    if (_quoteAssetId_) {
      msg.quoteAssetId = _quoteAssetId_;
    }
    const _admins_ = json["admins"];
    if (_admins_) {
      msg.admins = _admins_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UniswapReqJSON = {
  /**
   * Serializes UniswapReq to JSON.
   */
  encode: function (_msg?: PartialDeep<UniswapReq>): string {
    return "{}";
  },

  /**
   * Deserializes UniswapReq from JSON.
   */
  decode: function (_json?: string): UniswapReq {
    return {};
  },

  /**
   * Initializes UniswapReq with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UniswapReq>): UniswapReq {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<UniswapReq>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: UniswapReq, _json: any): UniswapReq {
    return msg;
  },

  ListAssets: {
    /**
     * Serializes UniswapReq.ListAssets to JSON.
     */
    encode: function (_msg?: PartialDeep<UniswapReq.ListAssets>): string {
      return "{}";
    },

    /**
     * Deserializes UniswapReq.ListAssets from JSON.
     */
    decode: function (_json?: string): UniswapReq.ListAssets {
      return {};
    },

    /**
     * Initializes UniswapReq.ListAssets with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListAssets>,
    ): UniswapReq.ListAssets {
      return {
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      _msg: PartialDeep<UniswapReq.ListAssets>,
    ): Record<string, unknown> {
      return {};
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListAssets,
      _json: any,
    ): UniswapReq.ListAssets {
      return msg;
    },
  },

  ReadAsset: {
    /**
     * Serializes UniswapReq.ReadAsset to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.ReadAsset>): string {
      return JSON.stringify(UniswapReqJSON.ReadAsset._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadAsset from JSON.
     */
    decode: function (json: string): UniswapReq.ReadAsset {
      return UniswapReqJSON.ReadAsset._readMessage(
        UniswapReqJSON.ReadAsset.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.ReadAsset with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadAsset>,
    ): UniswapReq.ReadAsset {
      return {
        assetId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadAsset>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.assetId) {
        json["assetId"] = msg.assetId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadAsset,
      json: any,
    ): UniswapReq.ReadAsset {
      const _assetId_ = json["assetId"] ?? json["asset_id"];
      if (_assetId_) {
        msg.assetId = _assetId_;
      }
      return msg;
    },
  },

  ReadPair: {
    /**
     * Serializes UniswapReq.ReadPair to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.ReadPair>): string {
      return JSON.stringify(UniswapReqJSON.ReadPair._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadPair from JSON.
     */
    decode: function (json: string): UniswapReq.ReadPair {
      return UniswapReqJSON.ReadPair._readMessage(
        UniswapReqJSON.ReadPair.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.ReadPair with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadPair>,
    ): UniswapReq.ReadPair {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadPair>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.baseAssetId) {
        json["baseAssetId"] = msg.baseAssetId;
      }
      if (msg.quoteAssetId) {
        json["quoteAssetId"] = msg.quoteAssetId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadPair,
      json: any,
    ): UniswapReq.ReadPair {
      const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
      if (_baseAssetId_) {
        msg.baseAssetId = _baseAssetId_;
      }
      const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
      if (_quoteAssetId_) {
        msg.quoteAssetId = _quoteAssetId_;
      }
      return msg;
    },
  },

  ListPairs: {
    /**
     * Serializes UniswapReq.ListPairs to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.ListPairs>): string {
      return JSON.stringify(UniswapReqJSON.ListPairs._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ListPairs from JSON.
     */
    decode: function (json: string): UniswapReq.ListPairs {
      return UniswapReqJSON.ListPairs._readMessage(
        UniswapReqJSON.ListPairs.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.ListPairs with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListPairs>,
    ): UniswapReq.ListPairs {
      return {
        brokerId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ListPairs>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.brokerId) {
        json["brokerId"] = msg.brokerId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListPairs,
      json: any,
    ): UniswapReq.ListPairs {
      const _brokerId_ = json["brokerId"] ?? json["broker_id"];
      if (_brokerId_) {
        msg.brokerId = _brokerId_;
      }
      return msg;
    },
  },

  ReadDeposit: {
    /**
     * Serializes UniswapReq.ReadDeposit to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.ReadDeposit>): string {
      return JSON.stringify(UniswapReqJSON.ReadDeposit._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadDeposit from JSON.
     */
    decode: function (json: string): UniswapReq.ReadDeposit {
      return UniswapReqJSON.ReadDeposit._readMessage(
        UniswapReqJSON.ReadDeposit.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.ReadDeposit with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadDeposit>,
    ): UniswapReq.ReadDeposit {
      return {
        followId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadDeposit>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.followId) {
        json["followId"] = msg.followId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadDeposit,
      json: any,
    ): UniswapReq.ReadDeposit {
      const _followId_ = json["followId"] ?? json["follow_id"];
      if (_followId_) {
        msg.followId = _followId_;
      }
      return msg;
    },
  },

  ListPendingDeposits: {
    /**
     * Serializes UniswapReq.ListPendingDeposits to JSON.
     */
    encode: function (
      msg: PartialDeep<UniswapReq.ListPendingDeposits>,
    ): string {
      return JSON.stringify(
        UniswapReqJSON.ListPendingDeposits._writeMessage(msg),
      );
    },

    /**
     * Deserializes UniswapReq.ListPendingDeposits from JSON.
     */
    decode: function (json: string): UniswapReq.ListPendingDeposits {
      return UniswapReqJSON.ListPendingDeposits._readMessage(
        UniswapReqJSON.ListPendingDeposits.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.ListPendingDeposits with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListPendingDeposits>,
    ): UniswapReq.ListPendingDeposits {
      return {
        limit: 0,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ListPendingDeposits>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.limit) {
        json["limit"] = msg.limit;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListPendingDeposits,
      json: any,
    ): UniswapReq.ListPendingDeposits {
      const _limit_ = json["limit"];
      if (_limit_) {
        msg.limit = protoscript.parseNumber(_limit_);
      }
      return msg;
    },
  },

  ReadTransaction: {
    /**
     * Serializes UniswapReq.ReadTransaction to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.ReadTransaction>): string {
      return JSON.stringify(UniswapReqJSON.ReadTransaction._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadTransaction from JSON.
     */
    decode: function (json: string): UniswapReq.ReadTransaction {
      return UniswapReqJSON.ReadTransaction._readMessage(
        UniswapReqJSON.ReadTransaction.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.ReadTransaction with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadTransaction>,
    ): UniswapReq.ReadTransaction {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        followId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadTransaction>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.baseAssetId) {
        json["baseAssetId"] = msg.baseAssetId;
      }
      if (msg.quoteAssetId) {
        json["quoteAssetId"] = msg.quoteAssetId;
      }
      if (msg.followId) {
        json["followId"] = msg.followId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadTransaction,
      json: any,
    ): UniswapReq.ReadTransaction {
      const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
      if (_baseAssetId_) {
        msg.baseAssetId = _baseAssetId_;
      }
      const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
      if (_quoteAssetId_) {
        msg.quoteAssetId = _quoteAssetId_;
      }
      const _followId_ = json["followId"] ?? json["follow_id"];
      if (_followId_) {
        msg.followId = _followId_;
      }
      return msg;
    },
  },

  ReadOrder: {
    /**
     * Serializes UniswapReq.ReadOrder to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.ReadOrder>): string {
      return JSON.stringify(UniswapReqJSON.ReadOrder._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ReadOrder from JSON.
     */
    decode: function (json: string): UniswapReq.ReadOrder {
      return UniswapReqJSON.ReadOrder._readMessage(
        UniswapReqJSON.ReadOrder.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.ReadOrder with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ReadOrder>,
    ): UniswapReq.ReadOrder {
      return {
        followId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ReadOrder>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.followId) {
        json["followId"] = msg.followId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ReadOrder,
      json: any,
    ): UniswapReq.ReadOrder {
      const _followId_ = json["followId"] ?? json["follow_id"];
      if (_followId_) {
        msg.followId = _followId_;
      }
      return msg;
    },
  },

  PreOrder: {
    /**
     * Serializes UniswapReq.PreOrder to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.PreOrder>): string {
      return JSON.stringify(UniswapReqJSON.PreOrder._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.PreOrder from JSON.
     */
    decode: function (json: string): UniswapReq.PreOrder {
      return UniswapReqJSON.PreOrder._readMessage(
        UniswapReqJSON.PreOrder.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.PreOrder with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.PreOrder>,
    ): UniswapReq.PreOrder {
      return {
        payAssetId: "",
        fillAssetId: "",
        payAmount: "",
        fillAmount: "",
        minAmount: "",
        funds: "",
        amount: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.PreOrder>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.payAssetId) {
        json["payAssetId"] = msg.payAssetId;
      }
      if (msg.fillAssetId) {
        json["fillAssetId"] = msg.fillAssetId;
      }
      if (msg.payAmount) {
        json["payAmount"] = msg.payAmount;
      }
      if (msg.fillAmount) {
        json["fillAmount"] = msg.fillAmount;
      }
      if (msg.minAmount) {
        json["minAmount"] = msg.minAmount;
      }
      if (msg.funds) {
        json["funds"] = msg.funds;
      }
      if (msg.amount) {
        json["amount"] = msg.amount;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.PreOrder,
      json: any,
    ): UniswapReq.PreOrder {
      const _payAssetId_ = json["payAssetId"] ?? json["pay_asset_id"];
      if (_payAssetId_) {
        msg.payAssetId = _payAssetId_;
      }
      const _fillAssetId_ = json["fillAssetId"] ?? json["fill_asset_id"];
      if (_fillAssetId_) {
        msg.fillAssetId = _fillAssetId_;
      }
      const _payAmount_ = json["payAmount"] ?? json["pay_amount"];
      if (_payAmount_) {
        msg.payAmount = _payAmount_;
      }
      const _fillAmount_ = json["fillAmount"] ?? json["fill_amount"];
      if (_fillAmount_) {
        msg.fillAmount = _fillAmount_;
      }
      const _minAmount_ = json["minAmount"] ?? json["min_amount"];
      if (_minAmount_) {
        msg.minAmount = _minAmount_;
      }
      const _funds_ = json["funds"];
      if (_funds_) {
        msg.funds = _funds_;
      }
      const _amount_ = json["amount"];
      if (_amount_) {
        msg.amount = _amount_;
      }
      return msg;
    },
  },

  ListTransactions: {
    /**
     * Serializes UniswapReq.ListTransactions to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.ListTransactions>): string {
      return JSON.stringify(UniswapReqJSON.ListTransactions._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ListTransactions from JSON.
     */
    decode: function (json: string): UniswapReq.ListTransactions {
      return UniswapReqJSON.ListTransactions._readMessage(
        UniswapReqJSON.ListTransactions.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.ListTransactions with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListTransactions>,
    ): UniswapReq.ListTransactions {
      return {
        baseAssetId: "",
        quoteAssetId: "",
        type: "",
        cursor: "",
        limit: 0n,
        userId: "",
        order: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ListTransactions>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.baseAssetId) {
        json["baseAssetId"] = msg.baseAssetId;
      }
      if (msg.quoteAssetId) {
        json["quoteAssetId"] = msg.quoteAssetId;
      }
      if (msg.type) {
        json["type"] = msg.type;
      }
      if (msg.cursor) {
        json["cursor"] = msg.cursor;
      }
      if (msg.limit) {
        json["limit"] = String(msg.limit);
      }
      if (msg.userId) {
        json["userId"] = msg.userId;
      }
      if (msg.order) {
        json["order"] = msg.order;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListTransactions,
      json: any,
    ): UniswapReq.ListTransactions {
      const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
      if (_baseAssetId_) {
        msg.baseAssetId = _baseAssetId_;
      }
      const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
      if (_quoteAssetId_) {
        msg.quoteAssetId = _quoteAssetId_;
      }
      const _type_ = json["type"];
      if (_type_) {
        msg.type = _type_;
      }
      const _cursor_ = json["cursor"];
      if (_cursor_) {
        msg.cursor = _cursor_;
      }
      const _limit_ = json["limit"];
      if (_limit_) {
        msg.limit = BigInt(_limit_);
      }
      const _userId_ = json["userId"] ?? json["user_id"];
      if (_userId_) {
        msg.userId = _userId_;
      }
      const _order_ = json["order"];
      if (_order_) {
        msg.order = _order_;
      }
      return msg;
    },
  },

  UpdateRoom: {
    /**
     * Serializes UniswapReq.UpdateRoom to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.UpdateRoom>): string {
      return JSON.stringify(UniswapReqJSON.UpdateRoom._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.UpdateRoom from JSON.
     */
    decode: function (json: string): UniswapReq.UpdateRoom {
      return UniswapReqJSON.UpdateRoom._readMessage(
        UniswapReqJSON.UpdateRoom.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.UpdateRoom with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.UpdateRoom>,
    ): UniswapReq.UpdateRoom {
      return {
        id: "",
        baseAssetId: "",
        quoteAssetId: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.UpdateRoom>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.id) {
        json["id"] = msg.id;
      }
      if (msg.baseAssetId) {
        json["baseAssetId"] = msg.baseAssetId;
      }
      if (msg.quoteAssetId) {
        json["quoteAssetId"] = msg.quoteAssetId;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.UpdateRoom,
      json: any,
    ): UniswapReq.UpdateRoom {
      const _id_ = json["id"];
      if (_id_) {
        msg.id = _id_;
      }
      const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
      if (_baseAssetId_) {
        msg.baseAssetId = _baseAssetId_;
      }
      const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
      if (_quoteAssetId_) {
        msg.quoteAssetId = _quoteAssetId_;
      }
      return msg;
    },
  },

  FindRoom: {
    /**
     * Serializes UniswapReq.FindRoom to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.FindRoom>): string {
      return JSON.stringify(UniswapReqJSON.FindRoom._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.FindRoom from JSON.
     */
    decode: function (json: string): UniswapReq.FindRoom {
      return UniswapReqJSON.FindRoom._readMessage(
        UniswapReqJSON.FindRoom.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.FindRoom with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.FindRoom>,
    ): UniswapReq.FindRoom {
      return {
        id: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.FindRoom>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.id) {
        json["id"] = msg.id;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.FindRoom,
      json: any,
    ): UniswapReq.FindRoom {
      const _id_ = json["id"];
      if (_id_) {
        msg.id = _id_;
      }
      return msg;
    },
  },

  ListProposals: {
    /**
     * Serializes UniswapReq.ListProposals to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.ListProposals>): string {
      return JSON.stringify(UniswapReqJSON.ListProposals._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.ListProposals from JSON.
     */
    decode: function (json: string): UniswapReq.ListProposals {
      return UniswapReqJSON.ListProposals._readMessage(
        UniswapReqJSON.ListProposals.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.ListProposals with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.ListProposals>,
    ): UniswapReq.ListProposals {
      return {
        cursor: "",
        limit: 0n,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.ListProposals>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.cursor) {
        json["cursor"] = msg.cursor;
      }
      if (msg.limit) {
        json["limit"] = String(msg.limit);
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.ListProposals,
      json: any,
    ): UniswapReq.ListProposals {
      const _cursor_ = json["cursor"];
      if (_cursor_) {
        msg.cursor = _cursor_;
      }
      const _limit_ = json["limit"];
      if (_limit_) {
        msg.limit = BigInt(_limit_);
      }
      return msg;
    },
  },

  FindProposal: {
    /**
     * Serializes UniswapReq.FindProposal to JSON.
     */
    encode: function (msg: PartialDeep<UniswapReq.FindProposal>): string {
      return JSON.stringify(UniswapReqJSON.FindProposal._writeMessage(msg));
    },

    /**
     * Deserializes UniswapReq.FindProposal from JSON.
     */
    decode: function (json: string): UniswapReq.FindProposal {
      return UniswapReqJSON.FindProposal._readMessage(
        UniswapReqJSON.FindProposal.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapReq.FindProposal with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapReq.FindProposal>,
    ): UniswapReq.FindProposal {
      return {
        id: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapReq.FindProposal>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.id) {
        json["id"] = msg.id;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapReq.FindProposal,
      json: any,
    ): UniswapReq.FindProposal {
      const _id_ = json["id"];
      if (_id_) {
        msg.id = _id_;
      }
      return msg;
    },
  },
};

export const UniswapRespJSON = {
  /**
   * Serializes UniswapResp to JSON.
   */
  encode: function (_msg?: PartialDeep<UniswapResp>): string {
    return "{}";
  },

  /**
   * Deserializes UniswapResp from JSON.
   */
  decode: function (_json?: string): UniswapResp {
    return {};
  },

  /**
   * Initializes UniswapResp with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UniswapResp>): UniswapResp {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<UniswapResp>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: UniswapResp, _json: any): UniswapResp {
    return msg;
  },

  ListAssets: {
    /**
     * Serializes UniswapResp.ListAssets to JSON.
     */
    encode: function (msg: PartialDeep<UniswapResp.ListAssets>): string {
      return JSON.stringify(UniswapRespJSON.ListAssets._writeMessage(msg));
    },

    /**
     * Deserializes UniswapResp.ListAssets from JSON.
     */
    decode: function (json: string): UniswapResp.ListAssets {
      return UniswapRespJSON.ListAssets._readMessage(
        UniswapRespJSON.ListAssets.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapResp.ListAssets with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListAssets>,
    ): UniswapResp.ListAssets {
      return {
        assets: [],
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListAssets>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.assets?.length) {
        json["assets"] = msg.assets.map(AssetJSON._writeMessage);
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListAssets,
      json: any,
    ): UniswapResp.ListAssets {
      const _assets_ = json["assets"];
      if (_assets_) {
        for (const item of _assets_) {
          const m = AssetJSON.initialize();
          AssetJSON._readMessage(m, item);
          msg.assets.push(m);
        }
      }
      return msg;
    },
  },

  ListPairs: {
    /**
     * Serializes UniswapResp.ListPairs to JSON.
     */
    encode: function (msg: PartialDeep<UniswapResp.ListPairs>): string {
      return JSON.stringify(UniswapRespJSON.ListPairs._writeMessage(msg));
    },

    /**
     * Deserializes UniswapResp.ListPairs from JSON.
     */
    decode: function (json: string): UniswapResp.ListPairs {
      return UniswapRespJSON.ListPairs._readMessage(
        UniswapRespJSON.ListPairs.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapResp.ListPairs with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListPairs>,
    ): UniswapResp.ListPairs {
      return {
        pairs: [],
        pairCount: 0,
        transactionCount24h: 0,
        liquidityValue: "",
        volume24h: "",
        fee24h: "",
        ts: 0,
        whitelists: [],
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListPairs>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.pairs?.length) {
        json["pairs"] = msg.pairs.map(PairJSON._writeMessage);
      }
      if (msg.pairCount) {
        json["pairCount"] = msg.pairCount;
      }
      if (msg.transactionCount24h) {
        json["transactionCount24h"] = msg.transactionCount24h;
      }
      if (msg.liquidityValue) {
        json["liquidityValue"] = msg.liquidityValue;
      }
      if (msg.volume24h) {
        json["volume24h"] = msg.volume24h;
      }
      if (msg.fee24h) {
        json["fee24h"] = msg.fee24h;
      }
      if (msg.ts) {
        json["ts"] = msg.ts;
      }
      if (msg.whitelists?.length) {
        json["whitelists"] = msg.whitelists;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListPairs,
      json: any,
    ): UniswapResp.ListPairs {
      const _pairs_ = json["pairs"];
      if (_pairs_) {
        for (const item of _pairs_) {
          const m = PairJSON.initialize();
          PairJSON._readMessage(m, item);
          msg.pairs.push(m);
        }
      }
      const _pairCount_ = json["pairCount"] ?? json["pair_count"];
      if (_pairCount_) {
        msg.pairCount = protoscript.parseNumber(_pairCount_);
      }
      const _transactionCount24h_ =
        json["transactionCount24h"] ?? json["transaction_count_24h"];
      if (_transactionCount24h_) {
        msg.transactionCount24h = protoscript.parseNumber(
          _transactionCount24h_,
        );
      }
      const _liquidityValue_ =
        json["liquidityValue"] ?? json["liquidity_value"];
      if (_liquidityValue_) {
        msg.liquidityValue = _liquidityValue_;
      }
      const _volume24h_ = json["volume24h"] ?? json["volume_24h"];
      if (_volume24h_) {
        msg.volume24h = _volume24h_;
      }
      const _fee24h_ = json["fee24h"] ?? json["fee_24h"];
      if (_fee24h_) {
        msg.fee24h = _fee24h_;
      }
      const _ts_ = json["ts"];
      if (_ts_) {
        msg.ts = protoscript.parseDouble(_ts_);
      }
      const _whitelists_ = json["whitelists"];
      if (_whitelists_) {
        msg.whitelists = _whitelists_;
      }
      return msg;
    },
  },

  ListTransactionsSummary: {
    /**
     * Serializes UniswapResp.ListTransactionsSummary to JSON.
     */
    encode: function (
      msg: PartialDeep<UniswapResp.ListTransactionsSummary>,
    ): string {
      return JSON.stringify(
        UniswapRespJSON.ListTransactionsSummary._writeMessage(msg),
      );
    },

    /**
     * Deserializes UniswapResp.ListTransactionsSummary from JSON.
     */
    decode: function (json: string): UniswapResp.ListTransactionsSummary {
      return UniswapRespJSON.ListTransactionsSummary._readMessage(
        UniswapRespJSON.ListTransactionsSummary.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapResp.ListTransactionsSummary with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListTransactionsSummary>,
    ): UniswapResp.ListTransactionsSummary {
      return {
        totalAddBaseAmount: "",
        totalAddQuoteAmount: "",
        totalRemoveBaseAmount: "",
        totalRemoveQuoteAmount: "",
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListTransactionsSummary>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.totalAddBaseAmount) {
        json["totalAddBaseAmount"] = msg.totalAddBaseAmount;
      }
      if (msg.totalAddQuoteAmount) {
        json["totalAddQuoteAmount"] = msg.totalAddQuoteAmount;
      }
      if (msg.totalRemoveBaseAmount) {
        json["totalRemoveBaseAmount"] = msg.totalRemoveBaseAmount;
      }
      if (msg.totalRemoveQuoteAmount) {
        json["totalRemoveQuoteAmount"] = msg.totalRemoveQuoteAmount;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListTransactionsSummary,
      json: any,
    ): UniswapResp.ListTransactionsSummary {
      const _totalAddBaseAmount_ =
        json["totalAddBaseAmount"] ?? json["total_add_base_amount"];
      if (_totalAddBaseAmount_) {
        msg.totalAddBaseAmount = _totalAddBaseAmount_;
      }
      const _totalAddQuoteAmount_ =
        json["totalAddQuoteAmount"] ?? json["total_add_quote_amount"];
      if (_totalAddQuoteAmount_) {
        msg.totalAddQuoteAmount = _totalAddQuoteAmount_;
      }
      const _totalRemoveBaseAmount_ =
        json["totalRemoveBaseAmount"] ?? json["total_remove_base_amount"];
      if (_totalRemoveBaseAmount_) {
        msg.totalRemoveBaseAmount = _totalRemoveBaseAmount_;
      }
      const _totalRemoveQuoteAmount_ =
        json["totalRemoveQuoteAmount"] ?? json["total_remove_quote_amount"];
      if (_totalRemoveQuoteAmount_) {
        msg.totalRemoveQuoteAmount = _totalRemoveQuoteAmount_;
      }
      return msg;
    },
  },

  ListTransactions: {
    /**
     * Serializes UniswapResp.ListTransactions to JSON.
     */
    encode: function (msg: PartialDeep<UniswapResp.ListTransactions>): string {
      return JSON.stringify(
        UniswapRespJSON.ListTransactions._writeMessage(msg),
      );
    },

    /**
     * Deserializes UniswapResp.ListTransactions from JSON.
     */
    decode: function (json: string): UniswapResp.ListTransactions {
      return UniswapRespJSON.ListTransactions._readMessage(
        UniswapRespJSON.ListTransactions.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapResp.ListTransactions with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListTransactions>,
    ): UniswapResp.ListTransactions {
      return {
        transactions: [],
        pagination: PaginationJSON.initialize(),
        summary: UniswapRespJSON.ListTransactionsSummary.initialize(),
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListTransactions>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.transactions?.length) {
        json["transactions"] = msg.transactions.map(
          TransactionJSON._writeMessage,
        );
      }
      if (msg.pagination) {
        const _pagination_ = PaginationJSON._writeMessage(msg.pagination);
        if (Object.keys(_pagination_).length > 0) {
          json["pagination"] = _pagination_;
        }
      }
      if (msg.summary) {
        const _summary_ = UniswapRespJSON.ListTransactionsSummary._writeMessage(
          msg.summary,
        );
        if (Object.keys(_summary_).length > 0) {
          json["summary"] = _summary_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListTransactions,
      json: any,
    ): UniswapResp.ListTransactions {
      const _transactions_ = json["transactions"];
      if (_transactions_) {
        for (const item of _transactions_) {
          const m = TransactionJSON.initialize();
          TransactionJSON._readMessage(m, item);
          msg.transactions.push(m);
        }
      }
      const _pagination_ = json["pagination"];
      if (_pagination_) {
        PaginationJSON._readMessage(msg.pagination, _pagination_);
      }
      const _summary_ = json["summary"];
      if (_summary_) {
        UniswapRespJSON.ListTransactionsSummary._readMessage(
          msg.summary,
          _summary_,
        );
      }
      return msg;
    },
  },

  ListProposals: {
    /**
     * Serializes UniswapResp.ListProposals to JSON.
     */
    encode: function (msg: PartialDeep<UniswapResp.ListProposals>): string {
      return JSON.stringify(UniswapRespJSON.ListProposals._writeMessage(msg));
    },

    /**
     * Deserializes UniswapResp.ListProposals from JSON.
     */
    decode: function (json: string): UniswapResp.ListProposals {
      return UniswapRespJSON.ListProposals._readMessage(
        UniswapRespJSON.ListProposals.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapResp.ListProposals with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListProposals>,
    ): UniswapResp.ListProposals {
      return {
        proposals: [],
        pagination: PaginationJSON.initialize(),
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListProposals>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.proposals?.length) {
        json["proposals"] = msg.proposals.map(ProposalJSON._writeMessage);
      }
      if (msg.pagination) {
        const _pagination_ = PaginationJSON._writeMessage(msg.pagination);
        if (Object.keys(_pagination_).length > 0) {
          json["pagination"] = _pagination_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListProposals,
      json: any,
    ): UniswapResp.ListProposals {
      const _proposals_ = json["proposals"];
      if (_proposals_) {
        for (const item of _proposals_) {
          const m = ProposalJSON.initialize();
          ProposalJSON._readMessage(m, item);
          msg.proposals.push(m);
        }
      }
      const _pagination_ = json["pagination"];
      if (_pagination_) {
        PaginationJSON._readMessage(msg.pagination, _pagination_);
      }
      return msg;
    },
  },

  ListPendingDeposits: {
    /**
     * Serializes UniswapResp.ListPendingDeposits to JSON.
     */
    encode: function (
      msg: PartialDeep<UniswapResp.ListPendingDeposits>,
    ): string {
      return JSON.stringify(
        UniswapRespJSON.ListPendingDeposits._writeMessage(msg),
      );
    },

    /**
     * Deserializes UniswapResp.ListPendingDeposits from JSON.
     */
    decode: function (json: string): UniswapResp.ListPendingDeposits {
      return UniswapRespJSON.ListPendingDeposits._readMessage(
        UniswapRespJSON.ListPendingDeposits.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes UniswapResp.ListPendingDeposits with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<UniswapResp.ListPendingDeposits>,
    ): UniswapResp.ListPendingDeposits {
      return {
        deposits: [],
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<UniswapResp.ListPendingDeposits>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.deposits?.length) {
        json["deposits"] = msg.deposits.map(DepositJSON._writeMessage);
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: UniswapResp.ListPendingDeposits,
      json: any,
    ): UniswapResp.ListPendingDeposits {
      const _deposits_ = json["deposits"];
      if (_deposits_) {
        for (const item of _deposits_) {
          const m = DepositJSON.initialize();
          DepositJSON._readMessage(m, item);
          msg.deposits.push(m);
        }
      }
      return msg;
    },
  },
};
