// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: sweeper/v1/sweeper.proto
/* eslint-disable */

import type { ByteSource, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";

import { Timestamp, TimestampJSON } from "../../google/protobuf/timestamp.pb";

//========================================//
//     SweeperService Protobuf Client     //
//========================================//

export async function SendTransfer(
  sendTransferRequest: SendTransferRequest,
  config?: ClientConfiguration
): Promise<SendTransferResponse> {
  const response = await PBrequest(
    "/sweeper.v1.SweeperService/SendTransfer",
    SendTransferRequest.encode(sendTransferRequest),
    config
  );
  return SendTransferResponse.decode(response);
}

export async function GetTransfer(
  getTransferRequest: GetTransferRequest,
  config?: ClientConfiguration
): Promise<GetTransferResponse> {
  const response = await PBrequest(
    "/sweeper.v1.SweeperService/GetTransfer",
    GetTransferRequest.encode(getTransferRequest),
    config
  );
  return GetTransferResponse.decode(response);
}

export async function ListBalances(
  listBalancesRequest: ListBalancesRequest,
  config?: ClientConfiguration
): Promise<ListBalancesResponse> {
  const response = await PBrequest(
    "/sweeper.v1.SweeperService/ListBalances",
    ListBalancesRequest.encode(listBalancesRequest),
    config
  );
  return ListBalancesResponse.decode(response);
}

export async function ListSnapshots(
  listSnapshotsRequest: ListSnapshotsRequest,
  config?: ClientConfiguration
): Promise<ListSnapshotsResponse> {
  const response = await PBrequest(
    "/sweeper.v1.SweeperService/ListSnapshots",
    ListSnapshotsRequest.encode(listSnapshotsRequest),
    config
  );
  return ListSnapshotsResponse.decode(response);
}

export async function ClaimSnapshot(
  claimSnapshotRequest: ClaimSnapshotRequest,
  config?: ClientConfiguration
): Promise<ClaimSnapshotResponse> {
  const response = await PBrequest(
    "/sweeper.v1.SweeperService/ClaimSnapshot",
    ClaimSnapshotRequest.encode(claimSnapshotRequest),
    config
  );
  return ClaimSnapshotResponse.decode(response);
}

//========================================//
//       SweeperService JSON Client       //
//========================================//

export async function SendTransferJSON(
  sendTransferRequest: SendTransferRequest,
  config?: ClientConfiguration
): Promise<SendTransferResponse> {
  const response = await JSONrequest(
    "/sweeper.v1.SweeperService/SendTransfer",
    SendTransferRequestJSON.encode(sendTransferRequest),
    config
  );
  return SendTransferResponseJSON.decode(response);
}

export async function GetTransferJSON(
  getTransferRequest: GetTransferRequest,
  config?: ClientConfiguration
): Promise<GetTransferResponse> {
  const response = await JSONrequest(
    "/sweeper.v1.SweeperService/GetTransfer",
    GetTransferRequestJSON.encode(getTransferRequest),
    config
  );
  return GetTransferResponseJSON.decode(response);
}

export async function ListBalancesJSON(
  listBalancesRequest: ListBalancesRequest,
  config?: ClientConfiguration
): Promise<ListBalancesResponse> {
  const response = await JSONrequest(
    "/sweeper.v1.SweeperService/ListBalances",
    ListBalancesRequestJSON.encode(listBalancesRequest),
    config
  );
  return ListBalancesResponseJSON.decode(response);
}

export async function ListSnapshotsJSON(
  listSnapshotsRequest: ListSnapshotsRequest,
  config?: ClientConfiguration
): Promise<ListSnapshotsResponse> {
  const response = await JSONrequest(
    "/sweeper.v1.SweeperService/ListSnapshots",
    ListSnapshotsRequestJSON.encode(listSnapshotsRequest),
    config
  );
  return ListSnapshotsResponseJSON.decode(response);
}

export async function ClaimSnapshotJSON(
  claimSnapshotRequest: ClaimSnapshotRequest,
  config?: ClientConfiguration
): Promise<ClaimSnapshotResponse> {
  const response = await JSONrequest(
    "/sweeper.v1.SweeperService/ClaimSnapshot",
    ClaimSnapshotRequestJSON.encode(claimSnapshotRequest),
    config
  );
  return ClaimSnapshotResponseJSON.decode(response);
}

//========================================//
//             SweeperService             //
//========================================//

export interface SweeperService<Context = unknown> {
  SendTransfer: (
    sendTransferRequest: SendTransferRequest,
    context: Context
  ) => Promise<SendTransferResponse> | SendTransferResponse;
  GetTransfer: (
    getTransferRequest: GetTransferRequest,
    context: Context
  ) => Promise<GetTransferResponse> | GetTransferResponse;
  ListBalances: (
    listBalancesRequest: ListBalancesRequest,
    context: Context
  ) => Promise<ListBalancesResponse> | ListBalancesResponse;
  ListSnapshots: (
    listSnapshotsRequest: ListSnapshotsRequest,
    context: Context
  ) => Promise<ListSnapshotsResponse> | ListSnapshotsResponse;
  ClaimSnapshot: (
    claimSnapshotRequest: ClaimSnapshotRequest,
    context: Context
  ) => Promise<ClaimSnapshotResponse> | ClaimSnapshotResponse;
}

export function createSweeperService<Context>(
  service: SweeperService<Context>
) {
  return {
    name: "sweeper.v1.SweeperService",
    methods: {
      SendTransfer: {
        name: "SendTransfer",
        handler: service.SendTransfer,
        input: { protobuf: SendTransferRequest, json: SendTransferRequestJSON },
        output: {
          protobuf: SendTransferResponse,
          json: SendTransferResponseJSON,
        },
      },
      GetTransfer: {
        name: "GetTransfer",
        handler: service.GetTransfer,
        input: { protobuf: GetTransferRequest, json: GetTransferRequestJSON },
        output: {
          protobuf: GetTransferResponse,
          json: GetTransferResponseJSON,
        },
      },
      ListBalances: {
        name: "ListBalances",
        handler: service.ListBalances,
        input: { protobuf: ListBalancesRequest, json: ListBalancesRequestJSON },
        output: {
          protobuf: ListBalancesResponse,
          json: ListBalancesResponseJSON,
        },
      },
      ListSnapshots: {
        name: "ListSnapshots",
        handler: service.ListSnapshots,
        input: {
          protobuf: ListSnapshotsRequest,
          json: ListSnapshotsRequestJSON,
        },
        output: {
          protobuf: ListSnapshotsResponse,
          json: ListSnapshotsResponseJSON,
        },
      },
      ClaimSnapshot: {
        name: "ClaimSnapshot",
        handler: service.ClaimSnapshot,
        input: {
          protobuf: ClaimSnapshotRequest,
          json: ClaimSnapshotRequestJSON,
        },
        output: {
          protobuf: ClaimSnapshotResponse,
          json: ClaimSnapshotResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export interface Transfer {
  traceId: string;
  assetId: string;
  amount: string;
  opponents: string[];
  threshold: number;
  memo: string;
  status: Transfer.Status;
  txHash: string;
  protocolId: number;
}

export declare namespace Transfer {
  export type Status = "NOT_SET" | "PENDING" | "HANDLED" | "SPENT";
}

export interface Balance {
  assetId: string;
  amount: string;
}

export interface Snapshot {
  id: string;
  createdAt: Timestamp;
  assetId: string;
  amount: string;
  opponentId: string;
  memo: string;
}

export interface SendTransferRequest {
  traceId: string;
  assetId: string;
  amount: string;
  opponents: string[];
  threshold: number;
  memo: string;
  protocolId: number;
}

export interface SendTransferResponse {
  transfer: Transfer;
}

export interface GetTransferRequest {
  traceId: string;
}

export interface GetTransferResponse {
  transfer: Transfer;
}

export interface ListBalancesRequest {
  protocolId: number;
}

export interface ListBalancesResponse {
  balances: Balance[];
}

export interface ListSnapshotsRequest {
  offset: Timestamp;
  limit: number;
}

export interface ListSnapshotsResponse {
  snapshots: Snapshot[];
}

export interface ClaimSnapshotRequest {
  id: string;
  protocolId: number;
}

export interface ClaimSnapshotResponse {
  snapshot: Snapshot;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Transfer = {
  /**
   * Serializes Transfer to protobuf.
   */
  encode: function (msg: Partial<Transfer>): Uint8Array {
    return Transfer._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Transfer from protobuf.
   */
  decode: function (bytes: ByteSource): Transfer {
    return Transfer._readMessage(
      Transfer.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Transfer with all fields set to their default value.
   */
  initialize: function (): Transfer {
    return {
      traceId: "",
      assetId: "",
      amount: "",
      opponents: [],
      threshold: 0,
      memo: "",
      status: Transfer.Status._fromInt(0),
      txHash: "",
      protocolId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Transfer>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    if (msg.assetId) {
      writer.writeString(2, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(3, msg.amount);
    }
    if (msg.opponents?.length) {
      writer.writeRepeatedString(4, msg.opponents);
    }
    if (msg.threshold) {
      writer.writeUint32(5, msg.threshold);
    }
    if (msg.memo) {
      writer.writeString(6, msg.memo);
    }
    if (msg.status && Transfer.Status._toInt(msg.status)) {
      writer.writeEnum(7, Transfer.Status._toInt(msg.status));
    }
    if (msg.txHash) {
      writer.writeString(8, msg.txHash);
    }
    if (msg.protocolId) {
      writer.writeUint32(9, msg.protocolId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Transfer, reader: BinaryReader): Transfer {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        case 2: {
          msg.assetId = reader.readString();
          break;
        }
        case 3: {
          msg.amount = reader.readString();
          break;
        }
        case 4: {
          msg.opponents.push(reader.readString());
          break;
        }
        case 5: {
          msg.threshold = reader.readUint32();
          break;
        }
        case 6: {
          msg.memo = reader.readString();
          break;
        }
        case 7: {
          msg.status = Transfer.Status._fromInt(reader.readEnum());
          break;
        }
        case 8: {
          msg.txHash = reader.readString();
          break;
        }
        case 9: {
          msg.protocolId = reader.readUint32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Status: {
    NOT_SET: "NOT_SET",
    PENDING: "PENDING",
    HANDLED: "HANDLED",
    SPENT: "SPENT",
    /**
     * @private
     */
    _fromInt: function (i: number): Transfer.Status {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "PENDING";
        }
        case 2: {
          return "HANDLED";
        }
        case 3: {
          return "SPENT";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Transfer.Status;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Transfer.Status): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "PENDING": {
          return 1;
        }
        case "HANDLED": {
          return 2;
        }
        case "SPENT": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const Balance = {
  /**
   * Serializes Balance to protobuf.
   */
  encode: function (msg: Partial<Balance>): Uint8Array {
    return Balance._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Balance from protobuf.
   */
  decode: function (bytes: ByteSource): Balance {
    return Balance._readMessage(Balance.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Balance with all fields set to their default value.
   */
  initialize: function (): Balance {
    return {
      assetId: "",
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Balance>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.assetId) {
      writer.writeString(1, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(2, msg.amount);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Balance, reader: BinaryReader): Balance {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.assetId = reader.readString();
          break;
        }
        case 2: {
          msg.amount = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Snapshot = {
  /**
   * Serializes Snapshot to protobuf.
   */
  encode: function (msg: Partial<Snapshot>): Uint8Array {
    return Snapshot._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Snapshot from protobuf.
   */
  decode: function (bytes: ByteSource): Snapshot {
    return Snapshot._readMessage(
      Snapshot.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Snapshot with all fields set to their default value.
   */
  initialize: function (): Snapshot {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      assetId: "",
      amount: "",
      opponentId: "",
      memo: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Snapshot>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(2, msg.createdAt, Timestamp._writeMessage);
    }
    if (msg.assetId) {
      writer.writeString(3, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(4, msg.amount);
    }
    if (msg.opponentId) {
      writer.writeString(5, msg.opponentId);
    }
    if (msg.memo) {
      writer.writeString(6, msg.memo);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Snapshot, reader: BinaryReader): Snapshot {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.assetId = reader.readString();
          break;
        }
        case 4: {
          msg.amount = reader.readString();
          break;
        }
        case 5: {
          msg.opponentId = reader.readString();
          break;
        }
        case 6: {
          msg.memo = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SendTransferRequest = {
  /**
   * Serializes SendTransferRequest to protobuf.
   */
  encode: function (msg: Partial<SendTransferRequest>): Uint8Array {
    return SendTransferRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SendTransferRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SendTransferRequest {
    return SendTransferRequest._readMessage(
      SendTransferRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SendTransferRequest with all fields set to their default value.
   */
  initialize: function (): SendTransferRequest {
    return {
      traceId: "",
      assetId: "",
      amount: "",
      opponents: [],
      threshold: 0,
      memo: "",
      protocolId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SendTransferRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    if (msg.assetId) {
      writer.writeString(2, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(3, msg.amount);
    }
    if (msg.opponents?.length) {
      writer.writeRepeatedString(4, msg.opponents);
    }
    if (msg.threshold) {
      writer.writeUint32(5, msg.threshold);
    }
    if (msg.memo) {
      writer.writeString(6, msg.memo);
    }
    if (msg.protocolId) {
      writer.writeUint32(7, msg.protocolId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendTransferRequest,
    reader: BinaryReader
  ): SendTransferRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        case 2: {
          msg.assetId = reader.readString();
          break;
        }
        case 3: {
          msg.amount = reader.readString();
          break;
        }
        case 4: {
          msg.opponents.push(reader.readString());
          break;
        }
        case 5: {
          msg.threshold = reader.readUint32();
          break;
        }
        case 6: {
          msg.memo = reader.readString();
          break;
        }
        case 7: {
          msg.protocolId = reader.readUint32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SendTransferResponse = {
  /**
   * Serializes SendTransferResponse to protobuf.
   */
  encode: function (msg: Partial<SendTransferResponse>): Uint8Array {
    return SendTransferResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SendTransferResponse from protobuf.
   */
  decode: function (bytes: ByteSource): SendTransferResponse {
    return SendTransferResponse._readMessage(
      SendTransferResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SendTransferResponse with all fields set to their default value.
   */
  initialize: function (): SendTransferResponse {
    return {
      transfer: Transfer.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SendTransferResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.transfer) {
      writer.writeMessage(1, msg.transfer, Transfer._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendTransferResponse,
    reader: BinaryReader
  ): SendTransferResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.transfer, Transfer._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetTransferRequest = {
  /**
   * Serializes GetTransferRequest to protobuf.
   */
  encode: function (msg: Partial<GetTransferRequest>): Uint8Array {
    return GetTransferRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetTransferRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetTransferRequest {
    return GetTransferRequest._readMessage(
      GetTransferRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetTransferRequest with all fields set to their default value.
   */
  initialize: function (): GetTransferRequest {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetTransferRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetTransferRequest,
    reader: BinaryReader
  ): GetTransferRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetTransferResponse = {
  /**
   * Serializes GetTransferResponse to protobuf.
   */
  encode: function (msg: Partial<GetTransferResponse>): Uint8Array {
    return GetTransferResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetTransferResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetTransferResponse {
    return GetTransferResponse._readMessage(
      GetTransferResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetTransferResponse with all fields set to their default value.
   */
  initialize: function (): GetTransferResponse {
    return {
      transfer: Transfer.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetTransferResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.transfer) {
      writer.writeMessage(1, msg.transfer, Transfer._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetTransferResponse,
    reader: BinaryReader
  ): GetTransferResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.transfer, Transfer._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListBalancesRequest = {
  /**
   * Serializes ListBalancesRequest to protobuf.
   */
  encode: function (msg: Partial<ListBalancesRequest>): Uint8Array {
    return ListBalancesRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListBalancesRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListBalancesRequest {
    return ListBalancesRequest._readMessage(
      ListBalancesRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListBalancesRequest with all fields set to their default value.
   */
  initialize: function (): ListBalancesRequest {
    return {
      protocolId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListBalancesRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.protocolId) {
      writer.writeUint32(1, msg.protocolId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListBalancesRequest,
    reader: BinaryReader
  ): ListBalancesRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.protocolId = reader.readUint32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListBalancesResponse = {
  /**
   * Serializes ListBalancesResponse to protobuf.
   */
  encode: function (msg: Partial<ListBalancesResponse>): Uint8Array {
    return ListBalancesResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListBalancesResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListBalancesResponse {
    return ListBalancesResponse._readMessage(
      ListBalancesResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListBalancesResponse with all fields set to their default value.
   */
  initialize: function (): ListBalancesResponse {
    return {
      balances: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListBalancesResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.balances?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.balances as any,
        Balance._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListBalancesResponse,
    reader: BinaryReader
  ): ListBalancesResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Balance.initialize();
          reader.readMessage(m, Balance._readMessage);
          msg.balances.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListSnapshotsRequest = {
  /**
   * Serializes ListSnapshotsRequest to protobuf.
   */
  encode: function (msg: Partial<ListSnapshotsRequest>): Uint8Array {
    return ListSnapshotsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListSnapshotsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListSnapshotsRequest {
    return ListSnapshotsRequest._readMessage(
      ListSnapshotsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListSnapshotsRequest with all fields set to their default value.
   */
  initialize: function (): ListSnapshotsRequest {
    return {
      offset: Timestamp.initialize(),
      limit: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListSnapshotsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.offset) {
      writer.writeMessage(1, msg.offset, Timestamp._writeMessage);
    }
    if (msg.limit) {
      writer.writeInt32(2, msg.limit);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSnapshotsRequest,
    reader: BinaryReader
  ): ListSnapshotsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.offset, Timestamp._readMessage);
          break;
        }
        case 2: {
          msg.limit = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListSnapshotsResponse = {
  /**
   * Serializes ListSnapshotsResponse to protobuf.
   */
  encode: function (msg: Partial<ListSnapshotsResponse>): Uint8Array {
    return ListSnapshotsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListSnapshotsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListSnapshotsResponse {
    return ListSnapshotsResponse._readMessage(
      ListSnapshotsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListSnapshotsResponse with all fields set to their default value.
   */
  initialize: function (): ListSnapshotsResponse {
    return {
      snapshots: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListSnapshotsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.snapshots?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.snapshots as any,
        Snapshot._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSnapshotsResponse,
    reader: BinaryReader
  ): ListSnapshotsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Snapshot.initialize();
          reader.readMessage(m, Snapshot._readMessage);
          msg.snapshots.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ClaimSnapshotRequest = {
  /**
   * Serializes ClaimSnapshotRequest to protobuf.
   */
  encode: function (msg: Partial<ClaimSnapshotRequest>): Uint8Array {
    return ClaimSnapshotRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ClaimSnapshotRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ClaimSnapshotRequest {
    return ClaimSnapshotRequest._readMessage(
      ClaimSnapshotRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ClaimSnapshotRequest with all fields set to their default value.
   */
  initialize: function (): ClaimSnapshotRequest {
    return {
      id: "",
      protocolId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ClaimSnapshotRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.protocolId) {
      writer.writeUint32(2, msg.protocolId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClaimSnapshotRequest,
    reader: BinaryReader
  ): ClaimSnapshotRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.protocolId = reader.readUint32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ClaimSnapshotResponse = {
  /**
   * Serializes ClaimSnapshotResponse to protobuf.
   */
  encode: function (msg: Partial<ClaimSnapshotResponse>): Uint8Array {
    return ClaimSnapshotResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ClaimSnapshotResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ClaimSnapshotResponse {
    return ClaimSnapshotResponse._readMessage(
      ClaimSnapshotResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ClaimSnapshotResponse with all fields set to their default value.
   */
  initialize: function (): ClaimSnapshotResponse {
    return {
      snapshot: Snapshot.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ClaimSnapshotResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.snapshot) {
      writer.writeMessage(1, msg.snapshot, Snapshot._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClaimSnapshotResponse,
    reader: BinaryReader
  ): ClaimSnapshotResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.snapshot, Snapshot._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const TransferJSON = {
  /**
   * Serializes Transfer to JSON.
   */
  encode: function (msg: Partial<Transfer>): string {
    return JSON.stringify(TransferJSON._writeMessage(msg));
  },

  /**
   * Deserializes Transfer from JSON.
   */
  decode: function (json: string): Transfer {
    return TransferJSON._readMessage(
      TransferJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Transfer with all fields set to their default value.
   */
  initialize: function (): Transfer {
    return {
      traceId: "",
      assetId: "",
      amount: "",
      opponents: [],
      threshold: 0,
      memo: "",
      status: Transfer.Status._fromInt(0),
      txHash: "",
      protocolId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Transfer>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.opponents?.length) {
      json.opponents = msg.opponents;
    }
    if (msg.threshold) {
      json.threshold = msg.threshold;
    }
    if (msg.memo) {
      json.memo = msg.memo;
    }
    if (msg.status && TransferJSON.Status._toInt(msg.status)) {
      json.status = msg.status;
    }
    if (msg.txHash) {
      json.txHash = msg.txHash;
    }
    if (msg.protocolId) {
      json.protocolId = msg.protocolId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Transfer, json: any): Transfer {
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _opponents = json.opponents;
    if (_opponents) {
      msg.opponents = _opponents;
    }
    const _threshold = json.threshold;
    if (_threshold) {
      msg.threshold = _threshold;
    }
    const _memo = json.memo;
    if (_memo) {
      msg.memo = _memo;
    }
    const _status = json.status;
    if (_status) {
      msg.status = _status;
    }
    const _txHash = json.txHash ?? json.tx_hash;
    if (_txHash) {
      msg.txHash = _txHash;
    }
    const _protocolId = json.protocolId ?? json.protocol_id;
    if (_protocolId) {
      msg.protocolId = _protocolId;
    }
    return msg;
  },

  Status: {
    NOT_SET: "NOT_SET",
    PENDING: "PENDING",
    HANDLED: "HANDLED",
    SPENT: "SPENT",
    /**
     * @private
     */
    _fromInt: function (i: number): Transfer.Status {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "PENDING";
        }
        case 2: {
          return "HANDLED";
        }
        case 3: {
          return "SPENT";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Transfer.Status;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Transfer.Status): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "PENDING": {
          return 1;
        }
        case "HANDLED": {
          return 2;
        }
        case "SPENT": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const BalanceJSON = {
  /**
   * Serializes Balance to JSON.
   */
  encode: function (msg: Partial<Balance>): string {
    return JSON.stringify(BalanceJSON._writeMessage(msg));
  },

  /**
   * Deserializes Balance from JSON.
   */
  decode: function (json: string): Balance {
    return BalanceJSON._readMessage(BalanceJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Balance with all fields set to their default value.
   */
  initialize: function (): Balance {
    return {
      assetId: "",
      amount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Balance>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Balance, json: any): Balance {
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    return msg;
  },
};

export const SnapshotJSON = {
  /**
   * Serializes Snapshot to JSON.
   */
  encode: function (msg: Partial<Snapshot>): string {
    return JSON.stringify(SnapshotJSON._writeMessage(msg));
  },

  /**
   * Deserializes Snapshot from JSON.
   */
  decode: function (json: string): Snapshot {
    return SnapshotJSON._readMessage(
      SnapshotJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Snapshot with all fields set to their default value.
   */
  initialize: function (): Snapshot {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      assetId: "",
      amount: "",
      opponentId: "",
      memo: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Snapshot>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.createdAt) {
      const createdAt = TimestampJSON._writeMessage(msg.createdAt);
      if (Object.keys(createdAt).length > 0) {
        json.createdAt = createdAt;
      }
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.opponentId) {
      json.opponentId = msg.opponentId;
    }
    if (msg.memo) {
      json.memo = msg.memo;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Snapshot, json: any): Snapshot {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _createdAt);
      msg.createdAt = m;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _opponentId = json.opponentId ?? json.opponent_id;
    if (_opponentId) {
      msg.opponentId = _opponentId;
    }
    const _memo = json.memo;
    if (_memo) {
      msg.memo = _memo;
    }
    return msg;
  },
};

export const SendTransferRequestJSON = {
  /**
   * Serializes SendTransferRequest to JSON.
   */
  encode: function (msg: Partial<SendTransferRequest>): string {
    return JSON.stringify(SendTransferRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SendTransferRequest from JSON.
   */
  decode: function (json: string): SendTransferRequest {
    return SendTransferRequestJSON._readMessage(
      SendTransferRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SendTransferRequest with all fields set to their default value.
   */
  initialize: function (): SendTransferRequest {
    return {
      traceId: "",
      assetId: "",
      amount: "",
      opponents: [],
      threshold: 0,
      memo: "",
      protocolId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SendTransferRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.opponents?.length) {
      json.opponents = msg.opponents;
    }
    if (msg.threshold) {
      json.threshold = msg.threshold;
    }
    if (msg.memo) {
      json.memo = msg.memo;
    }
    if (msg.protocolId) {
      json.protocolId = msg.protocolId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendTransferRequest,
    json: any
  ): SendTransferRequest {
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _opponents = json.opponents;
    if (_opponents) {
      msg.opponents = _opponents;
    }
    const _threshold = json.threshold;
    if (_threshold) {
      msg.threshold = _threshold;
    }
    const _memo = json.memo;
    if (_memo) {
      msg.memo = _memo;
    }
    const _protocolId = json.protocolId ?? json.protocol_id;
    if (_protocolId) {
      msg.protocolId = _protocolId;
    }
    return msg;
  },
};

export const SendTransferResponseJSON = {
  /**
   * Serializes SendTransferResponse to JSON.
   */
  encode: function (msg: Partial<SendTransferResponse>): string {
    return JSON.stringify(SendTransferResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes SendTransferResponse from JSON.
   */
  decode: function (json: string): SendTransferResponse {
    return SendTransferResponseJSON._readMessage(
      SendTransferResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SendTransferResponse with all fields set to their default value.
   */
  initialize: function (): SendTransferResponse {
    return {
      transfer: Transfer.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SendTransferResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.transfer) {
      const transfer = TransferJSON._writeMessage(msg.transfer);
      if (Object.keys(transfer).length > 0) {
        json.transfer = transfer;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendTransferResponse,
    json: any
  ): SendTransferResponse {
    const _transfer = json.transfer;
    if (_transfer) {
      const m = Transfer.initialize();
      TransferJSON._readMessage(m, _transfer);
      msg.transfer = m;
    }
    return msg;
  },
};

export const GetTransferRequestJSON = {
  /**
   * Serializes GetTransferRequest to JSON.
   */
  encode: function (msg: Partial<GetTransferRequest>): string {
    return JSON.stringify(GetTransferRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetTransferRequest from JSON.
   */
  decode: function (json: string): GetTransferRequest {
    return GetTransferRequestJSON._readMessage(
      GetTransferRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetTransferRequest with all fields set to their default value.
   */
  initialize: function (): GetTransferRequest {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetTransferRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetTransferRequest,
    json: any
  ): GetTransferRequest {
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    return msg;
  },
};

export const GetTransferResponseJSON = {
  /**
   * Serializes GetTransferResponse to JSON.
   */
  encode: function (msg: Partial<GetTransferResponse>): string {
    return JSON.stringify(GetTransferResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetTransferResponse from JSON.
   */
  decode: function (json: string): GetTransferResponse {
    return GetTransferResponseJSON._readMessage(
      GetTransferResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetTransferResponse with all fields set to their default value.
   */
  initialize: function (): GetTransferResponse {
    return {
      transfer: Transfer.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetTransferResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.transfer) {
      const transfer = TransferJSON._writeMessage(msg.transfer);
      if (Object.keys(transfer).length > 0) {
        json.transfer = transfer;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetTransferResponse,
    json: any
  ): GetTransferResponse {
    const _transfer = json.transfer;
    if (_transfer) {
      const m = Transfer.initialize();
      TransferJSON._readMessage(m, _transfer);
      msg.transfer = m;
    }
    return msg;
  },
};

export const ListBalancesRequestJSON = {
  /**
   * Serializes ListBalancesRequest to JSON.
   */
  encode: function (msg: Partial<ListBalancesRequest>): string {
    return JSON.stringify(ListBalancesRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListBalancesRequest from JSON.
   */
  decode: function (json: string): ListBalancesRequest {
    return ListBalancesRequestJSON._readMessage(
      ListBalancesRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListBalancesRequest with all fields set to their default value.
   */
  initialize: function (): ListBalancesRequest {
    return {
      protocolId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListBalancesRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.protocolId) {
      json.protocolId = msg.protocolId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListBalancesRequest,
    json: any
  ): ListBalancesRequest {
    const _protocolId = json.protocolId ?? json.protocol_id;
    if (_protocolId) {
      msg.protocolId = _protocolId;
    }
    return msg;
  },
};

export const ListBalancesResponseJSON = {
  /**
   * Serializes ListBalancesResponse to JSON.
   */
  encode: function (msg: Partial<ListBalancesResponse>): string {
    return JSON.stringify(ListBalancesResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListBalancesResponse from JSON.
   */
  decode: function (json: string): ListBalancesResponse {
    return ListBalancesResponseJSON._readMessage(
      ListBalancesResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListBalancesResponse with all fields set to their default value.
   */
  initialize: function (): ListBalancesResponse {
    return {
      balances: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListBalancesResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.balances?.length) {
      json.balances = msg.balances.map(BalanceJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListBalancesResponse,
    json: any
  ): ListBalancesResponse {
    const _balances = json.balances;
    if (_balances) {
      for (const item of _balances) {
        const m = Balance.initialize();
        BalanceJSON._readMessage(m, item);
        msg.balances.push(m);
      }
    }
    return msg;
  },
};

export const ListSnapshotsRequestJSON = {
  /**
   * Serializes ListSnapshotsRequest to JSON.
   */
  encode: function (msg: Partial<ListSnapshotsRequest>): string {
    return JSON.stringify(ListSnapshotsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListSnapshotsRequest from JSON.
   */
  decode: function (json: string): ListSnapshotsRequest {
    return ListSnapshotsRequestJSON._readMessage(
      ListSnapshotsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListSnapshotsRequest with all fields set to their default value.
   */
  initialize: function (): ListSnapshotsRequest {
    return {
      offset: Timestamp.initialize(),
      limit: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListSnapshotsRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.offset) {
      const offset = TimestampJSON._writeMessage(msg.offset);
      if (Object.keys(offset).length > 0) {
        json.offset = offset;
      }
    }
    if (msg.limit) {
      json.limit = msg.limit;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSnapshotsRequest,
    json: any
  ): ListSnapshotsRequest {
    const _offset = json.offset;
    if (_offset) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _offset);
      msg.offset = m;
    }
    const _limit = json.limit;
    if (_limit) {
      msg.limit = _limit;
    }
    return msg;
  },
};

export const ListSnapshotsResponseJSON = {
  /**
   * Serializes ListSnapshotsResponse to JSON.
   */
  encode: function (msg: Partial<ListSnapshotsResponse>): string {
    return JSON.stringify(ListSnapshotsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListSnapshotsResponse from JSON.
   */
  decode: function (json: string): ListSnapshotsResponse {
    return ListSnapshotsResponseJSON._readMessage(
      ListSnapshotsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListSnapshotsResponse with all fields set to their default value.
   */
  initialize: function (): ListSnapshotsResponse {
    return {
      snapshots: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListSnapshotsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.snapshots?.length) {
      json.snapshots = msg.snapshots.map(SnapshotJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSnapshotsResponse,
    json: any
  ): ListSnapshotsResponse {
    const _snapshots = json.snapshots;
    if (_snapshots) {
      for (const item of _snapshots) {
        const m = Snapshot.initialize();
        SnapshotJSON._readMessage(m, item);
        msg.snapshots.push(m);
      }
    }
    return msg;
  },
};

export const ClaimSnapshotRequestJSON = {
  /**
   * Serializes ClaimSnapshotRequest to JSON.
   */
  encode: function (msg: Partial<ClaimSnapshotRequest>): string {
    return JSON.stringify(ClaimSnapshotRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ClaimSnapshotRequest from JSON.
   */
  decode: function (json: string): ClaimSnapshotRequest {
    return ClaimSnapshotRequestJSON._readMessage(
      ClaimSnapshotRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ClaimSnapshotRequest with all fields set to their default value.
   */
  initialize: function (): ClaimSnapshotRequest {
    return {
      id: "",
      protocolId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ClaimSnapshotRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.protocolId) {
      json.protocolId = msg.protocolId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClaimSnapshotRequest,
    json: any
  ): ClaimSnapshotRequest {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _protocolId = json.protocolId ?? json.protocol_id;
    if (_protocolId) {
      msg.protocolId = _protocolId;
    }
    return msg;
  },
};

export const ClaimSnapshotResponseJSON = {
  /**
   * Serializes ClaimSnapshotResponse to JSON.
   */
  encode: function (msg: Partial<ClaimSnapshotResponse>): string {
    return JSON.stringify(ClaimSnapshotResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ClaimSnapshotResponse from JSON.
   */
  decode: function (json: string): ClaimSnapshotResponse {
    return ClaimSnapshotResponseJSON._readMessage(
      ClaimSnapshotResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ClaimSnapshotResponse with all fields set to their default value.
   */
  initialize: function (): ClaimSnapshotResponse {
    return {
      snapshot: Snapshot.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ClaimSnapshotResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.snapshot) {
      const snapshot = SnapshotJSON._writeMessage(msg.snapshot);
      if (Object.keys(snapshot).length > 0) {
        json.snapshot = snapshot;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClaimSnapshotResponse,
    json: any
  ): ClaimSnapshotResponse {
    const _snapshot = json.snapshot;
    if (_snapshot) {
      const m = Snapshot.initialize();
      SnapshotJSON._readMessage(m, _snapshot);
      msg.snapshot = m;
    }
    return msg;
  },
};
