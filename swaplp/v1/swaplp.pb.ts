// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: swaplp/v1/swaplp.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface System {
  payAssetId: string;
  payAmount: string;
  payAsset: Asset;
}

export interface Asset {
  assetId: string;
  chainId: string;
  symbol: string;
  name: string;
  logo: string;
  price: string;
  weight: bigint;
}

export interface Pair {
  baseAssetId: string;
  quoteAssetId: string;
  lpAssetId: string;
  state: Pair.State;
}

export declare namespace Pair {
  export type State = "PENDING_NOT_SET" | "PROPOSING" | "TRADING";
}

export interface Transfer {
  traceId: string;
  assetId: string;
  amount: string;
  opponentId: string;
  memo: string;
}

export interface Order {
  id: string;
  createdAt: protoscript.Timestamp;
  payAssetId: string;
  payAmount: string;
  lpName: string;
  lpSymbol: string;
  lpSupply: bigint;
  state: Order.State;
  swapMethod: string;
}

export declare namespace Order {
  export type State =
    | "PENDING_NOT_SET"
    | "REJECTED"
    | "PROCESSED"
    | "PROPOSING";
}

export interface GetSystemRequest {}

export interface GetSystemResponse {
  system: System;
}

export interface ListPairsRequest {}

export interface ListPairsResponse {
  pairs: Pair[];
}

export interface ListAssetsRequest {}

export interface ListAssetsResponse {
  assets: Asset[];
}

export interface CreateOrderRequest {
  baseAssetId: string;
  quoteAssetId: string;
  swapMethod: string;
}

export interface CreateOrderResponse {
  order: Order;
  transfer: Transfer;
}

export interface FindOrderRequest {
  id: string;
}

export interface FindOrderResponse {
  order: Order;
}

//========================================//
//     SwaplpService Protobuf Client      //
//========================================//

export async function GetSystem(
  getSystemRequest: GetSystemRequest,
  config?: ClientConfiguration,
): Promise<GetSystemResponse> {
  const response = await PBrequest(
    "/swaplp.v1.SwaplpService/GetSystem",
    GetSystemRequest.encode(getSystemRequest),
    config,
  );
  return GetSystemResponse.decode(response);
}

export async function ListPairs(
  listPairsRequest: ListPairsRequest,
  config?: ClientConfiguration,
): Promise<ListPairsResponse> {
  const response = await PBrequest(
    "/swaplp.v1.SwaplpService/ListPairs",
    ListPairsRequest.encode(listPairsRequest),
    config,
  );
  return ListPairsResponse.decode(response);
}

export async function ListAssets(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration,
): Promise<ListAssetsResponse> {
  const response = await PBrequest(
    "/swaplp.v1.SwaplpService/ListAssets",
    ListAssetsRequest.encode(listAssetsRequest),
    config,
  );
  return ListAssetsResponse.decode(response);
}

export async function CreateOrder(
  createOrderRequest: CreateOrderRequest,
  config?: ClientConfiguration,
): Promise<CreateOrderResponse> {
  const response = await PBrequest(
    "/swaplp.v1.SwaplpService/CreateOrder",
    CreateOrderRequest.encode(createOrderRequest),
    config,
  );
  return CreateOrderResponse.decode(response);
}

export async function FindOrder(
  findOrderRequest: FindOrderRequest,
  config?: ClientConfiguration,
): Promise<FindOrderResponse> {
  const response = await PBrequest(
    "/swaplp.v1.SwaplpService/FindOrder",
    FindOrderRequest.encode(findOrderRequest),
    config,
  );
  return FindOrderResponse.decode(response);
}

//========================================//
//       SwaplpService JSON Client        //
//========================================//

export async function GetSystemJSON(
  getSystemRequest: GetSystemRequest,
  config?: ClientConfiguration,
): Promise<GetSystemResponse> {
  const response = await JSONrequest(
    "/swaplp.v1.SwaplpService/GetSystem",
    GetSystemRequestJSON.encode(getSystemRequest),
    config,
  );
  return GetSystemResponseJSON.decode(response);
}

export async function ListPairsJSON(
  listPairsRequest: ListPairsRequest,
  config?: ClientConfiguration,
): Promise<ListPairsResponse> {
  const response = await JSONrequest(
    "/swaplp.v1.SwaplpService/ListPairs",
    ListPairsRequestJSON.encode(listPairsRequest),
    config,
  );
  return ListPairsResponseJSON.decode(response);
}

export async function ListAssetsJSON(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration,
): Promise<ListAssetsResponse> {
  const response = await JSONrequest(
    "/swaplp.v1.SwaplpService/ListAssets",
    ListAssetsRequestJSON.encode(listAssetsRequest),
    config,
  );
  return ListAssetsResponseJSON.decode(response);
}

export async function CreateOrderJSON(
  createOrderRequest: CreateOrderRequest,
  config?: ClientConfiguration,
): Promise<CreateOrderResponse> {
  const response = await JSONrequest(
    "/swaplp.v1.SwaplpService/CreateOrder",
    CreateOrderRequestJSON.encode(createOrderRequest),
    config,
  );
  return CreateOrderResponseJSON.decode(response);
}

export async function FindOrderJSON(
  findOrderRequest: FindOrderRequest,
  config?: ClientConfiguration,
): Promise<FindOrderResponse> {
  const response = await JSONrequest(
    "/swaplp.v1.SwaplpService/FindOrder",
    FindOrderRequestJSON.encode(findOrderRequest),
    config,
  );
  return FindOrderResponseJSON.decode(response);
}

//========================================//
//             SwaplpService              //
//========================================//

export interface SwaplpService<Context = unknown> {
  GetSystem: (
    getSystemRequest: GetSystemRequest,
    context: Context,
  ) => Promise<GetSystemResponse> | GetSystemResponse;
  ListPairs: (
    listPairsRequest: ListPairsRequest,
    context: Context,
  ) => Promise<ListPairsResponse> | ListPairsResponse;
  ListAssets: (
    listAssetsRequest: ListAssetsRequest,
    context: Context,
  ) => Promise<ListAssetsResponse> | ListAssetsResponse;
  CreateOrder: (
    createOrderRequest: CreateOrderRequest,
    context: Context,
  ) => Promise<CreateOrderResponse> | CreateOrderResponse;
  FindOrder: (
    findOrderRequest: FindOrderRequest,
    context: Context,
  ) => Promise<FindOrderResponse> | FindOrderResponse;
}

export function createSwaplpService<Context>(service: SwaplpService<Context>) {
  return {
    name: "swaplp.v1.SwaplpService",
    methods: {
      GetSystem: {
        name: "GetSystem",
        handler: service.GetSystem,
        input: { protobuf: GetSystemRequest, json: GetSystemRequestJSON },
        output: { protobuf: GetSystemResponse, json: GetSystemResponseJSON },
      },
      ListPairs: {
        name: "ListPairs",
        handler: service.ListPairs,
        input: { protobuf: ListPairsRequest, json: ListPairsRequestJSON },
        output: { protobuf: ListPairsResponse, json: ListPairsResponseJSON },
      },
      ListAssets: {
        name: "ListAssets",
        handler: service.ListAssets,
        input: { protobuf: ListAssetsRequest, json: ListAssetsRequestJSON },
        output: { protobuf: ListAssetsResponse, json: ListAssetsResponseJSON },
      },
      CreateOrder: {
        name: "CreateOrder",
        handler: service.CreateOrder,
        input: { protobuf: CreateOrderRequest, json: CreateOrderRequestJSON },
        output: {
          protobuf: CreateOrderResponse,
          json: CreateOrderResponseJSON,
        },
      },
      FindOrder: {
        name: "FindOrder",
        handler: service.FindOrder,
        input: { protobuf: FindOrderRequest, json: FindOrderRequestJSON },
        output: { protobuf: FindOrderResponse, json: FindOrderResponseJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const System = {
  /**
   * Serializes System to protobuf.
   */
  encode: function (msg: PartialDeep<System>): Uint8Array {
    return System._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes System from protobuf.
   */
  decode: function (bytes: ByteSource): System {
    return System._readMessage(
      System.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes System with all fields set to their default value.
   */
  initialize: function (msg?: Partial<System>): System {
    return {
      payAssetId: "",
      payAmount: "",
      payAsset: Asset.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<System>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.payAssetId) {
      writer.writeString(1, msg.payAssetId);
    }
    if (msg.payAmount) {
      writer.writeString(2, msg.payAmount);
    }
    if (msg.payAsset) {
      writer.writeMessage(3, msg.payAsset, Asset._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: System,
    reader: protoscript.BinaryReader,
  ): System {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.payAssetId = reader.readString();
          break;
        }
        case 2: {
          msg.payAmount = reader.readString();
          break;
        }
        case 3: {
          reader.readMessage(msg.payAsset, Asset._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Asset = {
  /**
   * Serializes Asset to protobuf.
   */
  encode: function (msg: PartialDeep<Asset>): Uint8Array {
    return Asset._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Asset from protobuf.
   */
  decode: function (bytes: ByteSource): Asset {
    return Asset._readMessage(
      Asset.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Asset>): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      price: "",
      weight: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Asset>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.assetId) {
      writer.writeString(1, msg.assetId);
    }
    if (msg.chainId) {
      writer.writeString(2, msg.chainId);
    }
    if (msg.symbol) {
      writer.writeString(3, msg.symbol);
    }
    if (msg.name) {
      writer.writeString(4, msg.name);
    }
    if (msg.logo) {
      writer.writeString(5, msg.logo);
    }
    if (msg.price) {
      writer.writeString(6, msg.price);
    }
    if (msg.weight) {
      writer.writeInt64String(7, msg.weight.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, reader: protoscript.BinaryReader): Asset {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.assetId = reader.readString();
          break;
        }
        case 2: {
          msg.chainId = reader.readString();
          break;
        }
        case 3: {
          msg.symbol = reader.readString();
          break;
        }
        case 4: {
          msg.name = reader.readString();
          break;
        }
        case 5: {
          msg.logo = reader.readString();
          break;
        }
        case 6: {
          msg.price = reader.readString();
          break;
        }
        case 7: {
          msg.weight = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Pair = {
  /**
   * Serializes Pair to protobuf.
   */
  encode: function (msg: PartialDeep<Pair>): Uint8Array {
    return Pair._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Pair from protobuf.
   */
  decode: function (bytes: ByteSource): Pair {
    return Pair._readMessage(
      Pair.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Pair with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Pair>): Pair {
    return {
      baseAssetId: "",
      quoteAssetId: "",
      lpAssetId: "",
      state: Pair.State._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Pair>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.baseAssetId) {
      writer.writeString(1, msg.baseAssetId);
    }
    if (msg.quoteAssetId) {
      writer.writeString(2, msg.quoteAssetId);
    }
    if (msg.lpAssetId) {
      writer.writeString(3, msg.lpAssetId);
    }
    if (msg.state && Pair.State._toInt(msg.state)) {
      writer.writeEnum(4, Pair.State._toInt(msg.state));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pair, reader: protoscript.BinaryReader): Pair {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 2: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 3: {
          msg.lpAssetId = reader.readString();
          break;
        }
        case 4: {
          msg.state = Pair.State._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  State: {
    PENDING_NOT_SET: "PENDING_NOT_SET",
    PROPOSING: "PROPOSING",
    TRADING: "TRADING",
    /**
     * @private
     */
    _fromInt: function (i: number): Pair.State {
      switch (i) {
        case 0: {
          return "PENDING_NOT_SET";
        }
        case 1: {
          return "PROPOSING";
        }
        case 2: {
          return "TRADING";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Pair.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Pair.State): number {
      switch (i) {
        case "PENDING_NOT_SET": {
          return 0;
        }
        case "PROPOSING": {
          return 1;
        }
        case "TRADING": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const Transfer = {
  /**
   * Serializes Transfer to protobuf.
   */
  encode: function (msg: PartialDeep<Transfer>): Uint8Array {
    return Transfer._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Transfer from protobuf.
   */
  decode: function (bytes: ByteSource): Transfer {
    return Transfer._readMessage(
      Transfer.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Transfer with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Transfer>): Transfer {
    return {
      traceId: "",
      assetId: "",
      amount: "",
      opponentId: "",
      memo: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Transfer>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    if (msg.assetId) {
      writer.writeString(2, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(3, msg.amount);
    }
    if (msg.opponentId) {
      writer.writeString(4, msg.opponentId);
    }
    if (msg.memo) {
      writer.writeString(5, msg.memo);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Transfer,
    reader: protoscript.BinaryReader,
  ): Transfer {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        case 2: {
          msg.assetId = reader.readString();
          break;
        }
        case 3: {
          msg.amount = reader.readString();
          break;
        }
        case 4: {
          msg.opponentId = reader.readString();
          break;
        }
        case 5: {
          msg.memo = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Order = {
  /**
   * Serializes Order to protobuf.
   */
  encode: function (msg: PartialDeep<Order>): Uint8Array {
    return Order._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Order from protobuf.
   */
  decode: function (bytes: ByteSource): Order {
    return Order._readMessage(
      Order.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Order with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Order>): Order {
    return {
      id: "",
      createdAt: protoscript.Timestamp.initialize(),
      payAssetId: "",
      payAmount: "",
      lpName: "",
      lpSymbol: "",
      lpSupply: 0n,
      state: Order.State._fromInt(0),
      swapMethod: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Order>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        2,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.payAssetId) {
      writer.writeString(3, msg.payAssetId);
    }
    if (msg.payAmount) {
      writer.writeString(4, msg.payAmount);
    }
    if (msg.lpName) {
      writer.writeString(5, msg.lpName);
    }
    if (msg.lpSymbol) {
      writer.writeString(6, msg.lpSymbol);
    }
    if (msg.lpSupply) {
      writer.writeInt64String(7, msg.lpSupply.toString() as any);
    }
    if (msg.state && Order.State._toInt(msg.state)) {
      writer.writeEnum(8, Order.State._toInt(msg.state));
    }
    if (msg.swapMethod) {
      writer.writeString(9, msg.swapMethod);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Order, reader: protoscript.BinaryReader): Order {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.payAssetId = reader.readString();
          break;
        }
        case 4: {
          msg.payAmount = reader.readString();
          break;
        }
        case 5: {
          msg.lpName = reader.readString();
          break;
        }
        case 6: {
          msg.lpSymbol = reader.readString();
          break;
        }
        case 7: {
          msg.lpSupply = BigInt(reader.readInt64String());
          break;
        }
        case 8: {
          msg.state = Order.State._fromInt(reader.readEnum());
          break;
        }
        case 9: {
          msg.swapMethod = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  State: {
    PENDING_NOT_SET: "PENDING_NOT_SET",
    REJECTED: "REJECTED",
    PROCESSED: "PROCESSED",
    PROPOSING: "PROPOSING",
    /**
     * @private
     */
    _fromInt: function (i: number): Order.State {
      switch (i) {
        case 0: {
          return "PENDING_NOT_SET";
        }
        case 1: {
          return "REJECTED";
        }
        case 2: {
          return "PROCESSED";
        }
        case 3: {
          return "PROPOSING";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Order.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Order.State): number {
      switch (i) {
        case "PENDING_NOT_SET": {
          return 0;
        }
        case "REJECTED": {
          return 1;
        }
        case "PROCESSED": {
          return 2;
        }
        case "PROPOSING": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const GetSystemRequest = {
  /**
   * Serializes GetSystemRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<GetSystemRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes GetSystemRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): GetSystemRequest {
    return {};
  },

  /**
   * Initializes GetSystemRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSystemRequest>): GetSystemRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<GetSystemRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: GetSystemRequest,
    _reader: protoscript.BinaryReader,
  ): GetSystemRequest {
    return _msg;
  },
};

export const GetSystemResponse = {
  /**
   * Serializes GetSystemResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetSystemResponse>): Uint8Array {
    return GetSystemResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetSystemResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetSystemResponse {
    return GetSystemResponse._readMessage(
      GetSystemResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetSystemResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSystemResponse>): GetSystemResponse {
    return {
      system: System.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSystemResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.system) {
      writer.writeMessage(1, msg.system, System._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSystemResponse,
    reader: protoscript.BinaryReader,
  ): GetSystemResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.system, System._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListPairsRequest = {
  /**
   * Serializes ListPairsRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<ListPairsRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ListPairsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ListPairsRequest {
    return {};
  },

  /**
   * Initializes ListPairsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPairsRequest>): ListPairsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListPairsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ListPairsRequest,
    _reader: protoscript.BinaryReader,
  ): ListPairsRequest {
    return _msg;
  },
};

export const ListPairsResponse = {
  /**
   * Serializes ListPairsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListPairsResponse>): Uint8Array {
    return ListPairsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListPairsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListPairsResponse {
    return ListPairsResponse._readMessage(
      ListPairsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListPairsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPairsResponse>): ListPairsResponse {
    return {
      pairs: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPairsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.pairs?.length) {
      writer.writeRepeatedMessage(1, msg.pairs as any, Pair._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPairsResponse,
    reader: protoscript.BinaryReader,
  ): ListPairsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Pair.initialize();
          reader.readMessage(m, Pair._readMessage);
          msg.pairs.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAssetsRequest = {
  /**
   * Serializes ListAssetsRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<ListAssetsRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ListAssetsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ListAssetsRequest {
    return {};
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAssetsRequest>): ListAssetsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListAssetsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ListAssetsRequest,
    _reader: protoscript.BinaryReader,
  ): ListAssetsRequest {
    return _msg;
  },
};

export const ListAssetsResponse = {
  /**
   * Serializes ListAssetsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListAssetsResponse>): Uint8Array {
    return ListAssetsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAssetsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListAssetsResponse {
    return ListAssetsResponse._readMessage(
      ListAssetsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAssetsResponse>): ListAssetsResponse {
    return {
      assets: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAssetsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.assets?.length) {
      writer.writeRepeatedMessage(1, msg.assets as any, Asset._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    reader: protoscript.BinaryReader,
  ): ListAssetsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Asset.initialize();
          reader.readMessage(m, Asset._readMessage);
          msg.assets.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateOrderRequest = {
  /**
   * Serializes CreateOrderRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateOrderRequest>): Uint8Array {
    return CreateOrderRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateOrderRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateOrderRequest {
    return CreateOrderRequest._readMessage(
      CreateOrderRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateOrderRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateOrderRequest>): CreateOrderRequest {
    return {
      baseAssetId: "",
      quoteAssetId: "",
      swapMethod: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateOrderRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.baseAssetId) {
      writer.writeString(1, msg.baseAssetId);
    }
    if (msg.quoteAssetId) {
      writer.writeString(2, msg.quoteAssetId);
    }
    if (msg.swapMethod) {
      writer.writeString(3, msg.swapMethod);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateOrderRequest,
    reader: protoscript.BinaryReader,
  ): CreateOrderRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.baseAssetId = reader.readString();
          break;
        }
        case 2: {
          msg.quoteAssetId = reader.readString();
          break;
        }
        case 3: {
          msg.swapMethod = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateOrderResponse = {
  /**
   * Serializes CreateOrderResponse to protobuf.
   */
  encode: function (msg: PartialDeep<CreateOrderResponse>): Uint8Array {
    return CreateOrderResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateOrderResponse from protobuf.
   */
  decode: function (bytes: ByteSource): CreateOrderResponse {
    return CreateOrderResponse._readMessage(
      CreateOrderResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateOrderResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateOrderResponse>,
  ): CreateOrderResponse {
    return {
      order: Order.initialize(),
      transfer: Transfer.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateOrderResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.order) {
      writer.writeMessage(1, msg.order, Order._writeMessage);
    }
    if (msg.transfer) {
      writer.writeMessage(2, msg.transfer, Transfer._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateOrderResponse,
    reader: protoscript.BinaryReader,
  ): CreateOrderResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.order, Order._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.transfer, Transfer._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindOrderRequest = {
  /**
   * Serializes FindOrderRequest to protobuf.
   */
  encode: function (msg: PartialDeep<FindOrderRequest>): Uint8Array {
    return FindOrderRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindOrderRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindOrderRequest {
    return FindOrderRequest._readMessage(
      FindOrderRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindOrderRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindOrderRequest>): FindOrderRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindOrderRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindOrderRequest,
    reader: protoscript.BinaryReader,
  ): FindOrderRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindOrderResponse = {
  /**
   * Serializes FindOrderResponse to protobuf.
   */
  encode: function (msg: PartialDeep<FindOrderResponse>): Uint8Array {
    return FindOrderResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindOrderResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindOrderResponse {
    return FindOrderResponse._readMessage(
      FindOrderResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindOrderResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindOrderResponse>): FindOrderResponse {
    return {
      order: Order.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindOrderResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.order) {
      writer.writeMessage(1, msg.order, Order._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindOrderResponse,
    reader: protoscript.BinaryReader,
  ): FindOrderResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.order, Order._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const SystemJSON = {
  /**
   * Serializes System to JSON.
   */
  encode: function (msg: PartialDeep<System>): string {
    return JSON.stringify(SystemJSON._writeMessage(msg));
  },

  /**
   * Deserializes System from JSON.
   */
  decode: function (json: string): System {
    return SystemJSON._readMessage(SystemJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes System with all fields set to their default value.
   */
  initialize: function (msg?: Partial<System>): System {
    return {
      payAssetId: "",
      payAmount: "",
      payAsset: AssetJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<System>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.payAssetId) {
      json["payAssetId"] = msg.payAssetId;
    }
    if (msg.payAmount) {
      json["payAmount"] = msg.payAmount;
    }
    if (msg.payAsset) {
      const _payAsset_ = AssetJSON._writeMessage(msg.payAsset);
      if (Object.keys(_payAsset_).length > 0) {
        json["payAsset"] = _payAsset_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: System, json: any): System {
    const _payAssetId_ = json["payAssetId"] ?? json["pay_asset_id"];
    if (_payAssetId_) {
      msg.payAssetId = _payAssetId_;
    }
    const _payAmount_ = json["payAmount"] ?? json["pay_amount"];
    if (_payAmount_) {
      msg.payAmount = _payAmount_;
    }
    const _payAsset_ = json["payAsset"] ?? json["pay_asset"];
    if (_payAsset_) {
      AssetJSON._readMessage(msg.payAsset, _payAsset_);
    }
    return msg;
  },
};

export const AssetJSON = {
  /**
   * Serializes Asset to JSON.
   */
  encode: function (msg: PartialDeep<Asset>): string {
    return JSON.stringify(AssetJSON._writeMessage(msg));
  },

  /**
   * Deserializes Asset from JSON.
   */
  decode: function (json: string): Asset {
    return AssetJSON._readMessage(AssetJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Asset>): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      price: "",
      weight: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Asset>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.chainId) {
      json["chainId"] = msg.chainId;
    }
    if (msg.symbol) {
      json["symbol"] = msg.symbol;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.logo) {
      json["logo"] = msg.logo;
    }
    if (msg.price) {
      json["price"] = msg.price;
    }
    if (msg.weight) {
      json["weight"] = String(msg.weight);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, json: any): Asset {
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _chainId_ = json["chainId"] ?? json["chain_id"];
    if (_chainId_) {
      msg.chainId = _chainId_;
    }
    const _symbol_ = json["symbol"];
    if (_symbol_) {
      msg.symbol = _symbol_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _logo_ = json["logo"];
    if (_logo_) {
      msg.logo = _logo_;
    }
    const _price_ = json["price"];
    if (_price_) {
      msg.price = _price_;
    }
    const _weight_ = json["weight"];
    if (_weight_) {
      msg.weight = BigInt(_weight_);
    }
    return msg;
  },
};

export const PairJSON = {
  /**
   * Serializes Pair to JSON.
   */
  encode: function (msg: PartialDeep<Pair>): string {
    return JSON.stringify(PairJSON._writeMessage(msg));
  },

  /**
   * Deserializes Pair from JSON.
   */
  decode: function (json: string): Pair {
    return PairJSON._readMessage(PairJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Pair with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Pair>): Pair {
    return {
      baseAssetId: "",
      quoteAssetId: "",
      lpAssetId: "",
      state: Pair.State._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Pair>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.baseAssetId) {
      json["baseAssetId"] = msg.baseAssetId;
    }
    if (msg.quoteAssetId) {
      json["quoteAssetId"] = msg.quoteAssetId;
    }
    if (msg.lpAssetId) {
      json["lpAssetId"] = msg.lpAssetId;
    }
    if (msg.state && PairJSON.State._toInt(msg.state)) {
      json["state"] = msg.state;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pair, json: any): Pair {
    const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
    if (_baseAssetId_) {
      msg.baseAssetId = _baseAssetId_;
    }
    const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
    if (_quoteAssetId_) {
      msg.quoteAssetId = _quoteAssetId_;
    }
    const _lpAssetId_ = json["lpAssetId"] ?? json["lp_asset_id"];
    if (_lpAssetId_) {
      msg.lpAssetId = _lpAssetId_;
    }
    const _state_ = json["state"];
    if (_state_) {
      msg.state = Pair.State._fromInt(_state_);
    }
    return msg;
  },

  State: {
    PENDING_NOT_SET: "PENDING_NOT_SET",
    PROPOSING: "PROPOSING",
    TRADING: "TRADING",
    /**
     * @private
     */
    _fromInt: function (i: number): Pair.State {
      switch (i) {
        case 0: {
          return "PENDING_NOT_SET";
        }
        case 1: {
          return "PROPOSING";
        }
        case 2: {
          return "TRADING";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Pair.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Pair.State): number {
      switch (i) {
        case "PENDING_NOT_SET": {
          return 0;
        }
        case "PROPOSING": {
          return 1;
        }
        case "TRADING": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const TransferJSON = {
  /**
   * Serializes Transfer to JSON.
   */
  encode: function (msg: PartialDeep<Transfer>): string {
    return JSON.stringify(TransferJSON._writeMessage(msg));
  },

  /**
   * Deserializes Transfer from JSON.
   */
  decode: function (json: string): Transfer {
    return TransferJSON._readMessage(
      TransferJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes Transfer with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Transfer>): Transfer {
    return {
      traceId: "",
      assetId: "",
      amount: "",
      opponentId: "",
      memo: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Transfer>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json["traceId"] = msg.traceId;
    }
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.opponentId) {
      json["opponentId"] = msg.opponentId;
    }
    if (msg.memo) {
      json["memo"] = msg.memo;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Transfer, json: any): Transfer {
    const _traceId_ = json["traceId"] ?? json["trace_id"];
    if (_traceId_) {
      msg.traceId = _traceId_;
    }
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _opponentId_ = json["opponentId"] ?? json["opponent_id"];
    if (_opponentId_) {
      msg.opponentId = _opponentId_;
    }
    const _memo_ = json["memo"];
    if (_memo_) {
      msg.memo = _memo_;
    }
    return msg;
  },
};

export const OrderJSON = {
  /**
   * Serializes Order to JSON.
   */
  encode: function (msg: PartialDeep<Order>): string {
    return JSON.stringify(OrderJSON._writeMessage(msg));
  },

  /**
   * Deserializes Order from JSON.
   */
  decode: function (json: string): Order {
    return OrderJSON._readMessage(OrderJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Order with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Order>): Order {
    return {
      id: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      payAssetId: "",
      payAmount: "",
      lpName: "",
      lpSymbol: "",
      lpSupply: 0n,
      state: Order.State._fromInt(0),
      swapMethod: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Order>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.payAssetId) {
      json["payAssetId"] = msg.payAssetId;
    }
    if (msg.payAmount) {
      json["payAmount"] = msg.payAmount;
    }
    if (msg.lpName) {
      json["lpName"] = msg.lpName;
    }
    if (msg.lpSymbol) {
      json["lpSymbol"] = msg.lpSymbol;
    }
    if (msg.lpSupply) {
      json["lpSupply"] = String(msg.lpSupply);
    }
    if (msg.state && OrderJSON.State._toInt(msg.state)) {
      json["state"] = msg.state;
    }
    if (msg.swapMethod) {
      json["swapMethod"] = msg.swapMethod;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Order, json: any): Order {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _payAssetId_ = json["payAssetId"] ?? json["pay_asset_id"];
    if (_payAssetId_) {
      msg.payAssetId = _payAssetId_;
    }
    const _payAmount_ = json["payAmount"] ?? json["pay_amount"];
    if (_payAmount_) {
      msg.payAmount = _payAmount_;
    }
    const _lpName_ = json["lpName"] ?? json["lp_name"];
    if (_lpName_) {
      msg.lpName = _lpName_;
    }
    const _lpSymbol_ = json["lpSymbol"] ?? json["lp_symbol"];
    if (_lpSymbol_) {
      msg.lpSymbol = _lpSymbol_;
    }
    const _lpSupply_ = json["lpSupply"] ?? json["lp_supply"];
    if (_lpSupply_) {
      msg.lpSupply = BigInt(_lpSupply_);
    }
    const _state_ = json["state"];
    if (_state_) {
      msg.state = Order.State._fromInt(_state_);
    }
    const _swapMethod_ = json["swapMethod"] ?? json["swap_method"];
    if (_swapMethod_) {
      msg.swapMethod = _swapMethod_;
    }
    return msg;
  },

  State: {
    PENDING_NOT_SET: "PENDING_NOT_SET",
    REJECTED: "REJECTED",
    PROCESSED: "PROCESSED",
    PROPOSING: "PROPOSING",
    /**
     * @private
     */
    _fromInt: function (i: number): Order.State {
      switch (i) {
        case 0: {
          return "PENDING_NOT_SET";
        }
        case 1: {
          return "REJECTED";
        }
        case 2: {
          return "PROCESSED";
        }
        case 3: {
          return "PROPOSING";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Order.State;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Order.State): number {
      switch (i) {
        case "PENDING_NOT_SET": {
          return 0;
        }
        case "REJECTED": {
          return 1;
        }
        case "PROCESSED": {
          return 2;
        }
        case "PROPOSING": {
          return 3;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const GetSystemRequestJSON = {
  /**
   * Serializes GetSystemRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<GetSystemRequest>): string {
    return "{}";
  },

  /**
   * Deserializes GetSystemRequest from JSON.
   */
  decode: function (_json?: string): GetSystemRequest {
    return {};
  },

  /**
   * Initializes GetSystemRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSystemRequest>): GetSystemRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<GetSystemRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetSystemRequest, _json: any): GetSystemRequest {
    return msg;
  },
};

export const GetSystemResponseJSON = {
  /**
   * Serializes GetSystemResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetSystemResponse>): string {
    return JSON.stringify(GetSystemResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetSystemResponse from JSON.
   */
  decode: function (json: string): GetSystemResponse {
    return GetSystemResponseJSON._readMessage(
      GetSystemResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetSystemResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSystemResponse>): GetSystemResponse {
    return {
      system: SystemJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSystemResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.system) {
      const _system_ = SystemJSON._writeMessage(msg.system);
      if (Object.keys(_system_).length > 0) {
        json["system"] = _system_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSystemResponse,
    json: any,
  ): GetSystemResponse {
    const _system_ = json["system"];
    if (_system_) {
      SystemJSON._readMessage(msg.system, _system_);
    }
    return msg;
  },
};

export const ListPairsRequestJSON = {
  /**
   * Serializes ListPairsRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<ListPairsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ListPairsRequest from JSON.
   */
  decode: function (_json?: string): ListPairsRequest {
    return {};
  },

  /**
   * Initializes ListPairsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPairsRequest>): ListPairsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListPairsRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: ListPairsRequest, _json: any): ListPairsRequest {
    return msg;
  },
};

export const ListPairsResponseJSON = {
  /**
   * Serializes ListPairsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListPairsResponse>): string {
    return JSON.stringify(ListPairsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListPairsResponse from JSON.
   */
  decode: function (json: string): ListPairsResponse {
    return ListPairsResponseJSON._readMessage(
      ListPairsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListPairsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPairsResponse>): ListPairsResponse {
    return {
      pairs: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPairsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pairs?.length) {
      json["pairs"] = msg.pairs.map(PairJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPairsResponse,
    json: any,
  ): ListPairsResponse {
    const _pairs_ = json["pairs"];
    if (_pairs_) {
      for (const item of _pairs_) {
        const m = PairJSON.initialize();
        PairJSON._readMessage(m, item);
        msg.pairs.push(m);
      }
    }
    return msg;
  },
};

export const ListAssetsRequestJSON = {
  /**
   * Serializes ListAssetsRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<ListAssetsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ListAssetsRequest from JSON.
   */
  decode: function (_json?: string): ListAssetsRequest {
    return {};
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAssetsRequest>): ListAssetsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListAssetsRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsRequest,
    _json: any,
  ): ListAssetsRequest {
    return msg;
  },
};

export const ListAssetsResponseJSON = {
  /**
   * Serializes ListAssetsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListAssetsResponse>): string {
    return JSON.stringify(ListAssetsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAssetsResponse from JSON.
   */
  decode: function (json: string): ListAssetsResponse {
    return ListAssetsResponseJSON._readMessage(
      ListAssetsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAssetsResponse>): ListAssetsResponse {
    return {
      assets: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAssetsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assets?.length) {
      json["assets"] = msg.assets.map(AssetJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    json: any,
  ): ListAssetsResponse {
    const _assets_ = json["assets"];
    if (_assets_) {
      for (const item of _assets_) {
        const m = AssetJSON.initialize();
        AssetJSON._readMessage(m, item);
        msg.assets.push(m);
      }
    }
    return msg;
  },
};

export const CreateOrderRequestJSON = {
  /**
   * Serializes CreateOrderRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateOrderRequest>): string {
    return JSON.stringify(CreateOrderRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateOrderRequest from JSON.
   */
  decode: function (json: string): CreateOrderRequest {
    return CreateOrderRequestJSON._readMessage(
      CreateOrderRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateOrderRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateOrderRequest>): CreateOrderRequest {
    return {
      baseAssetId: "",
      quoteAssetId: "",
      swapMethod: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateOrderRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.baseAssetId) {
      json["baseAssetId"] = msg.baseAssetId;
    }
    if (msg.quoteAssetId) {
      json["quoteAssetId"] = msg.quoteAssetId;
    }
    if (msg.swapMethod) {
      json["swapMethod"] = msg.swapMethod;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateOrderRequest,
    json: any,
  ): CreateOrderRequest {
    const _baseAssetId_ = json["baseAssetId"] ?? json["base_asset_id"];
    if (_baseAssetId_) {
      msg.baseAssetId = _baseAssetId_;
    }
    const _quoteAssetId_ = json["quoteAssetId"] ?? json["quote_asset_id"];
    if (_quoteAssetId_) {
      msg.quoteAssetId = _quoteAssetId_;
    }
    const _swapMethod_ = json["swapMethod"] ?? json["swap_method"];
    if (_swapMethod_) {
      msg.swapMethod = _swapMethod_;
    }
    return msg;
  },
};

export const CreateOrderResponseJSON = {
  /**
   * Serializes CreateOrderResponse to JSON.
   */
  encode: function (msg: PartialDeep<CreateOrderResponse>): string {
    return JSON.stringify(CreateOrderResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateOrderResponse from JSON.
   */
  decode: function (json: string): CreateOrderResponse {
    return CreateOrderResponseJSON._readMessage(
      CreateOrderResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateOrderResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateOrderResponse>,
  ): CreateOrderResponse {
    return {
      order: OrderJSON.initialize(),
      transfer: TransferJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateOrderResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.order) {
      const _order_ = OrderJSON._writeMessage(msg.order);
      if (Object.keys(_order_).length > 0) {
        json["order"] = _order_;
      }
    }
    if (msg.transfer) {
      const _transfer_ = TransferJSON._writeMessage(msg.transfer);
      if (Object.keys(_transfer_).length > 0) {
        json["transfer"] = _transfer_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateOrderResponse,
    json: any,
  ): CreateOrderResponse {
    const _order_ = json["order"];
    if (_order_) {
      OrderJSON._readMessage(msg.order, _order_);
    }
    const _transfer_ = json["transfer"];
    if (_transfer_) {
      TransferJSON._readMessage(msg.transfer, _transfer_);
    }
    return msg;
  },
};

export const FindOrderRequestJSON = {
  /**
   * Serializes FindOrderRequest to JSON.
   */
  encode: function (msg: PartialDeep<FindOrderRequest>): string {
    return JSON.stringify(FindOrderRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindOrderRequest from JSON.
   */
  decode: function (json: string): FindOrderRequest {
    return FindOrderRequestJSON._readMessage(
      FindOrderRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindOrderRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindOrderRequest>): FindOrderRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindOrderRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FindOrderRequest, json: any): FindOrderRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const FindOrderResponseJSON = {
  /**
   * Serializes FindOrderResponse to JSON.
   */
  encode: function (msg: PartialDeep<FindOrderResponse>): string {
    return JSON.stringify(FindOrderResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindOrderResponse from JSON.
   */
  decode: function (json: string): FindOrderResponse {
    return FindOrderResponseJSON._readMessage(
      FindOrderResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindOrderResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindOrderResponse>): FindOrderResponse {
    return {
      order: OrderJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindOrderResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.order) {
      const _order_ = OrderJSON._writeMessage(msg.order);
      if (Object.keys(_order_).length > 0) {
        json["order"] = _order_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindOrderResponse,
    json: any,
  ): FindOrderResponse {
    const _order_ = json["order"];
    if (_order_) {
      OrderJSON._readMessage(msg.order, _order_);
    }
    return msg;
  },
};
