// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: wallethub/v1/wallethub.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface Asset {
  assetId: string;
  chainId: string;
  symbol: string;
  name: string;
  logo: string;
  price: string;
}

export interface Snapshot {
  id: bigint;
  createdAt: protoscript.Timestamp;
  snapshotId: string;
  traceId: string;
  assetId: string;
  amount: string;
  userId: string;
  source: string;
  opponentId: string;
  memo: string;
  asset: Asset;
}

export interface User {
  clientId: string;
  brokerId: string;
  name: string;
  logo: string;
  sessionId: string;
  privateKey: string;
}

export interface CreateTransferRequest {
  traceId: string;
  assetId: string;
  amount: string;
  userId: string;
  brokerId: string;
  opponentId: string;
  receivers: string[];
  threshold: number;
  memo: string;
}

export interface CreateTransferResponse {}

export interface ListSnapshotsRequest {
  userId: string;
  brokerId: string;
  fromId: bigint;
  limit: number;
}

export interface ListSnapshotsResponse {
  snapshots: Snapshot[];
}

export interface CreateUserRequest {
  name: string;
  isBroker: boolean;
}

export interface CreateUserResponse {
  user: User;
}

//========================================//
//     BrokerService Protobuf Client      //
//========================================//

export async function ListSnapshots(
  listSnapshotsRequest: ListSnapshotsRequest,
  config?: ClientConfiguration,
): Promise<ListSnapshotsResponse> {
  const response = await PBrequest(
    "/wallethub.v1.BrokerService/ListSnapshots",
    ListSnapshotsRequest.encode(listSnapshotsRequest),
    config,
  );
  return ListSnapshotsResponse.decode(response);
}

export async function CreateTransfer(
  createTransferRequest: CreateTransferRequest,
  config?: ClientConfiguration,
): Promise<CreateTransferResponse> {
  const response = await PBrequest(
    "/wallethub.v1.BrokerService/CreateTransfer",
    CreateTransferRequest.encode(createTransferRequest),
    config,
  );
  return CreateTransferResponse.decode(response);
}

/**
 * CreateUser create a new user, admin or broker token required
 */
export async function CreateUser(
  createUserRequest: CreateUserRequest,
  config?: ClientConfiguration,
): Promise<CreateUserResponse> {
  const response = await PBrequest(
    "/wallethub.v1.BrokerService/CreateUser",
    CreateUserRequest.encode(createUserRequest),
    config,
  );
  return CreateUserResponse.decode(response);
}

//========================================//
//       BrokerService JSON Client        //
//========================================//

export async function ListSnapshotsJSON(
  listSnapshotsRequest: ListSnapshotsRequest,
  config?: ClientConfiguration,
): Promise<ListSnapshotsResponse> {
  const response = await JSONrequest(
    "/wallethub.v1.BrokerService/ListSnapshots",
    ListSnapshotsRequestJSON.encode(listSnapshotsRequest),
    config,
  );
  return ListSnapshotsResponseJSON.decode(response);
}

export async function CreateTransferJSON(
  createTransferRequest: CreateTransferRequest,
  config?: ClientConfiguration,
): Promise<CreateTransferResponse> {
  const response = await JSONrequest(
    "/wallethub.v1.BrokerService/CreateTransfer",
    CreateTransferRequestJSON.encode(createTransferRequest),
    config,
  );
  return CreateTransferResponseJSON.decode(response);
}

/**
 * CreateUser create a new user, admin or broker token required
 */
export async function CreateUserJSON(
  createUserRequest: CreateUserRequest,
  config?: ClientConfiguration,
): Promise<CreateUserResponse> {
  const response = await JSONrequest(
    "/wallethub.v1.BrokerService/CreateUser",
    CreateUserRequestJSON.encode(createUserRequest),
    config,
  );
  return CreateUserResponseJSON.decode(response);
}

//========================================//
//             BrokerService              //
//========================================//

export interface BrokerService<Context = unknown> {
  ListSnapshots: (
    listSnapshotsRequest: ListSnapshotsRequest,
    context: Context,
  ) => Promise<ListSnapshotsResponse> | ListSnapshotsResponse;
  CreateTransfer: (
    createTransferRequest: CreateTransferRequest,
    context: Context,
  ) => Promise<CreateTransferResponse> | CreateTransferResponse;
  /**
   * CreateUser create a new user, admin or broker token required
   */
  CreateUser: (
    createUserRequest: CreateUserRequest,
    context: Context,
  ) => Promise<CreateUserResponse> | CreateUserResponse;
}

export function createBrokerService<Context>(service: BrokerService<Context>) {
  return {
    name: "wallethub.v1.BrokerService",
    methods: {
      ListSnapshots: {
        name: "ListSnapshots",
        handler: service.ListSnapshots,
        input: {
          protobuf: ListSnapshotsRequest,
          json: ListSnapshotsRequestJSON,
        },
        output: {
          protobuf: ListSnapshotsResponse,
          json: ListSnapshotsResponseJSON,
        },
      },
      CreateTransfer: {
        name: "CreateTransfer",
        handler: service.CreateTransfer,
        input: {
          protobuf: CreateTransferRequest,
          json: CreateTransferRequestJSON,
        },
        output: {
          protobuf: CreateTransferResponse,
          json: CreateTransferResponseJSON,
        },
      },
      CreateUser: {
        name: "CreateUser",
        handler: service.CreateUser,
        input: { protobuf: CreateUserRequest, json: CreateUserRequestJSON },
        output: { protobuf: CreateUserResponse, json: CreateUserResponseJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Asset = {
  /**
   * Serializes Asset to protobuf.
   */
  encode: function (msg: PartialDeep<Asset>): Uint8Array {
    return Asset._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Asset from protobuf.
   */
  decode: function (bytes: ByteSource): Asset {
    return Asset._readMessage(
      Asset.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Asset>): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      price: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Asset>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.assetId) {
      writer.writeString(1, msg.assetId);
    }
    if (msg.chainId) {
      writer.writeString(2, msg.chainId);
    }
    if (msg.symbol) {
      writer.writeString(3, msg.symbol);
    }
    if (msg.name) {
      writer.writeString(4, msg.name);
    }
    if (msg.logo) {
      writer.writeString(5, msg.logo);
    }
    if (msg.price) {
      writer.writeString(6, msg.price);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, reader: protoscript.BinaryReader): Asset {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.assetId = reader.readString();
          break;
        }
        case 2: {
          msg.chainId = reader.readString();
          break;
        }
        case 3: {
          msg.symbol = reader.readString();
          break;
        }
        case 4: {
          msg.name = reader.readString();
          break;
        }
        case 5: {
          msg.logo = reader.readString();
          break;
        }
        case 6: {
          msg.price = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Snapshot = {
  /**
   * Serializes Snapshot to protobuf.
   */
  encode: function (msg: PartialDeep<Snapshot>): Uint8Array {
    return Snapshot._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Snapshot from protobuf.
   */
  decode: function (bytes: ByteSource): Snapshot {
    return Snapshot._readMessage(
      Snapshot.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Snapshot with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Snapshot>): Snapshot {
    return {
      id: 0n,
      createdAt: protoscript.Timestamp.initialize(),
      snapshotId: "",
      traceId: "",
      assetId: "",
      amount: "",
      userId: "",
      source: "",
      opponentId: "",
      memo: "",
      asset: Asset.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Snapshot>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeInt64String(1, msg.id.toString() as any);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        2,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.snapshotId) {
      writer.writeString(3, msg.snapshotId);
    }
    if (msg.traceId) {
      writer.writeString(4, msg.traceId);
    }
    if (msg.assetId) {
      writer.writeString(5, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(6, msg.amount);
    }
    if (msg.userId) {
      writer.writeString(7, msg.userId);
    }
    if (msg.source) {
      writer.writeString(8, msg.source);
    }
    if (msg.opponentId) {
      writer.writeString(9, msg.opponentId);
    }
    if (msg.memo) {
      writer.writeString(10, msg.memo);
    }
    if (msg.asset) {
      writer.writeMessage(11, msg.asset, Asset._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Snapshot,
    reader: protoscript.BinaryReader,
  ): Snapshot {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.snapshotId = reader.readString();
          break;
        }
        case 4: {
          msg.traceId = reader.readString();
          break;
        }
        case 5: {
          msg.assetId = reader.readString();
          break;
        }
        case 6: {
          msg.amount = reader.readString();
          break;
        }
        case 7: {
          msg.userId = reader.readString();
          break;
        }
        case 8: {
          msg.source = reader.readString();
          break;
        }
        case 9: {
          msg.opponentId = reader.readString();
          break;
        }
        case 10: {
          msg.memo = reader.readString();
          break;
        }
        case 11: {
          reader.readMessage(msg.asset, Asset._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const User = {
  /**
   * Serializes User to protobuf.
   */
  encode: function (msg: PartialDeep<User>): Uint8Array {
    return User._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes User from protobuf.
   */
  decode: function (bytes: ByteSource): User {
    return User._readMessage(
      User.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (msg?: Partial<User>): User {
    return {
      clientId: "",
      brokerId: "",
      name: "",
      logo: "",
      sessionId: "",
      privateKey: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<User>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.clientId) {
      writer.writeString(1, msg.clientId);
    }
    if (msg.brokerId) {
      writer.writeString(2, msg.brokerId);
    }
    if (msg.name) {
      writer.writeString(3, msg.name);
    }
    if (msg.logo) {
      writer.writeString(4, msg.logo);
    }
    if (msg.sessionId) {
      writer.writeString(5, msg.sessionId);
    }
    if (msg.privateKey) {
      writer.writeString(6, msg.privateKey);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, reader: protoscript.BinaryReader): User {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.clientId = reader.readString();
          break;
        }
        case 2: {
          msg.brokerId = reader.readString();
          break;
        }
        case 3: {
          msg.name = reader.readString();
          break;
        }
        case 4: {
          msg.logo = reader.readString();
          break;
        }
        case 5: {
          msg.sessionId = reader.readString();
          break;
        }
        case 6: {
          msg.privateKey = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateTransferRequest = {
  /**
   * Serializes CreateTransferRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateTransferRequest>): Uint8Array {
    return CreateTransferRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateTransferRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateTransferRequest {
    return CreateTransferRequest._readMessage(
      CreateTransferRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateTransferRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateTransferRequest>,
  ): CreateTransferRequest {
    return {
      traceId: "",
      assetId: "",
      amount: "",
      userId: "",
      brokerId: "",
      opponentId: "",
      receivers: [],
      threshold: 0,
      memo: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateTransferRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    if (msg.assetId) {
      writer.writeString(2, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(3, msg.amount);
    }
    if (msg.userId) {
      writer.writeString(4, msg.userId);
    }
    if (msg.brokerId) {
      writer.writeString(5, msg.brokerId);
    }
    if (msg.opponentId) {
      writer.writeString(6, msg.opponentId);
    }
    if (msg.receivers?.length) {
      writer.writeRepeatedString(7, msg.receivers);
    }
    if (msg.threshold) {
      writer.writeInt32(8, msg.threshold);
    }
    if (msg.memo) {
      writer.writeString(9, msg.memo);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateTransferRequest,
    reader: protoscript.BinaryReader,
  ): CreateTransferRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        case 2: {
          msg.assetId = reader.readString();
          break;
        }
        case 3: {
          msg.amount = reader.readString();
          break;
        }
        case 4: {
          msg.userId = reader.readString();
          break;
        }
        case 5: {
          msg.brokerId = reader.readString();
          break;
        }
        case 6: {
          msg.opponentId = reader.readString();
          break;
        }
        case 7: {
          msg.receivers.push(reader.readString());
          break;
        }
        case 8: {
          msg.threshold = reader.readInt32();
          break;
        }
        case 9: {
          msg.memo = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateTransferResponse = {
  /**
   * Serializes CreateTransferResponse to protobuf.
   */
  encode: function (_msg?: PartialDeep<CreateTransferResponse>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes CreateTransferResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): CreateTransferResponse {
    return {};
  },

  /**
   * Initializes CreateTransferResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateTransferResponse>,
  ): CreateTransferResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<CreateTransferResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: CreateTransferResponse,
    _reader: protoscript.BinaryReader,
  ): CreateTransferResponse {
    return _msg;
  },
};

export const ListSnapshotsRequest = {
  /**
   * Serializes ListSnapshotsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListSnapshotsRequest>): Uint8Array {
    return ListSnapshotsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListSnapshotsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListSnapshotsRequest {
    return ListSnapshotsRequest._readMessage(
      ListSnapshotsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListSnapshotsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListSnapshotsRequest>,
  ): ListSnapshotsRequest {
    return {
      userId: "",
      brokerId: "",
      fromId: 0n,
      limit: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListSnapshotsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.brokerId) {
      writer.writeString(2, msg.brokerId);
    }
    if (msg.fromId) {
      writer.writeInt64String(3, msg.fromId.toString() as any);
    }
    if (msg.limit) {
      writer.writeInt32(4, msg.limit);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSnapshotsRequest,
    reader: protoscript.BinaryReader,
  ): ListSnapshotsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.brokerId = reader.readString();
          break;
        }
        case 3: {
          msg.fromId = BigInt(reader.readInt64String());
          break;
        }
        case 4: {
          msg.limit = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListSnapshotsResponse = {
  /**
   * Serializes ListSnapshotsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListSnapshotsResponse>): Uint8Array {
    return ListSnapshotsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListSnapshotsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListSnapshotsResponse {
    return ListSnapshotsResponse._readMessage(
      ListSnapshotsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListSnapshotsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListSnapshotsResponse>,
  ): ListSnapshotsResponse {
    return {
      snapshots: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListSnapshotsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.snapshots?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.snapshots as any,
        Snapshot._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSnapshotsResponse,
    reader: protoscript.BinaryReader,
  ): ListSnapshotsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Snapshot.initialize();
          reader.readMessage(m, Snapshot._readMessage);
          msg.snapshots.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserRequest = {
  /**
   * Serializes CreateUserRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserRequest>): Uint8Array {
    return CreateUserRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserRequest {
    return CreateUserRequest._readMessage(
      CreateUserRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserRequest>): CreateUserRequest {
    return {
      name: "",
      isBroker: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.isBroker) {
      writer.writeBool(2, msg.isBroker);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserRequest,
    reader: protoscript.BinaryReader,
  ): CreateUserRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.isBroker = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserResponse = {
  /**
   * Serializes CreateUserResponse to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserResponse>): Uint8Array {
    return CreateUserResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserResponse from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserResponse {
    return CreateUserResponse._readMessage(
      CreateUserResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserResponse>): CreateUserResponse {
    return {
      user: User.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserResponse,
    reader: protoscript.BinaryReader,
  ): CreateUserResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const AssetJSON = {
  /**
   * Serializes Asset to JSON.
   */
  encode: function (msg: PartialDeep<Asset>): string {
    return JSON.stringify(AssetJSON._writeMessage(msg));
  },

  /**
   * Deserializes Asset from JSON.
   */
  decode: function (json: string): Asset {
    return AssetJSON._readMessage(AssetJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Asset>): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      price: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Asset>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.chainId) {
      json["chainId"] = msg.chainId;
    }
    if (msg.symbol) {
      json["symbol"] = msg.symbol;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.logo) {
      json["logo"] = msg.logo;
    }
    if (msg.price) {
      json["price"] = msg.price;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, json: any): Asset {
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _chainId_ = json["chainId"] ?? json["chain_id"];
    if (_chainId_) {
      msg.chainId = _chainId_;
    }
    const _symbol_ = json["symbol"];
    if (_symbol_) {
      msg.symbol = _symbol_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _logo_ = json["logo"];
    if (_logo_) {
      msg.logo = _logo_;
    }
    const _price_ = json["price"];
    if (_price_) {
      msg.price = _price_;
    }
    return msg;
  },
};

export const SnapshotJSON = {
  /**
   * Serializes Snapshot to JSON.
   */
  encode: function (msg: PartialDeep<Snapshot>): string {
    return JSON.stringify(SnapshotJSON._writeMessage(msg));
  },

  /**
   * Deserializes Snapshot from JSON.
   */
  decode: function (json: string): Snapshot {
    return SnapshotJSON._readMessage(
      SnapshotJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes Snapshot with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Snapshot>): Snapshot {
    return {
      id: 0n,
      createdAt: protoscript.TimestampJSON.initialize(),
      snapshotId: "",
      traceId: "",
      assetId: "",
      amount: "",
      userId: "",
      source: "",
      opponentId: "",
      memo: "",
      asset: AssetJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Snapshot>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = String(msg.id);
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.snapshotId) {
      json["snapshotId"] = msg.snapshotId;
    }
    if (msg.traceId) {
      json["traceId"] = msg.traceId;
    }
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.source) {
      json["source"] = msg.source;
    }
    if (msg.opponentId) {
      json["opponentId"] = msg.opponentId;
    }
    if (msg.memo) {
      json["memo"] = msg.memo;
    }
    if (msg.asset) {
      const _asset_ = AssetJSON._writeMessage(msg.asset);
      if (Object.keys(_asset_).length > 0) {
        json["asset"] = _asset_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Snapshot, json: any): Snapshot {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = BigInt(_id_);
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _snapshotId_ = json["snapshotId"] ?? json["snapshot_id"];
    if (_snapshotId_) {
      msg.snapshotId = _snapshotId_;
    }
    const _traceId_ = json["traceId"] ?? json["trace_id"];
    if (_traceId_) {
      msg.traceId = _traceId_;
    }
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _source_ = json["source"];
    if (_source_) {
      msg.source = _source_;
    }
    const _opponentId_ = json["opponentId"] ?? json["opponent_id"];
    if (_opponentId_) {
      msg.opponentId = _opponentId_;
    }
    const _memo_ = json["memo"];
    if (_memo_) {
      msg.memo = _memo_;
    }
    const _asset_ = json["asset"];
    if (_asset_) {
      AssetJSON._readMessage(msg.asset, _asset_);
    }
    return msg;
  },
};

export const UserJSON = {
  /**
   * Serializes User to JSON.
   */
  encode: function (msg: PartialDeep<User>): string {
    return JSON.stringify(UserJSON._writeMessage(msg));
  },

  /**
   * Deserializes User from JSON.
   */
  decode: function (json: string): User {
    return UserJSON._readMessage(UserJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (msg?: Partial<User>): User {
    return {
      clientId: "",
      brokerId: "",
      name: "",
      logo: "",
      sessionId: "",
      privateKey: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<User>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.clientId) {
      json["clientId"] = msg.clientId;
    }
    if (msg.brokerId) {
      json["brokerId"] = msg.brokerId;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.logo) {
      json["logo"] = msg.logo;
    }
    if (msg.sessionId) {
      json["sessionId"] = msg.sessionId;
    }
    if (msg.privateKey) {
      json["privateKey"] = msg.privateKey;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, json: any): User {
    const _clientId_ = json["clientId"] ?? json["client_id"];
    if (_clientId_) {
      msg.clientId = _clientId_;
    }
    const _brokerId_ = json["brokerId"] ?? json["broker_id"];
    if (_brokerId_) {
      msg.brokerId = _brokerId_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _logo_ = json["logo"];
    if (_logo_) {
      msg.logo = _logo_;
    }
    const _sessionId_ = json["sessionId"] ?? json["session_id"];
    if (_sessionId_) {
      msg.sessionId = _sessionId_;
    }
    const _privateKey_ = json["privateKey"] ?? json["private_key"];
    if (_privateKey_) {
      msg.privateKey = _privateKey_;
    }
    return msg;
  },
};

export const CreateTransferRequestJSON = {
  /**
   * Serializes CreateTransferRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateTransferRequest>): string {
    return JSON.stringify(CreateTransferRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateTransferRequest from JSON.
   */
  decode: function (json: string): CreateTransferRequest {
    return CreateTransferRequestJSON._readMessage(
      CreateTransferRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateTransferRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateTransferRequest>,
  ): CreateTransferRequest {
    return {
      traceId: "",
      assetId: "",
      amount: "",
      userId: "",
      brokerId: "",
      opponentId: "",
      receivers: [],
      threshold: 0,
      memo: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateTransferRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json["traceId"] = msg.traceId;
    }
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.brokerId) {
      json["brokerId"] = msg.brokerId;
    }
    if (msg.opponentId) {
      json["opponentId"] = msg.opponentId;
    }
    if (msg.receivers?.length) {
      json["receivers"] = msg.receivers;
    }
    if (msg.threshold) {
      json["threshold"] = msg.threshold;
    }
    if (msg.memo) {
      json["memo"] = msg.memo;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateTransferRequest,
    json: any,
  ): CreateTransferRequest {
    const _traceId_ = json["traceId"] ?? json["trace_id"];
    if (_traceId_) {
      msg.traceId = _traceId_;
    }
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _brokerId_ = json["brokerId"] ?? json["broker_id"];
    if (_brokerId_) {
      msg.brokerId = _brokerId_;
    }
    const _opponentId_ = json["opponentId"] ?? json["opponent_id"];
    if (_opponentId_) {
      msg.opponentId = _opponentId_;
    }
    const _receivers_ = json["receivers"];
    if (_receivers_) {
      msg.receivers = _receivers_;
    }
    const _threshold_ = json["threshold"];
    if (_threshold_) {
      msg.threshold = protoscript.parseNumber(_threshold_);
    }
    const _memo_ = json["memo"];
    if (_memo_) {
      msg.memo = _memo_;
    }
    return msg;
  },
};

export const CreateTransferResponseJSON = {
  /**
   * Serializes CreateTransferResponse to JSON.
   */
  encode: function (_msg?: PartialDeep<CreateTransferResponse>): string {
    return "{}";
  },

  /**
   * Deserializes CreateTransferResponse from JSON.
   */
  decode: function (_json?: string): CreateTransferResponse {
    return {};
  },

  /**
   * Initializes CreateTransferResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateTransferResponse>,
  ): CreateTransferResponse {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<CreateTransferResponse>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateTransferResponse,
    _json: any,
  ): CreateTransferResponse {
    return msg;
  },
};

export const ListSnapshotsRequestJSON = {
  /**
   * Serializes ListSnapshotsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListSnapshotsRequest>): string {
    return JSON.stringify(ListSnapshotsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListSnapshotsRequest from JSON.
   */
  decode: function (json: string): ListSnapshotsRequest {
    return ListSnapshotsRequestJSON._readMessage(
      ListSnapshotsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListSnapshotsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListSnapshotsRequest>,
  ): ListSnapshotsRequest {
    return {
      userId: "",
      brokerId: "",
      fromId: 0n,
      limit: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListSnapshotsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.brokerId) {
      json["brokerId"] = msg.brokerId;
    }
    if (msg.fromId) {
      json["fromId"] = String(msg.fromId);
    }
    if (msg.limit) {
      json["limit"] = msg.limit;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSnapshotsRequest,
    json: any,
  ): ListSnapshotsRequest {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _brokerId_ = json["brokerId"] ?? json["broker_id"];
    if (_brokerId_) {
      msg.brokerId = _brokerId_;
    }
    const _fromId_ = json["fromId"] ?? json["from_id"];
    if (_fromId_) {
      msg.fromId = BigInt(_fromId_);
    }
    const _limit_ = json["limit"];
    if (_limit_) {
      msg.limit = protoscript.parseNumber(_limit_);
    }
    return msg;
  },
};

export const ListSnapshotsResponseJSON = {
  /**
   * Serializes ListSnapshotsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListSnapshotsResponse>): string {
    return JSON.stringify(ListSnapshotsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListSnapshotsResponse from JSON.
   */
  decode: function (json: string): ListSnapshotsResponse {
    return ListSnapshotsResponseJSON._readMessage(
      ListSnapshotsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListSnapshotsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListSnapshotsResponse>,
  ): ListSnapshotsResponse {
    return {
      snapshots: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListSnapshotsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.snapshots?.length) {
      json["snapshots"] = msg.snapshots.map(SnapshotJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSnapshotsResponse,
    json: any,
  ): ListSnapshotsResponse {
    const _snapshots_ = json["snapshots"];
    if (_snapshots_) {
      for (const item of _snapshots_) {
        const m = SnapshotJSON.initialize();
        SnapshotJSON._readMessage(m, item);
        msg.snapshots.push(m);
      }
    }
    return msg;
  },
};

export const CreateUserRequestJSON = {
  /**
   * Serializes CreateUserRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserRequest>): string {
    return JSON.stringify(CreateUserRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserRequest from JSON.
   */
  decode: function (json: string): CreateUserRequest {
    return CreateUserRequestJSON._readMessage(
      CreateUserRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserRequest>): CreateUserRequest {
    return {
      name: "",
      isBroker: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.isBroker) {
      json["isBroker"] = msg.isBroker;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserRequest,
    json: any,
  ): CreateUserRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _isBroker_ = json["isBroker"] ?? json["is_broker"];
    if (_isBroker_) {
      msg.isBroker = _isBroker_;
    }
    return msg;
  },
};

export const CreateUserResponseJSON = {
  /**
   * Serializes CreateUserResponse to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserResponse>): string {
    return JSON.stringify(CreateUserResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserResponse from JSON.
   */
  decode: function (json: string): CreateUserResponse {
    return CreateUserResponseJSON._readMessage(
      CreateUserResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserResponse>): CreateUserResponse {
    return {
      user: UserJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserResponse,
    json: any,
  ): CreateUserResponse {
    const _user_ = json["user"];
    if (_user_) {
      UserJSON._readMessage(msg.user, _user_);
    }
    return msg;
  },
};
