// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: pandostat/v1/pandostat.proto

import type { ByteSource, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";

import { Asset, AssetJSON } from "../../common/v1/common.pb";

//========================================//
//    PandostatService Protobuf Client    //
//========================================//

export async function ListAssets(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration
): Promise<ListAssetsResponse> {
  const response = await PBrequest(
    "/pandostat.v1.PandostatService/ListAssets",
    ListAssetsRequest.encode(listAssetsRequest),
    config
  );
  return ListAssetsResponse.decode(response);
}

//========================================//
//      PandostatService JSON Client      //
//========================================//

export async function ListAssetsJSON(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration
): Promise<ListAssetsResponse> {
  const response = await JSONrequest(
    "/pandostat.v1.PandostatService/ListAssets",
    ListAssetsRequestJSON.encode(listAssetsRequest),
    config
  );
  return ListAssetsResponseJSON.decode(response);
}

//========================================//
//            PandostatService            //
//========================================//

export interface PandostatService<Context = unknown> {
  ListAssets: (
    listAssetsRequest: ListAssetsRequest,
    context: Context
  ) => Promise<ListAssetsResponse> | ListAssetsResponse;
}

export function createPandostatService<Context>(
  service: PandostatService<Context>
) {
  return {
    name: "pandostat.v1.PandostatService",
    methods: {
      ListAssets: {
        name: "ListAssets",
        handler: service.ListAssets,
        input: { protobuf: ListAssetsRequest, json: ListAssetsRequestJSON },
        output: { protobuf: ListAssetsResponse, json: ListAssetsResponseJSON },
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export interface ListAssetsRequest {
  assets: Asset[];
}

export interface ListAssetsResponse {
  assets: Asset[];
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListAssetsRequest = {
  /**
   * Serializes ListAssetsRequest to protobuf.
   */
  encode: function (msg: Partial<ListAssetsRequest>): Uint8Array {
    return ListAssetsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAssetsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListAssetsRequest {
    return ListAssetsRequest._readMessage(
      ListAssetsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (): ListAssetsRequest {
    return {
      assets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAssetsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.assets?.length) {
      writer.writeRepeatedMessage(1, msg.assets as any, Asset._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsRequest,
    reader: BinaryReader
  ): ListAssetsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Asset.initialize();
          reader.readMessage(m, Asset._readMessage);
          msg.assets.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAssetsResponse = {
  /**
   * Serializes ListAssetsResponse to protobuf.
   */
  encode: function (msg: Partial<ListAssetsResponse>): Uint8Array {
    return ListAssetsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAssetsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListAssetsResponse {
    return ListAssetsResponse._readMessage(
      ListAssetsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (): ListAssetsResponse {
    return {
      assets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAssetsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.assets?.length) {
      writer.writeRepeatedMessage(1, msg.assets as any, Asset._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    reader: BinaryReader
  ): ListAssetsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Asset.initialize();
          reader.readMessage(m, Asset._readMessage);
          msg.assets.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListAssetsRequestJSON = {
  /**
   * Serializes ListAssetsRequest to JSON.
   */
  encode: function (msg: Partial<ListAssetsRequest>): string {
    return JSON.stringify(ListAssetsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAssetsRequest from JSON.
   */
  decode: function (json: string): ListAssetsRequest {
    return ListAssetsRequestJSON._readMessage(
      ListAssetsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (): ListAssetsRequest {
    return {
      assets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAssetsRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assets?.length) {
      json.assets = msg.assets.map(AssetJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsRequest,
    json: any
  ): ListAssetsRequest {
    const _assets = json.assets;
    if (_assets) {
      for (const item of _assets) {
        const m = Asset.initialize();
        AssetJSON._readMessage(m, item);
        msg.assets.push(m);
      }
    }
    return msg;
  },
};

export const ListAssetsResponseJSON = {
  /**
   * Serializes ListAssetsResponse to JSON.
   */
  encode: function (msg: Partial<ListAssetsResponse>): string {
    return JSON.stringify(ListAssetsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAssetsResponse from JSON.
   */
  decode: function (json: string): ListAssetsResponse {
    return ListAssetsResponseJSON._readMessage(
      ListAssetsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (): ListAssetsResponse {
    return {
      assets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAssetsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assets?.length) {
      json.assets = msg.assets.map(AssetJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    json: any
  ): ListAssetsResponse {
    const _assets = json.assets;
    if (_assets) {
      for (const item of _assets) {
        const m = Asset.initialize();
        AssetJSON._readMessage(m, item);
        msg.assets.push(m);
      }
    }
    return msg;
  },
};
