// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: tradinglab/v1/tradinglab.proto

package tradinglab

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Order_Type int32

const (
	Order_TYPE_NOT_SET Order_Type = 0
	Order_LIMIT        Order_Type = 1
	Order_AGG_SWAP     Order_Type = 2
)

// Enum value maps for Order_Type.
var (
	Order_Type_name = map[int32]string{
		0: "TYPE_NOT_SET",
		1: "LIMIT",
		2: "AGG_SWAP",
	}
	Order_Type_value = map[string]int32{
		"TYPE_NOT_SET": 0,
		"LIMIT":        1,
		"AGG_SWAP":     2,
	}
)

func (x Order_Type) Enum() *Order_Type {
	p := new(Order_Type)
	*p = x
	return p
}

func (x Order_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tradinglab_v1_tradinglab_proto_enumTypes[0].Descriptor()
}

func (Order_Type) Type() protoreflect.EnumType {
	return &file_tradinglab_v1_tradinglab_proto_enumTypes[0]
}

func (x Order_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Type.Descriptor instead.
func (Order_Type) EnumDescriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{2, 0}
}

type Order_State int32

const (
	Order_STATE_NOT_SET Order_State = 0
	Order_PENDING       Order_State = 1
	Order_DONE          Order_State = 2
	Order_REJECT        Order_State = 3
	Order_CANCELLED     Order_State = 4
	Order_EXPIRED       Order_State = 5
)

// Enum value maps for Order_State.
var (
	Order_State_name = map[int32]string{
		0: "STATE_NOT_SET",
		1: "PENDING",
		2: "DONE",
		3: "REJECT",
		4: "CANCELLED",
		5: "EXPIRED",
	}
	Order_State_value = map[string]int32{
		"STATE_NOT_SET": 0,
		"PENDING":       1,
		"DONE":          2,
		"REJECT":        3,
		"CANCELLED":     4,
		"EXPIRED":       5,
	}
)

func (x Order_State) Enum() *Order_State {
	p := new(Order_State)
	*p = x
	return p
}

func (x Order_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_State) Descriptor() protoreflect.EnumDescriptor {
	return file_tradinglab_v1_tradinglab_proto_enumTypes[1].Descriptor()
}

func (Order_State) Type() protoreflect.EnumType {
	return &file_tradinglab_v1_tradinglab_proto_enumTypes[1]
}

func (x Order_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_State.Descriptor instead.
func (Order_State) EnumDescriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{2, 1}
}

type Trade_State int32

const (
	Trade_STATE_NOT_SET Trade_State = 0
	Trade_PENDING       Trade_State = 1
	Trade_TRADING       Trade_State = 2
	Trade_DONE          Trade_State = 3
)

// Enum value maps for Trade_State.
var (
	Trade_State_name = map[int32]string{
		0: "STATE_NOT_SET",
		1: "PENDING",
		2: "TRADING",
		3: "DONE",
	}
	Trade_State_value = map[string]int32{
		"STATE_NOT_SET": 0,
		"PENDING":       1,
		"TRADING":       2,
		"DONE":          3,
	}
)

func (x Trade_State) Enum() *Trade_State {
	p := new(Trade_State)
	*p = x
	return p
}

func (x Trade_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trade_State) Descriptor() protoreflect.EnumDescriptor {
	return file_tradinglab_v1_tradinglab_proto_enumTypes[2].Descriptor()
}

func (Trade_State) Type() protoreflect.EnumType {
	return &file_tradinglab_v1_tradinglab_proto_enumTypes[2]
}

func (x Trade_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trade_State.Descriptor instead.
func (Trade_State) EnumDescriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{3, 0}
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{0}
}

func (x *Info) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Info) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Logo   string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Asset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiredAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	CancelledAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=cancelled_at,json=cancelledAt,proto3" json:"cancelled_at,omitempty"`
	UserId           string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type             Order_Type             `protobuf:"varint,6,opt,name=type,proto3,enum=tradinglab.v1.Order_Type" json:"type,omitempty"`
	State            Order_State            `protobuf:"varint,7,opt,name=state,proto3,enum=tradinglab.v1.Order_State" json:"state,omitempty"`
	PayAssetId       string                 `protobuf:"bytes,8,opt,name=pay_asset_id,json=payAssetId,proto3" json:"pay_asset_id,omitempty"`
	PayAsset         *Asset                 `protobuf:"bytes,9,opt,name=pay_asset,json=payAsset,proto3" json:"pay_asset,omitempty"`
	FillAssetId      string                 `protobuf:"bytes,10,opt,name=fill_asset_id,json=fillAssetId,proto3" json:"fill_asset_id,omitempty"`
	FillAsset        *Asset                 `protobuf:"bytes,11,opt,name=fill_asset,json=fillAsset,proto3" json:"fill_asset,omitempty"`
	Funds            string                 `protobuf:"bytes,12,opt,name=funds,proto3" json:"funds,omitempty"`
	Expects          string                 `protobuf:"bytes,13,opt,name=expects,proto3" json:"expects,omitempty"`
	FilledFunds      string                 `protobuf:"bytes,14,opt,name=filled_funds,json=filledFunds,proto3" json:"filled_funds,omitempty"`
	FilledAmount     string                 `protobuf:"bytes,15,opt,name=filled_amount,json=filledAmount,proto3" json:"filled_amount,omitempty"`
	MinReceiveAmount string                 `protobuf:"bytes,16,opt,name=min_receive_amount,json=minReceiveAmount,proto3" json:"min_receive_amount,omitempty"`
	FeeAssetId       string                 `protobuf:"bytes,17,opt,name=fee_asset_id,json=feeAssetId,proto3" json:"fee_asset_id,omitempty"`
	FeeAmount        string                 `protobuf:"bytes,18,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{2}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Order) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

func (x *Order) GetCancelledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelledAt
	}
	return nil
}

func (x *Order) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Order) GetType() Order_Type {
	if x != nil {
		return x.Type
	}
	return Order_TYPE_NOT_SET
}

func (x *Order) GetState() Order_State {
	if x != nil {
		return x.State
	}
	return Order_STATE_NOT_SET
}

func (x *Order) GetPayAssetId() string {
	if x != nil {
		return x.PayAssetId
	}
	return ""
}

func (x *Order) GetPayAsset() *Asset {
	if x != nil {
		return x.PayAsset
	}
	return nil
}

func (x *Order) GetFillAssetId() string {
	if x != nil {
		return x.FillAssetId
	}
	return ""
}

func (x *Order) GetFillAsset() *Asset {
	if x != nil {
		return x.FillAsset
	}
	return nil
}

func (x *Order) GetFunds() string {
	if x != nil {
		return x.Funds
	}
	return ""
}

func (x *Order) GetExpects() string {
	if x != nil {
		return x.Expects
	}
	return ""
}

func (x *Order) GetFilledFunds() string {
	if x != nil {
		return x.FilledFunds
	}
	return ""
}

func (x *Order) GetFilledAmount() string {
	if x != nil {
		return x.FilledAmount
	}
	return ""
}

func (x *Order) GetMinReceiveAmount() string {
	if x != nil {
		return x.MinReceiveAmount
	}
	return ""
}

func (x *Order) GetFeeAssetId() string {
	if x != nil {
		return x.FeeAssetId
	}
	return ""
}

func (x *Order) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Exchange     string                 `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	OrderId      string                 `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	State        Trade_State            `protobuf:"varint,5,opt,name=state,proto3,enum=tradinglab.v1.Trade_State" json:"state,omitempty"`
	PayAssetId   string                 `protobuf:"bytes,6,opt,name=pay_asset_id,json=payAssetId,proto3" json:"pay_asset_id,omitempty"`
	PayAsset     *Asset                 `protobuf:"bytes,7,opt,name=pay_asset,json=payAsset,proto3" json:"pay_asset,omitempty"`
	FillAssetId  string                 `protobuf:"bytes,8,opt,name=fill_asset_id,json=fillAssetId,proto3" json:"fill_asset_id,omitempty"`
	FillAsset    *Asset                 `protobuf:"bytes,9,opt,name=fill_asset,json=fillAsset,proto3" json:"fill_asset,omitempty"`
	Funds        string                 `protobuf:"bytes,10,opt,name=funds,proto3" json:"funds,omitempty"`
	Expects      string                 `protobuf:"bytes,11,opt,name=expects,proto3" json:"expects,omitempty"`
	FilledFunds  string                 `protobuf:"bytes,12,opt,name=filled_funds,json=filledFunds,proto3" json:"filled_funds,omitempty"`
	FilledAmount string                 `protobuf:"bytes,13,opt,name=filled_amount,json=filledAmount,proto3" json:"filled_amount,omitempty"`
	// Types that are assignable to Extra:
	//	*Trade_Binance
	//	*Trade_Fswap
	Extra isTrade_Extra `protobuf_oneof:"extra"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{3}
}

func (x *Trade) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trade) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Trade) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Trade) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Trade) GetState() Trade_State {
	if x != nil {
		return x.State
	}
	return Trade_STATE_NOT_SET
}

func (x *Trade) GetPayAssetId() string {
	if x != nil {
		return x.PayAssetId
	}
	return ""
}

func (x *Trade) GetPayAsset() *Asset {
	if x != nil {
		return x.PayAsset
	}
	return nil
}

func (x *Trade) GetFillAssetId() string {
	if x != nil {
		return x.FillAssetId
	}
	return ""
}

func (x *Trade) GetFillAsset() *Asset {
	if x != nil {
		return x.FillAsset
	}
	return nil
}

func (x *Trade) GetFunds() string {
	if x != nil {
		return x.Funds
	}
	return ""
}

func (x *Trade) GetExpects() string {
	if x != nil {
		return x.Expects
	}
	return ""
}

func (x *Trade) GetFilledFunds() string {
	if x != nil {
		return x.FilledFunds
	}
	return ""
}

func (x *Trade) GetFilledAmount() string {
	if x != nil {
		return x.FilledAmount
	}
	return ""
}

func (m *Trade) GetExtra() isTrade_Extra {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (x *Trade) GetBinance() *Trade_BinanceExtra {
	if x, ok := x.GetExtra().(*Trade_Binance); ok {
		return x.Binance
	}
	return nil
}

func (x *Trade) GetFswap() *Trade_FswapExtra {
	if x, ok := x.GetExtra().(*Trade_Fswap); ok {
		return x.Fswap
	}
	return nil
}

type isTrade_Extra interface {
	isTrade_Extra()
}

type Trade_Binance struct {
	Binance *Trade_BinanceExtra `protobuf:"bytes,14,opt,name=binance,proto3,oneof"`
}

type Trade_Fswap struct {
	Fswap *Trade_FswapExtra `protobuf:"bytes,15,opt,name=fswap,proto3,oneof"`
}

func (*Trade_Binance) isTrade_Extra() {}

func (*Trade_Fswap) isTrade_Extra() {}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId   string   `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	AssetId   string   `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Amount    string   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Memo      string   `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	Opponents []string `protobuf:"bytes,5,rep,name=opponents,proto3" json:"opponents,omitempty"`
	Threshold uint32   `protobuf:"varint,6,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Url       string   `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{4}
}

func (x *Transfer) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Transfer) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Transfer) GetOpponents() []string {
	if x != nil {
		return x.Opponents
	}
	return nil
}

func (x *Transfer) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Transfer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{5}
}

type GetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Info `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{6}
}

func (x *GetInfoResponse) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type PreOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Order_Type `protobuf:"varint,1,opt,name=type,proto3,enum=tradinglab.v1.Order_Type" json:"type,omitempty"`
	PayAssetId   string     `protobuf:"bytes,2,opt,name=pay_asset_id,json=payAssetId,proto3" json:"pay_asset_id,omitempty"`
	FillAssetId  string     `protobuf:"bytes,3,opt,name=fill_asset_id,json=fillAssetId,proto3" json:"fill_asset_id,omitempty"`
	Funds        string     `protobuf:"bytes,4,opt,name=funds,proto3" json:"funds,omitempty"`
	Exchanges    []string   `protobuf:"bytes,5,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
	FilledAmount string     `protobuf:"bytes,6,opt,name=filled_amount,json=filledAmount,proto3" json:"filled_amount,omitempty"`
}

func (x *PreOrderRequest) Reset() {
	*x = PreOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreOrderRequest) ProtoMessage() {}

func (x *PreOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreOrderRequest.ProtoReflect.Descriptor instead.
func (*PreOrderRequest) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{7}
}

func (x *PreOrderRequest) GetType() Order_Type {
	if x != nil {
		return x.Type
	}
	return Order_TYPE_NOT_SET
}

func (x *PreOrderRequest) GetPayAssetId() string {
	if x != nil {
		return x.PayAssetId
	}
	return ""
}

func (x *PreOrderRequest) GetFillAssetId() string {
	if x != nil {
		return x.FillAssetId
	}
	return ""
}

func (x *PreOrderRequest) GetFunds() string {
	if x != nil {
		return x.Funds
	}
	return ""
}

func (x *PreOrderRequest) GetExchanges() []string {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

func (x *PreOrderRequest) GetFilledAmount() string {
	if x != nil {
		return x.FilledAmount
	}
	return ""
}

type PreOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order    *Order    `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Trades   []*Trade  `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
	Transfer *Transfer `protobuf:"bytes,3,opt,name=transfer,proto3" json:"transfer,omitempty"`
}

func (x *PreOrderResponse) Reset() {
	*x = PreOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreOrderResponse) ProtoMessage() {}

func (x *PreOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreOrderResponse.ProtoReflect.Descriptor instead.
func (*PreOrderResponse) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{8}
}

func (x *PreOrderResponse) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *PreOrderResponse) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *PreOrderResponse) GetTransfer() *Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{9}
}

func (x *CancelOrderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *CancelOrderResponse) Reset() {
	*x = CancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResponse) ProtoMessage() {}

func (x *CancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResponse.ProtoReflect.Descriptor instead.
func (*CancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{10}
}

func (x *CancelOrderResponse) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type GetOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrderRequest) Reset() {
	*x = GetOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderRequest) ProtoMessage() {}

func (x *GetOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderRequest.ProtoReflect.Descriptor instead.
func (*GetOrderRequest) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order  *Order   `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Trades []*Trade `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *GetOrderResponse) Reset() {
	*x = GetOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponse) ProtoMessage() {}

func (x *GetOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponse.ProtoReflect.Descriptor instead.
func (*GetOrderResponse) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrderResponse) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *GetOrderResponse) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type ListOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Order_Type  `protobuf:"varint,1,opt,name=type,proto3,enum=tradinglab.v1.Order_Type" json:"type,omitempty"`
	State  Order_State `protobuf:"varint,2,opt,name=state,proto3,enum=tradinglab.v1.Order_State" json:"state,omitempty"`
	Cursor string      `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit  int32       `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListOrdersRequest) Reset() {
	*x = ListOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersRequest) ProtoMessage() {}

func (x *ListOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersRequest.ProtoReflect.Descriptor instead.
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{13}
}

func (x *ListOrdersRequest) GetType() Order_Type {
	if x != nil {
		return x.Type
	}
	return Order_TYPE_NOT_SET
}

func (x *ListOrdersRequest) GetState() Order_State {
	if x != nil {
		return x.State
	}
	return Order_STATE_NOT_SET
}

func (x *ListOrdersRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListOrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders     []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	NextCursor string   `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasNext    bool     `protobuf:"varint,3,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *ListOrdersResponse) Reset() {
	*x = ListOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersResponse) ProtoMessage() {}

func (x *ListOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersResponse.ProtoReflect.Descriptor instead.
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{14}
}

func (x *ListOrdersResponse) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *ListOrdersResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListOrdersResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

type Trade_BinanceExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side   string `protobuf:"bytes,2,opt,name=side,proto3" json:"side,omitempty"`
}

func (x *Trade_BinanceExtra) Reset() {
	*x = Trade_BinanceExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade_BinanceExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade_BinanceExtra) ProtoMessage() {}

func (x *Trade_BinanceExtra) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade_BinanceExtra.ProtoReflect.Descriptor instead.
func (*Trade_BinanceExtra) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Trade_BinanceExtra) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Trade_BinanceExtra) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

type Trade_FswapExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Trade_FswapExtra_Path `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Trade_FswapExtra) Reset() {
	*x = Trade_FswapExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade_FswapExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade_FswapExtra) ProtoMessage() {}

func (x *Trade_FswapExtra) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade_FswapExtra.ProtoReflect.Descriptor instead.
func (*Trade_FswapExtra) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Trade_FswapExtra) GetRoutes() []*Trade_FswapExtra_Path {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Trade_FswapExtra_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string   `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Share  string   `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
	Pairs  []int32  `protobuf:"varint,3,rep,packed,name=pairs,proto3" json:"pairs,omitempty"`
	Assets []*Asset `protobuf:"bytes,4,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *Trade_FswapExtra_Path) Reset() {
	*x = Trade_FswapExtra_Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade_FswapExtra_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade_FswapExtra_Path) ProtoMessage() {}

func (x *Trade_FswapExtra_Path) ProtoReflect() protoreflect.Message {
	mi := &file_tradinglab_v1_tradinglab_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade_FswapExtra_Path.ProtoReflect.Descriptor instead.
func (*Trade_FswapExtra_Path) Descriptor() ([]byte, []int) {
	return file_tradinglab_v1_tradinglab_proto_rawDescGZIP(), []int{3, 1, 0}
}

func (x *Trade_FswapExtra_Path) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Trade_FswapExtra_Path) GetShare() string {
	if x != nil {
		return x.Share
	}
	return ""
}

func (x *Trade_FswapExtra_Path) GetPairs() []int32 {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *Trade_FswapExtra_Path) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

var File_tradinglab_v1_tradinglab_proto protoreflect.FileDescriptor

var file_tradinglab_v1_tradinglab_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x57, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0xe9, 0x06, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x08, 0x70, 0x61,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x47, 0x47, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x02, 0x22, 0x59, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x05, 0x22, 0xa5, 0x07, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x08, 0x70,
	0x61, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x66, 0x73, 0x77, 0x61, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x46, 0x73, 0x77,
	0x61, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x05, 0x66, 0x73, 0x77, 0x61, 0x70,
	0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x1a, 0xc4, 0x01, 0x0a,
	0x0a, 0x46, 0x73, 0x77, 0x61, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3c, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x46, 0x73, 0x77, 0x61, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x78, 0x0a, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c,
	0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xba, 0x01, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x24, 0x0a,
	0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7e, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x32, 0xaa, 0x03, 0x0a,
	0x11, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x08, 0x50, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x78, 0x2d, 0x6f, 0x6e, 0x65, 0x2f,
	0x70, 0x61, 0x6e, 0x64, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x6c, 0x61, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tradinglab_v1_tradinglab_proto_rawDescOnce sync.Once
	file_tradinglab_v1_tradinglab_proto_rawDescData = file_tradinglab_v1_tradinglab_proto_rawDesc
)

func file_tradinglab_v1_tradinglab_proto_rawDescGZIP() []byte {
	file_tradinglab_v1_tradinglab_proto_rawDescOnce.Do(func() {
		file_tradinglab_v1_tradinglab_proto_rawDescData = protoimpl.X.CompressGZIP(file_tradinglab_v1_tradinglab_proto_rawDescData)
	})
	return file_tradinglab_v1_tradinglab_proto_rawDescData
}

var file_tradinglab_v1_tradinglab_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tradinglab_v1_tradinglab_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_tradinglab_v1_tradinglab_proto_goTypes = []interface{}{
	(Order_Type)(0),               // 0: tradinglab.v1.Order.Type
	(Order_State)(0),              // 1: tradinglab.v1.Order.State
	(Trade_State)(0),              // 2: tradinglab.v1.Trade.State
	(*Info)(nil),                  // 3: tradinglab.v1.Info
	(*Asset)(nil),                 // 4: tradinglab.v1.Asset
	(*Order)(nil),                 // 5: tradinglab.v1.Order
	(*Trade)(nil),                 // 6: tradinglab.v1.Trade
	(*Transfer)(nil),              // 7: tradinglab.v1.Transfer
	(*GetInfoRequest)(nil),        // 8: tradinglab.v1.GetInfoRequest
	(*GetInfoResponse)(nil),       // 9: tradinglab.v1.GetInfoResponse
	(*PreOrderRequest)(nil),       // 10: tradinglab.v1.PreOrderRequest
	(*PreOrderResponse)(nil),      // 11: tradinglab.v1.PreOrderResponse
	(*CancelOrderRequest)(nil),    // 12: tradinglab.v1.CancelOrderRequest
	(*CancelOrderResponse)(nil),   // 13: tradinglab.v1.CancelOrderResponse
	(*GetOrderRequest)(nil),       // 14: tradinglab.v1.GetOrderRequest
	(*GetOrderResponse)(nil),      // 15: tradinglab.v1.GetOrderResponse
	(*ListOrdersRequest)(nil),     // 16: tradinglab.v1.ListOrdersRequest
	(*ListOrdersResponse)(nil),    // 17: tradinglab.v1.ListOrdersResponse
	(*Trade_BinanceExtra)(nil),    // 18: tradinglab.v1.Trade.BinanceExtra
	(*Trade_FswapExtra)(nil),      // 19: tradinglab.v1.Trade.FswapExtra
	(*Trade_FswapExtra_Path)(nil), // 20: tradinglab.v1.Trade.FswapExtra.Path
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
}
var file_tradinglab_v1_tradinglab_proto_depIdxs = []int32{
	21, // 0: tradinglab.v1.Order.created_at:type_name -> google.protobuf.Timestamp
	21, // 1: tradinglab.v1.Order.expired_at:type_name -> google.protobuf.Timestamp
	21, // 2: tradinglab.v1.Order.cancelled_at:type_name -> google.protobuf.Timestamp
	0,  // 3: tradinglab.v1.Order.type:type_name -> tradinglab.v1.Order.Type
	1,  // 4: tradinglab.v1.Order.state:type_name -> tradinglab.v1.Order.State
	4,  // 5: tradinglab.v1.Order.pay_asset:type_name -> tradinglab.v1.Asset
	4,  // 6: tradinglab.v1.Order.fill_asset:type_name -> tradinglab.v1.Asset
	21, // 7: tradinglab.v1.Trade.created_at:type_name -> google.protobuf.Timestamp
	2,  // 8: tradinglab.v1.Trade.state:type_name -> tradinglab.v1.Trade.State
	4,  // 9: tradinglab.v1.Trade.pay_asset:type_name -> tradinglab.v1.Asset
	4,  // 10: tradinglab.v1.Trade.fill_asset:type_name -> tradinglab.v1.Asset
	18, // 11: tradinglab.v1.Trade.binance:type_name -> tradinglab.v1.Trade.BinanceExtra
	19, // 12: tradinglab.v1.Trade.fswap:type_name -> tradinglab.v1.Trade.FswapExtra
	3,  // 13: tradinglab.v1.GetInfoResponse.info:type_name -> tradinglab.v1.Info
	0,  // 14: tradinglab.v1.PreOrderRequest.type:type_name -> tradinglab.v1.Order.Type
	5,  // 15: tradinglab.v1.PreOrderResponse.order:type_name -> tradinglab.v1.Order
	6,  // 16: tradinglab.v1.PreOrderResponse.trades:type_name -> tradinglab.v1.Trade
	7,  // 17: tradinglab.v1.PreOrderResponse.transfer:type_name -> tradinglab.v1.Transfer
	5,  // 18: tradinglab.v1.CancelOrderResponse.order:type_name -> tradinglab.v1.Order
	5,  // 19: tradinglab.v1.GetOrderResponse.order:type_name -> tradinglab.v1.Order
	6,  // 20: tradinglab.v1.GetOrderResponse.trades:type_name -> tradinglab.v1.Trade
	0,  // 21: tradinglab.v1.ListOrdersRequest.type:type_name -> tradinglab.v1.Order.Type
	1,  // 22: tradinglab.v1.ListOrdersRequest.state:type_name -> tradinglab.v1.Order.State
	5,  // 23: tradinglab.v1.ListOrdersResponse.orders:type_name -> tradinglab.v1.Order
	20, // 24: tradinglab.v1.Trade.FswapExtra.routes:type_name -> tradinglab.v1.Trade.FswapExtra.Path
	4,  // 25: tradinglab.v1.Trade.FswapExtra.Path.assets:type_name -> tradinglab.v1.Asset
	8,  // 26: tradinglab.v1.TradingLabService.GetInfo:input_type -> tradinglab.v1.GetInfoRequest
	10, // 27: tradinglab.v1.TradingLabService.PreOrder:input_type -> tradinglab.v1.PreOrderRequest
	12, // 28: tradinglab.v1.TradingLabService.CancelOrder:input_type -> tradinglab.v1.CancelOrderRequest
	14, // 29: tradinglab.v1.TradingLabService.GetOrder:input_type -> tradinglab.v1.GetOrderRequest
	16, // 30: tradinglab.v1.TradingLabService.ListOrders:input_type -> tradinglab.v1.ListOrdersRequest
	9,  // 31: tradinglab.v1.TradingLabService.GetInfo:output_type -> tradinglab.v1.GetInfoResponse
	11, // 32: tradinglab.v1.TradingLabService.PreOrder:output_type -> tradinglab.v1.PreOrderResponse
	13, // 33: tradinglab.v1.TradingLabService.CancelOrder:output_type -> tradinglab.v1.CancelOrderResponse
	15, // 34: tradinglab.v1.TradingLabService.GetOrder:output_type -> tradinglab.v1.GetOrderResponse
	17, // 35: tradinglab.v1.TradingLabService.ListOrders:output_type -> tradinglab.v1.ListOrdersResponse
	31, // [31:36] is the sub-list for method output_type
	26, // [26:31] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_tradinglab_v1_tradinglab_proto_init() }
func file_tradinglab_v1_tradinglab_proto_init() {
	if File_tradinglab_v1_tradinglab_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tradinglab_v1_tradinglab_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade_BinanceExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade_FswapExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradinglab_v1_tradinglab_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade_FswapExtra_Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tradinglab_v1_tradinglab_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Trade_Binance)(nil),
		(*Trade_Fswap)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tradinglab_v1_tradinglab_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tradinglab_v1_tradinglab_proto_goTypes,
		DependencyIndexes: file_tradinglab_v1_tradinglab_proto_depIdxs,
		EnumInfos:         file_tradinglab_v1_tradinglab_proto_enumTypes,
		MessageInfos:      file_tradinglab_v1_tradinglab_proto_msgTypes,
	}.Build()
	File_tradinglab_v1_tradinglab_proto = out.File
	file_tradinglab_v1_tradinglab_proto_rawDesc = nil
	file_tradinglab_v1_tradinglab_proto_goTypes = nil
	file_tradinglab_v1_tradinglab_proto_depIdxs = nil
}
