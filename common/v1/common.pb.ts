// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: common/v1/common.proto
/* eslint-disable */

import type { ByteSource } from "twirpscript";
import { BinaryReader, BinaryWriter } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface Asset {
  assetId: string;
  chainId: string;
  symbol: string;
  name: string;
  logo: string;
  price: string;
}

export interface PaginationRequest {
  cursor: string;
  limit: bigint;
}

export interface PaginationResponse {
  nextCursor: string;
  hasNext: boolean;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Asset = {
  /**
   * Serializes Asset to protobuf.
   */
  encode: function (msg: Partial<Asset>): Uint8Array {
    return Asset._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Asset from protobuf.
   */
  decode: function (bytes: ByteSource): Asset {
    return Asset._readMessage(Asset.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      price: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Asset>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.assetId) {
      writer.writeString(1, msg.assetId);
    }
    if (msg.chainId) {
      writer.writeString(2, msg.chainId);
    }
    if (msg.symbol) {
      writer.writeString(3, msg.symbol);
    }
    if (msg.name) {
      writer.writeString(4, msg.name);
    }
    if (msg.logo) {
      writer.writeString(5, msg.logo);
    }
    if (msg.price) {
      writer.writeString(6, msg.price);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, reader: BinaryReader): Asset {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.assetId = reader.readString();
          break;
        }
        case 2: {
          msg.chainId = reader.readString();
          break;
        }
        case 3: {
          msg.symbol = reader.readString();
          break;
        }
        case 4: {
          msg.name = reader.readString();
          break;
        }
        case 5: {
          msg.logo = reader.readString();
          break;
        }
        case 6: {
          msg.price = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PaginationRequest = {
  /**
   * Serializes PaginationRequest to protobuf.
   */
  encode: function (msg: Partial<PaginationRequest>): Uint8Array {
    return PaginationRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PaginationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): PaginationRequest {
    return PaginationRequest._readMessage(
      PaginationRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PaginationRequest with all fields set to their default value.
   */
  initialize: function (): PaginationRequest {
    return {
      cursor: "",
      limit: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PaginationRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.cursor) {
      writer.writeString(1, msg.cursor);
    }
    if (msg.limit) {
      writer.writeInt64String(2, msg.limit.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PaginationRequest,
    reader: BinaryReader
  ): PaginationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.cursor = reader.readString();
          break;
        }
        case 2: {
          msg.limit = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PaginationResponse = {
  /**
   * Serializes PaginationResponse to protobuf.
   */
  encode: function (msg: Partial<PaginationResponse>): Uint8Array {
    return PaginationResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PaginationResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PaginationResponse {
    return PaginationResponse._readMessage(
      PaginationResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PaginationResponse with all fields set to their default value.
   */
  initialize: function (): PaginationResponse {
    return {
      nextCursor: "",
      hasNext: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PaginationResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.nextCursor) {
      writer.writeString(1, msg.nextCursor);
    }
    if (msg.hasNext) {
      writer.writeBool(2, msg.hasNext);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PaginationResponse,
    reader: BinaryReader
  ): PaginationResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.nextCursor = reader.readString();
          break;
        }
        case 2: {
          msg.hasNext = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const AssetJSON = {
  /**
   * Serializes Asset to JSON.
   */
  encode: function (msg: Partial<Asset>): string {
    return JSON.stringify(AssetJSON._writeMessage(msg));
  },

  /**
   * Deserializes Asset from JSON.
   */
  decode: function (json: string): Asset {
    return AssetJSON._readMessage(AssetJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      price: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Asset>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.chainId) {
      json.chainId = msg.chainId;
    }
    if (msg.symbol) {
      json.symbol = msg.symbol;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.logo) {
      json.logo = msg.logo;
    }
    if (msg.price) {
      json.price = msg.price;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, json: any): Asset {
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _chainId = json.chainId ?? json.chain_id;
    if (_chainId) {
      msg.chainId = _chainId;
    }
    const _symbol = json.symbol;
    if (_symbol) {
      msg.symbol = _symbol;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _logo = json.logo;
    if (_logo) {
      msg.logo = _logo;
    }
    const _price = json.price;
    if (_price) {
      msg.price = _price;
    }
    return msg;
  },
};

export const PaginationRequestJSON = {
  /**
   * Serializes PaginationRequest to JSON.
   */
  encode: function (msg: Partial<PaginationRequest>): string {
    return JSON.stringify(PaginationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes PaginationRequest from JSON.
   */
  decode: function (json: string): PaginationRequest {
    return PaginationRequestJSON._readMessage(
      PaginationRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PaginationRequest with all fields set to their default value.
   */
  initialize: function (): PaginationRequest {
    return {
      cursor: "",
      limit: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PaginationRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.cursor) {
      json.cursor = msg.cursor;
    }
    if (msg.limit) {
      json.limit = msg.limit.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PaginationRequest,
    json: any
  ): PaginationRequest {
    const _cursor = json.cursor;
    if (_cursor) {
      msg.cursor = _cursor;
    }
    const _limit = json.limit;
    if (_limit) {
      msg.limit = BigInt(_limit);
    }
    return msg;
  },
};

export const PaginationResponseJSON = {
  /**
   * Serializes PaginationResponse to JSON.
   */
  encode: function (msg: Partial<PaginationResponse>): string {
    return JSON.stringify(PaginationResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes PaginationResponse from JSON.
   */
  decode: function (json: string): PaginationResponse {
    return PaginationResponseJSON._readMessage(
      PaginationResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PaginationResponse with all fields set to their default value.
   */
  initialize: function (): PaginationResponse {
    return {
      nextCursor: "",
      hasNext: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PaginationResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.nextCursor) {
      json.nextCursor = msg.nextCursor;
    }
    if (msg.hasNext) {
      json.hasNext = msg.hasNext;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PaginationResponse,
    json: any
  ): PaginationResponse {
    const _nextCursor = json.nextCursor ?? json.next_cursor;
    if (_nextCursor) {
      msg.nextCursor = _nextCursor;
    }
    const _hasNext = json.hasNext ?? json.has_next;
    if (_hasNext) {
      msg.hasNext = _hasNext;
    }
    return msg;
  },
};
