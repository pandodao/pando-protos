// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: pool/v1/pool.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface EventError {}

export declare namespace EventError {
  export type Enum =
    | "NOT_SET"
    | "EARNING_PRODUCT_STATUS_MISMATCH"
    | "EARNING_PRODUCT_ASSET_MISMATCH"
    | "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED"
    | "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED"
    | "EARNING_PRODUCT_INSUFFICIENT"
    | "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT"
    | "EARNING_EVENT_MISMATCH"
    | "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT"
    | "EARNING_PRODUCT_NOT_FOUND"
    | "USER_EARNING_PRODUCT_EOD_NOT_FOUND"
    | "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED"
    | "EOD_ALREADY_APPLIED"
    | "AUDIT_NOT_FOUND"
    | "AUDIT_STATUS_MISMATCH"
    | "EARNING_PRODUCT_PRECISION_UNSATISFIED"
    | "USER_NOT_IN_WHITELIST";
}

export interface EventAction {}

export declare namespace EventAction {
  export type Enum =
    | "NOT_SET"
    | "BUY"
    | "REDEEM"
    | "DEPOSIT"
    | "INTEREST_PAYMENT"
    | "CANCEL_QUEUE"
    | "ADMIN_INTEREST_PAYMENT"
    | "ADMIN_PRODUCT_EXPAND"
    | "ADMIN_PRODUCT_MERGE_EXPANSION"
    | "ADMIN_PLEDGE"
    | "ADMIN_CANCEL_PLEDGE"
    | "ADMIN_LEGACY_ASSET_MIGRATION"
    | "ADMIN_AUDIT_APPROVE"
    | "ADMIN_AUDIT_REJECT"
    | "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY";
}

export interface EventStatus {}

export declare namespace EventStatus {
  export type Enum =
    | "NOT_SET"
    | "INIT"
    | "PENDING"
    | "QUEUING"
    | "CANCELLED"
    | "COMPLETED"
    | "FAILED";
}

export interface EarningProductStatus {}

export declare namespace EarningProductStatus {
  export type Enum =
    | "NOT_SET"
    | "RECRUITING"
    | "RUNNING"
    | "EXPANDING"
    | "DEACTIVATED";
}

export interface EarningProductType {}

export declare namespace EarningProductType {
  export type Enum = "NOT_SET" | "STAKING" | "SAVINGS";
}

export interface EarningSnapshotBuyData {
  productId: number;
  productStatus: EarningProductStatus.Enum;
}

export interface EarningSnapshotRedeemData {
  productId: number;
  amount: bigint;
  productStatus: EarningProductStatus.Enum;
}

export interface EarningSnapshotCancelQueueData {
  eventId: string;
}

export interface EarningSnapshotAdminInterestPaymentData {
  productId: number;
  productType: EarningProductType.Enum;
  date: string;
}

export interface EarningSnapshotAdminProductExpandData {
  productId: number;
  amount: bigint;
}

export interface EarningSnapshotAdminProductMergeExpansionData {
  productId: number;
}

export interface EarningSnapshotAdminPledgeData {
  userId: string;
}

export interface EarningSnapshotAdminCancelPledgeData {
  userId: string;
}

export interface EarningSnapshotAdminLegacyAssetMigrationData {
  userId: string;
  productId: number;
  amount: bigint;
}

export interface EarningSnapshotAdminAuditApproveData {
  traceId: string;
}

export interface EarningSnapshotAdminAuditRejectData {
  traceId: string;
}

export interface EarningSnapshotAdminAutoReviseProductCapacityData {
  productId: number;
}

export interface ListAssetsRequest {}

export interface Asset {
  assetId: string;
  chainId: string;
  symbol: string;
  name: string;
  logo: string;
  priceUsd: string;
  priceBtc: string;
  order: number;
  updatedAt: number;
  chainLogo: string;
}

export interface ListAssetsResponse {
  assets: Asset[];
}

export interface EarningProduct {
  id: number;
  name: string;
  description: string;
  assetId: string;
  interestRate: string;
  minAmountPerOrder: string;
  maxAmountPerOrder: string;
  capacity: string;
  sold: string;
  queuingBuyAmount: string;
  queuingRedeemAmount: string;
  version: string;
  createdAt: number;
  type: EarningProductType.Enum;
  status: EarningProductStatus.Enum;
  runningNodes: number;
  interestPaymentDuration: number;
  expandingAmount: string;
  filledExpandingAmount: string;
  expectedExpandingEndAt: number;
  userIsInWhitelist: boolean;
  descriptionRules: string;
  descriptionRiskDisclosure: string;
  enabledWhitelistLimit: boolean;
  precision: number;
  buyDisabled: boolean;
  redeemDisabled: boolean;
}

export interface GetEarningProductRequest {
  id: number;
}

export interface GetEarningProductResponse {
  product: EarningProduct;
}

export interface ListEarningProductsRequest {
  type: EarningProductType.Enum;
}

export interface ListEarningProductsResponse {
  products: EarningProduct[];
}

export interface UserEarningProduct {
  id: number;
  userId: string;
  earningProductId: number;
  amount: string;
  queuingBuyAmount: string;
  queuingRedeemAmount: string;
  version: string;
  createdAt: number;
  updatedAt: number;
  totalRevenue: string;
  pledged: boolean;
  expandBuyAmount: string;
  buyDisabled: boolean;
  redeemDisabled: boolean;
}

export interface ListMyEarningProductsRequest {}

export interface ListMyEarningProductsResponse {
  products: UserEarningProduct[];
}

export interface GetMyEarningProductRequest {
  id: number;
}

export interface GetMyEarningProductResponse {
  product: UserEarningProduct;
}

export interface GetEventRequest {
  followId: string;
}

export interface Event {
  id: string;
  userId: string;
  action: EventAction.Enum;
  productId: number;
  assetId: string;
  amount: string;
  filledAmount: string;
  status: EventStatus.Enum;
  /**
   * set only if the status is failed
   */
  error: EventError.Enum;
  followId: string;
  createdAt: number;
  queuingAheadAmount: string;
  interestPaymentDate: string;
}

export interface GetEventResponse {
  event: Event;
}

export interface ListEventsRequest {
  earningProductId: number;
  actions: EventAction.Enum[];
  statuses: EventStatus.Enum[];
  offset: number;
  limit: number;
  startAt: number;
  endAt: number;
  productType: EarningProductType.Enum;
}

export interface ListEventsResponse {
  events: Event[];
}

export interface Audit {
  id: string;
  createdAt: protoscript.Timestamp;
  assetId: string;
  amount: string;
  userId: string;
  status: Audit.Status;
  memo: string;
  reviewedBy: string;
}

export declare namespace Audit {
  export type Status = "NOT_SET" | "REJECTED" | "APPROVED";
}

export interface FindAuditRequest {
  id: string;
}

export interface FindAuditResponse {
  audit: Audit;
}

export interface ListAuditsRequest {
  offset: protoscript.Timestamp;
  limit: bigint;
}

export interface ListAuditsResponse {
  audits: Audit[];
}

//========================================//
//      PoolService Protobuf Client       //
//========================================//

export async function ListAssets(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration,
): Promise<ListAssetsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListAssets",
    ListAssetsRequest.encode(listAssetsRequest),
    config,
  );
  return ListAssetsResponse.decode(response);
}

export async function GetEvent(
  getEventRequest: GetEventRequest,
  config?: ClientConfiguration,
): Promise<GetEventResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/GetEvent",
    GetEventRequest.encode(getEventRequest),
    config,
  );
  return GetEventResponse.decode(response);
}

export async function ListEvents(
  listEventsRequest: ListEventsRequest,
  config?: ClientConfiguration,
): Promise<ListEventsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListEvents",
    ListEventsRequest.encode(listEventsRequest),
    config,
  );
  return ListEventsResponse.decode(response);
}

export async function GetEarningProduct(
  getEarningProductRequest: GetEarningProductRequest,
  config?: ClientConfiguration,
): Promise<GetEarningProductResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/GetEarningProduct",
    GetEarningProductRequest.encode(getEarningProductRequest),
    config,
  );
  return GetEarningProductResponse.decode(response);
}

export async function ListEarningProducts(
  listEarningProductsRequest: ListEarningProductsRequest,
  config?: ClientConfiguration,
): Promise<ListEarningProductsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListEarningProducts",
    ListEarningProductsRequest.encode(listEarningProductsRequest),
    config,
  );
  return ListEarningProductsResponse.decode(response);
}

export async function ListMyEarningProducts(
  listMyEarningProductsRequest: ListMyEarningProductsRequest,
  config?: ClientConfiguration,
): Promise<ListMyEarningProductsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListMyEarningProducts",
    ListMyEarningProductsRequest.encode(listMyEarningProductsRequest),
    config,
  );
  return ListMyEarningProductsResponse.decode(response);
}

export async function GetMyEarningProduct(
  getMyEarningProductRequest: GetMyEarningProductRequest,
  config?: ClientConfiguration,
): Promise<GetMyEarningProductResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/GetMyEarningProduct",
    GetMyEarningProductRequest.encode(getMyEarningProductRequest),
    config,
  );
  return GetMyEarningProductResponse.decode(response);
}

/**
 * audit
 */
export async function FindAudit(
  findAuditRequest: FindAuditRequest,
  config?: ClientConfiguration,
): Promise<FindAuditResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/FindAudit",
    FindAuditRequest.encode(findAuditRequest),
    config,
  );
  return FindAuditResponse.decode(response);
}

export async function ListAudits(
  listAuditsRequest: ListAuditsRequest,
  config?: ClientConfiguration,
): Promise<ListAuditsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListAudits",
    ListAuditsRequest.encode(listAuditsRequest),
    config,
  );
  return ListAuditsResponse.decode(response);
}

//========================================//
//        PoolService JSON Client         //
//========================================//

export async function ListAssetsJSON(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration,
): Promise<ListAssetsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListAssets",
    ListAssetsRequestJSON.encode(listAssetsRequest),
    config,
  );
  return ListAssetsResponseJSON.decode(response);
}

export async function GetEventJSON(
  getEventRequest: GetEventRequest,
  config?: ClientConfiguration,
): Promise<GetEventResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/GetEvent",
    GetEventRequestJSON.encode(getEventRequest),
    config,
  );
  return GetEventResponseJSON.decode(response);
}

export async function ListEventsJSON(
  listEventsRequest: ListEventsRequest,
  config?: ClientConfiguration,
): Promise<ListEventsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListEvents",
    ListEventsRequestJSON.encode(listEventsRequest),
    config,
  );
  return ListEventsResponseJSON.decode(response);
}

export async function GetEarningProductJSON(
  getEarningProductRequest: GetEarningProductRequest,
  config?: ClientConfiguration,
): Promise<GetEarningProductResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/GetEarningProduct",
    GetEarningProductRequestJSON.encode(getEarningProductRequest),
    config,
  );
  return GetEarningProductResponseJSON.decode(response);
}

export async function ListEarningProductsJSON(
  listEarningProductsRequest: ListEarningProductsRequest,
  config?: ClientConfiguration,
): Promise<ListEarningProductsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListEarningProducts",
    ListEarningProductsRequestJSON.encode(listEarningProductsRequest),
    config,
  );
  return ListEarningProductsResponseJSON.decode(response);
}

export async function ListMyEarningProductsJSON(
  listMyEarningProductsRequest: ListMyEarningProductsRequest,
  config?: ClientConfiguration,
): Promise<ListMyEarningProductsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListMyEarningProducts",
    ListMyEarningProductsRequestJSON.encode(listMyEarningProductsRequest),
    config,
  );
  return ListMyEarningProductsResponseJSON.decode(response);
}

export async function GetMyEarningProductJSON(
  getMyEarningProductRequest: GetMyEarningProductRequest,
  config?: ClientConfiguration,
): Promise<GetMyEarningProductResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/GetMyEarningProduct",
    GetMyEarningProductRequestJSON.encode(getMyEarningProductRequest),
    config,
  );
  return GetMyEarningProductResponseJSON.decode(response);
}

/**
 * audit
 */
export async function FindAuditJSON(
  findAuditRequest: FindAuditRequest,
  config?: ClientConfiguration,
): Promise<FindAuditResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/FindAudit",
    FindAuditRequestJSON.encode(findAuditRequest),
    config,
  );
  return FindAuditResponseJSON.decode(response);
}

export async function ListAuditsJSON(
  listAuditsRequest: ListAuditsRequest,
  config?: ClientConfiguration,
): Promise<ListAuditsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListAudits",
    ListAuditsRequestJSON.encode(listAuditsRequest),
    config,
  );
  return ListAuditsResponseJSON.decode(response);
}

//========================================//
//              PoolService               //
//========================================//

export interface PoolService<Context = unknown> {
  ListAssets: (
    listAssetsRequest: ListAssetsRequest,
    context: Context,
  ) => Promise<ListAssetsResponse> | ListAssetsResponse;
  GetEvent: (
    getEventRequest: GetEventRequest,
    context: Context,
  ) => Promise<GetEventResponse> | GetEventResponse;
  ListEvents: (
    listEventsRequest: ListEventsRequest,
    context: Context,
  ) => Promise<ListEventsResponse> | ListEventsResponse;
  GetEarningProduct: (
    getEarningProductRequest: GetEarningProductRequest,
    context: Context,
  ) => Promise<GetEarningProductResponse> | GetEarningProductResponse;
  ListEarningProducts: (
    listEarningProductsRequest: ListEarningProductsRequest,
    context: Context,
  ) => Promise<ListEarningProductsResponse> | ListEarningProductsResponse;
  ListMyEarningProducts: (
    listMyEarningProductsRequest: ListMyEarningProductsRequest,
    context: Context,
  ) => Promise<ListMyEarningProductsResponse> | ListMyEarningProductsResponse;
  GetMyEarningProduct: (
    getMyEarningProductRequest: GetMyEarningProductRequest,
    context: Context,
  ) => Promise<GetMyEarningProductResponse> | GetMyEarningProductResponse;
  /**
   * audit
   */
  FindAudit: (
    findAuditRequest: FindAuditRequest,
    context: Context,
  ) => Promise<FindAuditResponse> | FindAuditResponse;
  ListAudits: (
    listAuditsRequest: ListAuditsRequest,
    context: Context,
  ) => Promise<ListAuditsResponse> | ListAuditsResponse;
}

export function createPoolService<Context>(service: PoolService<Context>) {
  return {
    name: "pool.v1.PoolService",
    methods: {
      ListAssets: {
        name: "ListAssets",
        handler: service.ListAssets,
        input: { protobuf: ListAssetsRequest, json: ListAssetsRequestJSON },
        output: { protobuf: ListAssetsResponse, json: ListAssetsResponseJSON },
      },
      GetEvent: {
        name: "GetEvent",
        handler: service.GetEvent,
        input: { protobuf: GetEventRequest, json: GetEventRequestJSON },
        output: { protobuf: GetEventResponse, json: GetEventResponseJSON },
      },
      ListEvents: {
        name: "ListEvents",
        handler: service.ListEvents,
        input: { protobuf: ListEventsRequest, json: ListEventsRequestJSON },
        output: { protobuf: ListEventsResponse, json: ListEventsResponseJSON },
      },
      GetEarningProduct: {
        name: "GetEarningProduct",
        handler: service.GetEarningProduct,
        input: {
          protobuf: GetEarningProductRequest,
          json: GetEarningProductRequestJSON,
        },
        output: {
          protobuf: GetEarningProductResponse,
          json: GetEarningProductResponseJSON,
        },
      },
      ListEarningProducts: {
        name: "ListEarningProducts",
        handler: service.ListEarningProducts,
        input: {
          protobuf: ListEarningProductsRequest,
          json: ListEarningProductsRequestJSON,
        },
        output: {
          protobuf: ListEarningProductsResponse,
          json: ListEarningProductsResponseJSON,
        },
      },
      ListMyEarningProducts: {
        name: "ListMyEarningProducts",
        handler: service.ListMyEarningProducts,
        input: {
          protobuf: ListMyEarningProductsRequest,
          json: ListMyEarningProductsRequestJSON,
        },
        output: {
          protobuf: ListMyEarningProductsResponse,
          json: ListMyEarningProductsResponseJSON,
        },
      },
      GetMyEarningProduct: {
        name: "GetMyEarningProduct",
        handler: service.GetMyEarningProduct,
        input: {
          protobuf: GetMyEarningProductRequest,
          json: GetMyEarningProductRequestJSON,
        },
        output: {
          protobuf: GetMyEarningProductResponse,
          json: GetMyEarningProductResponseJSON,
        },
      },
      FindAudit: {
        name: "FindAudit",
        handler: service.FindAudit,
        input: { protobuf: FindAuditRequest, json: FindAuditRequestJSON },
        output: { protobuf: FindAuditResponse, json: FindAuditResponseJSON },
      },
      ListAudits: {
        name: "ListAudits",
        handler: service.ListAudits,
        input: { protobuf: ListAuditsRequest, json: ListAuditsRequestJSON },
        output: { protobuf: ListAuditsResponse, json: ListAuditsResponseJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const EventError = {
  /**
   * Serializes EventError to protobuf.
   */
  encode: function (_msg?: PartialDeep<EventError>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EventError from protobuf.
   */
  decode: function (_bytes?: ByteSource): EventError {
    return {};
  },

  /**
   * Initializes EventError with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EventError>): EventError {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EventError>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EventError,
    _reader: protoscript.BinaryReader,
  ): EventError {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    /**
     * buy / redeem / admin_expand / admin_merge_expansion
     */
    EARNING_PRODUCT_STATUS_MISMATCH: "EARNING_PRODUCT_STATUS_MISMATCH",
    /**
     * buy / admin_interest_payment
     */
    EARNING_PRODUCT_ASSET_MISMATCH: "EARNING_PRODUCT_ASSET_MISMATCH",
    /**
     * buy
     */
    EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED:
      "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED",
    /**
     * buy
     */
    EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED:
      "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED",
    /**
     * buy
     */
    EARNING_PRODUCT_INSUFFICIENT: "EARNING_PRODUCT_INSUFFICIENT",
    /**
     * redeem
     */
    USER_EARNING_PRODUCT_SHARE_INSUFFICIENT:
      "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT",
    /**
     * cancel_queue
     */
    EARNING_EVENT_MISMATCH: "EARNING_EVENT_MISMATCH",
    /**
     * buy or redeem
     */
    USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT:
      "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT",
    /**
     * admin_interest_payment
     */
    EARNING_PRODUCT_NOT_FOUND: "EARNING_PRODUCT_NOT_FOUND",
    /**
     * admin_interest_payment
     */
    USER_EARNING_PRODUCT_EOD_NOT_FOUND: "USER_EARNING_PRODUCT_EOD_NOT_FOUND",
    /**
     * redeem
     */
    USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED:
      "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED",
    /**
     * admin_interest_payment
     */
    EOD_ALREADY_APPLIED: "EOD_ALREADY_APPLIED",
    /**
     * admin_audit_approve / admin_audit_reject
     */
    AUDIT_NOT_FOUND: "AUDIT_NOT_FOUND",
    /**
     * admin_audit_approve / admin_audit_reject
     */
    AUDIT_STATUS_MISMATCH: "AUDIT_STATUS_MISMATCH",
    /**
     * buy / redeem
     */
    EARNING_PRODUCT_PRECISION_UNSATISFIED:
      "EARNING_PRODUCT_PRECISION_UNSATISFIED",
    /**
     * buy
     */
    USER_NOT_IN_WHITELIST: "USER_NOT_IN_WHITELIST",
    /**
     * @private
     */
    _fromInt: function (i: number): EventError.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "EARNING_PRODUCT_STATUS_MISMATCH";
        }
        case 2: {
          return "EARNING_PRODUCT_ASSET_MISMATCH";
        }
        case 3: {
          return "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED";
        }
        case 4: {
          return "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED";
        }
        case 5: {
          return "EARNING_PRODUCT_INSUFFICIENT";
        }
        case 6: {
          return "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT";
        }
        case 7: {
          return "EARNING_EVENT_MISMATCH";
        }
        case 8: {
          return "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT";
        }
        case 9: {
          return "EARNING_PRODUCT_NOT_FOUND";
        }
        case 10: {
          return "USER_EARNING_PRODUCT_EOD_NOT_FOUND";
        }
        case 11: {
          return "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED";
        }
        case 12: {
          return "EOD_ALREADY_APPLIED";
        }
        case 13: {
          return "AUDIT_NOT_FOUND";
        }
        case 14: {
          return "AUDIT_STATUS_MISMATCH";
        }
        case 15: {
          return "EARNING_PRODUCT_PRECISION_UNSATISFIED";
        }
        case 16: {
          return "USER_NOT_IN_WHITELIST";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventError.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventError.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "EARNING_PRODUCT_STATUS_MISMATCH": {
          return 1;
        }
        case "EARNING_PRODUCT_ASSET_MISMATCH": {
          return 2;
        }
        case "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED": {
          return 3;
        }
        case "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED": {
          return 4;
        }
        case "EARNING_PRODUCT_INSUFFICIENT": {
          return 5;
        }
        case "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT": {
          return 6;
        }
        case "EARNING_EVENT_MISMATCH": {
          return 7;
        }
        case "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT": {
          return 8;
        }
        case "EARNING_PRODUCT_NOT_FOUND": {
          return 9;
        }
        case "USER_EARNING_PRODUCT_EOD_NOT_FOUND": {
          return 10;
        }
        case "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED": {
          return 11;
        }
        case "EOD_ALREADY_APPLIED": {
          return 12;
        }
        case "AUDIT_NOT_FOUND": {
          return 13;
        }
        case "AUDIT_STATUS_MISMATCH": {
          return 14;
        }
        case "EARNING_PRODUCT_PRECISION_UNSATISFIED": {
          return 15;
        }
        case "USER_NOT_IN_WHITELIST": {
          return 16;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EventAction = {
  /**
   * Serializes EventAction to protobuf.
   */
  encode: function (_msg?: PartialDeep<EventAction>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EventAction from protobuf.
   */
  decode: function (_bytes?: ByteSource): EventAction {
    return {};
  },

  /**
   * Initializes EventAction with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EventAction>): EventAction {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EventAction>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EventAction,
    _reader: protoscript.BinaryReader,
  ): EventAction {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    BUY: "BUY",
    REDEEM: "REDEEM",
    DEPOSIT: "DEPOSIT",
    INTEREST_PAYMENT: "INTEREST_PAYMENT",
    CANCEL_QUEUE: "CANCEL_QUEUE",
    ADMIN_INTEREST_PAYMENT: "ADMIN_INTEREST_PAYMENT",
    ADMIN_PRODUCT_EXPAND: "ADMIN_PRODUCT_EXPAND",
    ADMIN_PRODUCT_MERGE_EXPANSION: "ADMIN_PRODUCT_MERGE_EXPANSION",
    ADMIN_PLEDGE: "ADMIN_PLEDGE",
    ADMIN_CANCEL_PLEDGE: "ADMIN_CANCEL_PLEDGE",
    ADMIN_LEGACY_ASSET_MIGRATION: "ADMIN_LEGACY_ASSET_MIGRATION",
    ADMIN_AUDIT_APPROVE: "ADMIN_AUDIT_APPROVE",
    ADMIN_AUDIT_REJECT: "ADMIN_AUDIT_REJECT",
    ADMIN_AUTO_REVISE_PRODUCT_CAPACITY: "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY",
    /**
     * @private
     */
    _fromInt: function (i: number): EventAction.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "BUY";
        }
        case 2: {
          return "REDEEM";
        }
        case 3: {
          return "DEPOSIT";
        }
        case 4: {
          return "INTEREST_PAYMENT";
        }
        case 5: {
          return "CANCEL_QUEUE";
        }
        case 100: {
          return "ADMIN_INTEREST_PAYMENT";
        }
        case 101: {
          return "ADMIN_PRODUCT_EXPAND";
        }
        case 102: {
          return "ADMIN_PRODUCT_MERGE_EXPANSION";
        }
        case 103: {
          return "ADMIN_PLEDGE";
        }
        case 104: {
          return "ADMIN_CANCEL_PLEDGE";
        }
        case 105: {
          return "ADMIN_LEGACY_ASSET_MIGRATION";
        }
        case 106: {
          return "ADMIN_AUDIT_APPROVE";
        }
        case 107: {
          return "ADMIN_AUDIT_REJECT";
        }
        case 108: {
          return "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventAction.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventAction.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "BUY": {
          return 1;
        }
        case "REDEEM": {
          return 2;
        }
        case "DEPOSIT": {
          return 3;
        }
        case "INTEREST_PAYMENT": {
          return 4;
        }
        case "CANCEL_QUEUE": {
          return 5;
        }
        case "ADMIN_INTEREST_PAYMENT": {
          return 100;
        }
        case "ADMIN_PRODUCT_EXPAND": {
          return 101;
        }
        case "ADMIN_PRODUCT_MERGE_EXPANSION": {
          return 102;
        }
        case "ADMIN_PLEDGE": {
          return 103;
        }
        case "ADMIN_CANCEL_PLEDGE": {
          return 104;
        }
        case "ADMIN_LEGACY_ASSET_MIGRATION": {
          return 105;
        }
        case "ADMIN_AUDIT_APPROVE": {
          return 106;
        }
        case "ADMIN_AUDIT_REJECT": {
          return 107;
        }
        case "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY": {
          return 108;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EventStatus = {
  /**
   * Serializes EventStatus to protobuf.
   */
  encode: function (_msg?: PartialDeep<EventStatus>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EventStatus from protobuf.
   */
  decode: function (_bytes?: ByteSource): EventStatus {
    return {};
  },

  /**
   * Initializes EventStatus with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EventStatus>): EventStatus {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EventStatus>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EventStatus,
    _reader: protoscript.BinaryReader,
  ): EventStatus {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    INIT: "INIT",
    PENDING: "PENDING",
    QUEUING: "QUEUING",
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    /**
     * @private
     */
    _fromInt: function (i: number): EventStatus.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "INIT";
        }
        case 2: {
          return "PENDING";
        }
        case 3: {
          return "QUEUING";
        }
        case 4: {
          return "CANCELLED";
        }
        case 5: {
          return "COMPLETED";
        }
        case 6: {
          return "FAILED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventStatus.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventStatus.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "INIT": {
          return 1;
        }
        case "PENDING": {
          return 2;
        }
        case "QUEUING": {
          return 3;
        }
        case "CANCELLED": {
          return 4;
        }
        case "COMPLETED": {
          return 5;
        }
        case "FAILED": {
          return 6;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningProductStatus = {
  /**
   * Serializes EarningProductStatus to protobuf.
   */
  encode: function (_msg?: PartialDeep<EarningProductStatus>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EarningProductStatus from protobuf.
   */
  decode: function (_bytes?: ByteSource): EarningProductStatus {
    return {};
  },

  /**
   * Initializes EarningProductStatus with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningProductStatus>,
  ): EarningProductStatus {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EarningProductStatus>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EarningProductStatus,
    _reader: protoscript.BinaryReader,
  ): EarningProductStatus {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    RECRUITING: "RECRUITING",
    RUNNING: "RUNNING",
    EXPANDING: "EXPANDING",
    DEACTIVATED: "DEACTIVATED",
    /**
     * @private
     */
    _fromInt: function (i: number): EarningProductStatus.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "RECRUITING";
        }
        case 2: {
          return "RUNNING";
        }
        case 3: {
          return "EXPANDING";
        }
        case 4: {
          return "DEACTIVATED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EarningProductStatus.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EarningProductStatus.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "RECRUITING": {
          return 1;
        }
        case "RUNNING": {
          return 2;
        }
        case "EXPANDING": {
          return 3;
        }
        case "DEACTIVATED": {
          return 4;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningProductType = {
  /**
   * Serializes EarningProductType to protobuf.
   */
  encode: function (_msg?: PartialDeep<EarningProductType>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EarningProductType from protobuf.
   */
  decode: function (_bytes?: ByteSource): EarningProductType {
    return {};
  },

  /**
   * Initializes EarningProductType with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EarningProductType>): EarningProductType {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EarningProductType>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EarningProductType,
    _reader: protoscript.BinaryReader,
  ): EarningProductType {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    STAKING: "STAKING",
    SAVINGS: "SAVINGS",
    /**
     * @private
     */
    _fromInt: function (i: number): EarningProductType.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "STAKING";
        }
        case 2: {
          return "SAVINGS";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EarningProductType.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EarningProductType.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "STAKING": {
          return 1;
        }
        case "SAVINGS": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningSnapshotBuyData = {
  /**
   * Serializes EarningSnapshotBuyData to protobuf.
   */
  encode: function (msg: PartialDeep<EarningSnapshotBuyData>): Uint8Array {
    return EarningSnapshotBuyData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotBuyData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotBuyData {
    return EarningSnapshotBuyData._readMessage(
      EarningSnapshotBuyData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotBuyData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotBuyData>,
  ): EarningSnapshotBuyData {
    return {
      productId: 0,
      productStatus: EarningProductStatus.Enum._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotBuyData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    if (
      msg.productStatus &&
      EarningProductStatus.Enum._toInt(msg.productStatus)
    ) {
      writer.writeEnum(2, EarningProductStatus.Enum._toInt(msg.productStatus));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotBuyData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotBuyData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        case 2: {
          msg.productStatus = EarningProductStatus.Enum._fromInt(
            reader.readEnum(),
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotRedeemData = {
  /**
   * Serializes EarningSnapshotRedeemData to protobuf.
   */
  encode: function (msg: PartialDeep<EarningSnapshotRedeemData>): Uint8Array {
    return EarningSnapshotRedeemData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotRedeemData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotRedeemData {
    return EarningSnapshotRedeemData._readMessage(
      EarningSnapshotRedeemData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotRedeemData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotRedeemData>,
  ): EarningSnapshotRedeemData {
    return {
      productId: 0,
      amount: 0n,
      productStatus: EarningProductStatus.Enum._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotRedeemData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    if (msg.amount) {
      writer.writeInt64String(2, msg.amount.toString() as any);
    }
    if (
      msg.productStatus &&
      EarningProductStatus.Enum._toInt(msg.productStatus)
    ) {
      writer.writeEnum(3, EarningProductStatus.Enum._toInt(msg.productStatus));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotRedeemData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotRedeemData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        case 2: {
          msg.amount = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.productStatus = EarningProductStatus.Enum._fromInt(
            reader.readEnum(),
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotCancelQueueData = {
  /**
   * Serializes EarningSnapshotCancelQueueData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotCancelQueueData>,
  ): Uint8Array {
    return EarningSnapshotCancelQueueData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotCancelQueueData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotCancelQueueData {
    return EarningSnapshotCancelQueueData._readMessage(
      EarningSnapshotCancelQueueData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotCancelQueueData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotCancelQueueData>,
  ): EarningSnapshotCancelQueueData {
    return {
      eventId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotCancelQueueData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.eventId) {
      writer.writeString(1, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotCancelQueueData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotCancelQueueData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminInterestPaymentData = {
  /**
   * Serializes EarningSnapshotAdminInterestPaymentData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminInterestPaymentData>,
  ): Uint8Array {
    return EarningSnapshotAdminInterestPaymentData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminInterestPaymentData from protobuf.
   */
  decode: function (
    bytes: ByteSource,
  ): EarningSnapshotAdminInterestPaymentData {
    return EarningSnapshotAdminInterestPaymentData._readMessage(
      EarningSnapshotAdminInterestPaymentData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotAdminInterestPaymentData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminInterestPaymentData>,
  ): EarningSnapshotAdminInterestPaymentData {
    return {
      productId: 0,
      productType: EarningProductType.Enum._fromInt(0),
      date: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminInterestPaymentData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    if (msg.productType && EarningProductType.Enum._toInt(msg.productType)) {
      writer.writeEnum(2, EarningProductType.Enum._toInt(msg.productType));
    }
    if (msg.date) {
      writer.writeString(3, msg.date);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminInterestPaymentData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotAdminInterestPaymentData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        case 2: {
          msg.productType = EarningProductType.Enum._fromInt(reader.readEnum());
          break;
        }
        case 3: {
          msg.date = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminProductExpandData = {
  /**
   * Serializes EarningSnapshotAdminProductExpandData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminProductExpandData>,
  ): Uint8Array {
    return EarningSnapshotAdminProductExpandData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminProductExpandData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminProductExpandData {
    return EarningSnapshotAdminProductExpandData._readMessage(
      EarningSnapshotAdminProductExpandData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotAdminProductExpandData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminProductExpandData>,
  ): EarningSnapshotAdminProductExpandData {
    return {
      productId: 0,
      amount: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminProductExpandData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    if (msg.amount) {
      writer.writeInt64String(2, msg.amount.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminProductExpandData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotAdminProductExpandData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        case 2: {
          msg.amount = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminProductMergeExpansionData = {
  /**
   * Serializes EarningSnapshotAdminProductMergeExpansionData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminProductMergeExpansionData>,
  ): Uint8Array {
    return EarningSnapshotAdminProductMergeExpansionData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminProductMergeExpansionData from protobuf.
   */
  decode: function (
    bytes: ByteSource,
  ): EarningSnapshotAdminProductMergeExpansionData {
    return EarningSnapshotAdminProductMergeExpansionData._readMessage(
      EarningSnapshotAdminProductMergeExpansionData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotAdminProductMergeExpansionData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminProductMergeExpansionData>,
  ): EarningSnapshotAdminProductMergeExpansionData {
    return {
      productId: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminProductMergeExpansionData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminProductMergeExpansionData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotAdminProductMergeExpansionData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminPledgeData = {
  /**
   * Serializes EarningSnapshotAdminPledgeData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminPledgeData>,
  ): Uint8Array {
    return EarningSnapshotAdminPledgeData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminPledgeData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminPledgeData {
    return EarningSnapshotAdminPledgeData._readMessage(
      EarningSnapshotAdminPledgeData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotAdminPledgeData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminPledgeData>,
  ): EarningSnapshotAdminPledgeData {
    return {
      userId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminPledgeData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminPledgeData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotAdminPledgeData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminCancelPledgeData = {
  /**
   * Serializes EarningSnapshotAdminCancelPledgeData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminCancelPledgeData>,
  ): Uint8Array {
    return EarningSnapshotAdminCancelPledgeData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminCancelPledgeData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminCancelPledgeData {
    return EarningSnapshotAdminCancelPledgeData._readMessage(
      EarningSnapshotAdminCancelPledgeData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotAdminCancelPledgeData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminCancelPledgeData>,
  ): EarningSnapshotAdminCancelPledgeData {
    return {
      userId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminCancelPledgeData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminCancelPledgeData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotAdminCancelPledgeData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminLegacyAssetMigrationData = {
  /**
   * Serializes EarningSnapshotAdminLegacyAssetMigrationData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminLegacyAssetMigrationData>,
  ): Uint8Array {
    return EarningSnapshotAdminLegacyAssetMigrationData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminLegacyAssetMigrationData from protobuf.
   */
  decode: function (
    bytes: ByteSource,
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    return EarningSnapshotAdminLegacyAssetMigrationData._readMessage(
      EarningSnapshotAdminLegacyAssetMigrationData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotAdminLegacyAssetMigrationData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminLegacyAssetMigrationData>,
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    return {
      userId: "",
      productId: 0,
      amount: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminLegacyAssetMigrationData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.productId) {
      writer.writeInt32(2, msg.productId);
    }
    if (msg.amount) {
      writer.writeInt64String(3, msg.amount.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminLegacyAssetMigrationData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.productId = reader.readInt32();
          break;
        }
        case 3: {
          msg.amount = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminAuditApproveData = {
  /**
   * Serializes EarningSnapshotAdminAuditApproveData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminAuditApproveData>,
  ): Uint8Array {
    return EarningSnapshotAdminAuditApproveData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminAuditApproveData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminAuditApproveData {
    return EarningSnapshotAdminAuditApproveData._readMessage(
      EarningSnapshotAdminAuditApproveData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotAdminAuditApproveData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminAuditApproveData>,
  ): EarningSnapshotAdminAuditApproveData {
    return {
      traceId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminAuditApproveData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAuditApproveData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotAdminAuditApproveData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminAuditRejectData = {
  /**
   * Serializes EarningSnapshotAdminAuditRejectData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminAuditRejectData>,
  ): Uint8Array {
    return EarningSnapshotAdminAuditRejectData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminAuditRejectData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminAuditRejectData {
    return EarningSnapshotAdminAuditRejectData._readMessage(
      EarningSnapshotAdminAuditRejectData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotAdminAuditRejectData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminAuditRejectData>,
  ): EarningSnapshotAdminAuditRejectData {
    return {
      traceId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminAuditRejectData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAuditRejectData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotAdminAuditRejectData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminAutoReviseProductCapacityData = {
  /**
   * Serializes EarningSnapshotAdminAutoReviseProductCapacityData to protobuf.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminAutoReviseProductCapacityData>,
  ): Uint8Array {
    return EarningSnapshotAdminAutoReviseProductCapacityData._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminAutoReviseProductCapacityData from protobuf.
   */
  decode: function (
    bytes: ByteSource,
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    return EarningSnapshotAdminAutoReviseProductCapacityData._readMessage(
      EarningSnapshotAdminAutoReviseProductCapacityData.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningSnapshotAdminAutoReviseProductCapacityData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminAutoReviseProductCapacityData>,
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    return {
      productId: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminAutoReviseProductCapacityData>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAutoReviseProductCapacityData,
    reader: protoscript.BinaryReader,
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAssetsRequest = {
  /**
   * Serializes ListAssetsRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<ListAssetsRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ListAssetsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ListAssetsRequest {
    return {};
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAssetsRequest>): ListAssetsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListAssetsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ListAssetsRequest,
    _reader: protoscript.BinaryReader,
  ): ListAssetsRequest {
    return _msg;
  },
};

export const Asset = {
  /**
   * Serializes Asset to protobuf.
   */
  encode: function (msg: PartialDeep<Asset>): Uint8Array {
    return Asset._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Asset from protobuf.
   */
  decode: function (bytes: ByteSource): Asset {
    return Asset._readMessage(
      Asset.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Asset>): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      priceUsd: "",
      priceBtc: "",
      order: 0,
      updatedAt: 0,
      chainLogo: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Asset>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.assetId) {
      writer.writeString(1, msg.assetId);
    }
    if (msg.chainId) {
      writer.writeString(2, msg.chainId);
    }
    if (msg.symbol) {
      writer.writeString(3, msg.symbol);
    }
    if (msg.name) {
      writer.writeString(4, msg.name);
    }
    if (msg.logo) {
      writer.writeString(5, msg.logo);
    }
    if (msg.priceUsd) {
      writer.writeString(6, msg.priceUsd);
    }
    if (msg.priceBtc) {
      writer.writeString(7, msg.priceBtc);
    }
    if (msg.order) {
      writer.writeInt32(8, msg.order);
    }
    if (msg.updatedAt) {
      writer.writeInt32(9, msg.updatedAt);
    }
    if (msg.chainLogo) {
      writer.writeString(10, msg.chainLogo);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, reader: protoscript.BinaryReader): Asset {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.assetId = reader.readString();
          break;
        }
        case 2: {
          msg.chainId = reader.readString();
          break;
        }
        case 3: {
          msg.symbol = reader.readString();
          break;
        }
        case 4: {
          msg.name = reader.readString();
          break;
        }
        case 5: {
          msg.logo = reader.readString();
          break;
        }
        case 6: {
          msg.priceUsd = reader.readString();
          break;
        }
        case 7: {
          msg.priceBtc = reader.readString();
          break;
        }
        case 8: {
          msg.order = reader.readInt32();
          break;
        }
        case 9: {
          msg.updatedAt = reader.readInt32();
          break;
        }
        case 10: {
          msg.chainLogo = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAssetsResponse = {
  /**
   * Serializes ListAssetsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListAssetsResponse>): Uint8Array {
    return ListAssetsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAssetsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListAssetsResponse {
    return ListAssetsResponse._readMessage(
      ListAssetsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAssetsResponse>): ListAssetsResponse {
    return {
      assets: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAssetsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.assets?.length) {
      writer.writeRepeatedMessage(1, msg.assets as any, Asset._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    reader: protoscript.BinaryReader,
  ): ListAssetsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Asset.initialize();
          reader.readMessage(m, Asset._readMessage);
          msg.assets.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningProduct = {
  /**
   * Serializes EarningProduct to protobuf.
   */
  encode: function (msg: PartialDeep<EarningProduct>): Uint8Array {
    return EarningProduct._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningProduct from protobuf.
   */
  decode: function (bytes: ByteSource): EarningProduct {
    return EarningProduct._readMessage(
      EarningProduct.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes EarningProduct with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EarningProduct>): EarningProduct {
    return {
      id: 0,
      name: "",
      description: "",
      assetId: "",
      interestRate: "",
      minAmountPerOrder: "",
      maxAmountPerOrder: "",
      capacity: "",
      sold: "",
      queuingBuyAmount: "",
      queuingRedeemAmount: "",
      version: "",
      createdAt: 0,
      type: EarningProductType.Enum._fromInt(0),
      status: EarningProductStatus.Enum._fromInt(0),
      runningNodes: 0,
      interestPaymentDuration: 0,
      expandingAmount: "",
      filledExpandingAmount: "",
      expectedExpandingEndAt: 0,
      userIsInWhitelist: false,
      descriptionRules: "",
      descriptionRiskDisclosure: "",
      enabledWhitelistLimit: false,
      precision: 0,
      buyDisabled: false,
      redeemDisabled: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningProduct>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    if (msg.description) {
      writer.writeString(3, msg.description);
    }
    if (msg.assetId) {
      writer.writeString(4, msg.assetId);
    }
    if (msg.interestRate) {
      writer.writeString(5, msg.interestRate);
    }
    if (msg.minAmountPerOrder) {
      writer.writeString(6, msg.minAmountPerOrder);
    }
    if (msg.maxAmountPerOrder) {
      writer.writeString(7, msg.maxAmountPerOrder);
    }
    if (msg.capacity) {
      writer.writeString(8, msg.capacity);
    }
    if (msg.sold) {
      writer.writeString(9, msg.sold);
    }
    if (msg.queuingBuyAmount) {
      writer.writeString(10, msg.queuingBuyAmount);
    }
    if (msg.queuingRedeemAmount) {
      writer.writeString(11, msg.queuingRedeemAmount);
    }
    if (msg.version) {
      writer.writeString(12, msg.version);
    }
    if (msg.createdAt) {
      writer.writeInt32(13, msg.createdAt);
    }
    if (msg.type && EarningProductType.Enum._toInt(msg.type)) {
      writer.writeEnum(14, EarningProductType.Enum._toInt(msg.type));
    }
    if (msg.status && EarningProductStatus.Enum._toInt(msg.status)) {
      writer.writeEnum(15, EarningProductStatus.Enum._toInt(msg.status));
    }
    if (msg.runningNodes) {
      writer.writeInt32(16, msg.runningNodes);
    }
    if (msg.interestPaymentDuration) {
      writer.writeInt32(17, msg.interestPaymentDuration);
    }
    if (msg.expandingAmount) {
      writer.writeString(18, msg.expandingAmount);
    }
    if (msg.filledExpandingAmount) {
      writer.writeString(19, msg.filledExpandingAmount);
    }
    if (msg.expectedExpandingEndAt) {
      writer.writeInt32(20, msg.expectedExpandingEndAt);
    }
    if (msg.userIsInWhitelist) {
      writer.writeBool(21, msg.userIsInWhitelist);
    }
    if (msg.descriptionRules) {
      writer.writeString(22, msg.descriptionRules);
    }
    if (msg.descriptionRiskDisclosure) {
      writer.writeString(23, msg.descriptionRiskDisclosure);
    }
    if (msg.enabledWhitelistLimit) {
      writer.writeBool(24, msg.enabledWhitelistLimit);
    }
    if (msg.precision) {
      writer.writeInt32(26, msg.precision);
    }
    if (msg.buyDisabled) {
      writer.writeBool(27, msg.buyDisabled);
    }
    if (msg.redeemDisabled) {
      writer.writeBool(28, msg.redeemDisabled);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningProduct,
    reader: protoscript.BinaryReader,
  ): EarningProduct {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.description = reader.readString();
          break;
        }
        case 4: {
          msg.assetId = reader.readString();
          break;
        }
        case 5: {
          msg.interestRate = reader.readString();
          break;
        }
        case 6: {
          msg.minAmountPerOrder = reader.readString();
          break;
        }
        case 7: {
          msg.maxAmountPerOrder = reader.readString();
          break;
        }
        case 8: {
          msg.capacity = reader.readString();
          break;
        }
        case 9: {
          msg.sold = reader.readString();
          break;
        }
        case 10: {
          msg.queuingBuyAmount = reader.readString();
          break;
        }
        case 11: {
          msg.queuingRedeemAmount = reader.readString();
          break;
        }
        case 12: {
          msg.version = reader.readString();
          break;
        }
        case 13: {
          msg.createdAt = reader.readInt32();
          break;
        }
        case 14: {
          msg.type = EarningProductType.Enum._fromInt(reader.readEnum());
          break;
        }
        case 15: {
          msg.status = EarningProductStatus.Enum._fromInt(reader.readEnum());
          break;
        }
        case 16: {
          msg.runningNodes = reader.readInt32();
          break;
        }
        case 17: {
          msg.interestPaymentDuration = reader.readInt32();
          break;
        }
        case 18: {
          msg.expandingAmount = reader.readString();
          break;
        }
        case 19: {
          msg.filledExpandingAmount = reader.readString();
          break;
        }
        case 20: {
          msg.expectedExpandingEndAt = reader.readInt32();
          break;
        }
        case 21: {
          msg.userIsInWhitelist = reader.readBool();
          break;
        }
        case 22: {
          msg.descriptionRules = reader.readString();
          break;
        }
        case 23: {
          msg.descriptionRiskDisclosure = reader.readString();
          break;
        }
        case 24: {
          msg.enabledWhitelistLimit = reader.readBool();
          break;
        }
        case 26: {
          msg.precision = reader.readInt32();
          break;
        }
        case 27: {
          msg.buyDisabled = reader.readBool();
          break;
        }
        case 28: {
          msg.redeemDisabled = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetEarningProductRequest = {
  /**
   * Serializes GetEarningProductRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetEarningProductRequest>): Uint8Array {
    return GetEarningProductRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetEarningProductRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetEarningProductRequest {
    return GetEarningProductRequest._readMessage(
      GetEarningProductRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetEarningProductRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetEarningProductRequest>,
  ): GetEarningProductRequest {
    return {
      id: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetEarningProductRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEarningProductRequest,
    reader: protoscript.BinaryReader,
  ): GetEarningProductRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetEarningProductResponse = {
  /**
   * Serializes GetEarningProductResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetEarningProductResponse>): Uint8Array {
    return GetEarningProductResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetEarningProductResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetEarningProductResponse {
    return GetEarningProductResponse._readMessage(
      GetEarningProductResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetEarningProductResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetEarningProductResponse>,
  ): GetEarningProductResponse {
    return {
      product: EarningProduct.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetEarningProductResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.product) {
      writer.writeMessage(1, msg.product, EarningProduct._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEarningProductResponse,
    reader: protoscript.BinaryReader,
  ): GetEarningProductResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.product, EarningProduct._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListEarningProductsRequest = {
  /**
   * Serializes ListEarningProductsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListEarningProductsRequest>): Uint8Array {
    return ListEarningProductsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListEarningProductsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListEarningProductsRequest {
    return ListEarningProductsRequest._readMessage(
      ListEarningProductsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListEarningProductsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListEarningProductsRequest>,
  ): ListEarningProductsRequest {
    return {
      type: EarningProductType.Enum._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListEarningProductsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.type && EarningProductType.Enum._toInt(msg.type)) {
      writer.writeEnum(1, EarningProductType.Enum._toInt(msg.type));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEarningProductsRequest,
    reader: protoscript.BinaryReader,
  ): ListEarningProductsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.type = EarningProductType.Enum._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListEarningProductsResponse = {
  /**
   * Serializes ListEarningProductsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListEarningProductsResponse>): Uint8Array {
    return ListEarningProductsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListEarningProductsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListEarningProductsResponse {
    return ListEarningProductsResponse._readMessage(
      ListEarningProductsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListEarningProductsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListEarningProductsResponse>,
  ): ListEarningProductsResponse {
    return {
      products: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListEarningProductsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.products?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.products as any,
        EarningProduct._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEarningProductsResponse,
    reader: protoscript.BinaryReader,
  ): ListEarningProductsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = EarningProduct.initialize();
          reader.readMessage(m, EarningProduct._readMessage);
          msg.products.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserEarningProduct = {
  /**
   * Serializes UserEarningProduct to protobuf.
   */
  encode: function (msg: PartialDeep<UserEarningProduct>): Uint8Array {
    return UserEarningProduct._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserEarningProduct from protobuf.
   */
  decode: function (bytes: ByteSource): UserEarningProduct {
    return UserEarningProduct._readMessage(
      UserEarningProduct.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserEarningProduct with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserEarningProduct>): UserEarningProduct {
    return {
      id: 0,
      userId: "",
      earningProductId: 0,
      amount: "",
      queuingBuyAmount: "",
      queuingRedeemAmount: "",
      version: "",
      createdAt: 0,
      updatedAt: 0,
      totalRevenue: "",
      pledged: false,
      expandBuyAmount: "",
      buyDisabled: false,
      redeemDisabled: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserEarningProduct>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.earningProductId) {
      writer.writeInt32(3, msg.earningProductId);
    }
    if (msg.amount) {
      writer.writeString(4, msg.amount);
    }
    if (msg.queuingBuyAmount) {
      writer.writeString(5, msg.queuingBuyAmount);
    }
    if (msg.queuingRedeemAmount) {
      writer.writeString(6, msg.queuingRedeemAmount);
    }
    if (msg.version) {
      writer.writeString(7, msg.version);
    }
    if (msg.createdAt) {
      writer.writeInt32(8, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeInt32(9, msg.updatedAt);
    }
    if (msg.totalRevenue) {
      writer.writeString(10, msg.totalRevenue);
    }
    if (msg.pledged) {
      writer.writeBool(11, msg.pledged);
    }
    if (msg.expandBuyAmount) {
      writer.writeString(12, msg.expandBuyAmount);
    }
    if (msg.buyDisabled) {
      writer.writeBool(13, msg.buyDisabled);
    }
    if (msg.redeemDisabled) {
      writer.writeBool(14, msg.redeemDisabled);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserEarningProduct,
    reader: protoscript.BinaryReader,
  ): UserEarningProduct {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.earningProductId = reader.readInt32();
          break;
        }
        case 4: {
          msg.amount = reader.readString();
          break;
        }
        case 5: {
          msg.queuingBuyAmount = reader.readString();
          break;
        }
        case 6: {
          msg.queuingRedeemAmount = reader.readString();
          break;
        }
        case 7: {
          msg.version = reader.readString();
          break;
        }
        case 8: {
          msg.createdAt = reader.readInt32();
          break;
        }
        case 9: {
          msg.updatedAt = reader.readInt32();
          break;
        }
        case 10: {
          msg.totalRevenue = reader.readString();
          break;
        }
        case 11: {
          msg.pledged = reader.readBool();
          break;
        }
        case 12: {
          msg.expandBuyAmount = reader.readString();
          break;
        }
        case 13: {
          msg.buyDisabled = reader.readBool();
          break;
        }
        case 14: {
          msg.redeemDisabled = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListMyEarningProductsRequest = {
  /**
   * Serializes ListMyEarningProductsRequest to protobuf.
   */
  encode: function (
    _msg?: PartialDeep<ListMyEarningProductsRequest>,
  ): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ListMyEarningProductsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ListMyEarningProductsRequest {
    return {};
  },

  /**
   * Initializes ListMyEarningProductsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMyEarningProductsRequest>,
  ): ListMyEarningProductsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListMyEarningProductsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ListMyEarningProductsRequest,
    _reader: protoscript.BinaryReader,
  ): ListMyEarningProductsRequest {
    return _msg;
  },
};

export const ListMyEarningProductsResponse = {
  /**
   * Serializes ListMyEarningProductsResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<ListMyEarningProductsResponse>,
  ): Uint8Array {
    return ListMyEarningProductsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListMyEarningProductsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListMyEarningProductsResponse {
    return ListMyEarningProductsResponse._readMessage(
      ListMyEarningProductsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListMyEarningProductsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMyEarningProductsResponse>,
  ): ListMyEarningProductsResponse {
    return {
      products: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMyEarningProductsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.products?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.products as any,
        UserEarningProduct._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMyEarningProductsResponse,
    reader: protoscript.BinaryReader,
  ): ListMyEarningProductsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = UserEarningProduct.initialize();
          reader.readMessage(m, UserEarningProduct._readMessage);
          msg.products.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMyEarningProductRequest = {
  /**
   * Serializes GetMyEarningProductRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetMyEarningProductRequest>): Uint8Array {
    return GetMyEarningProductRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMyEarningProductRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetMyEarningProductRequest {
    return GetMyEarningProductRequest._readMessage(
      GetMyEarningProductRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetMyEarningProductRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetMyEarningProductRequest>,
  ): GetMyEarningProductRequest {
    return {
      id: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetMyEarningProductRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMyEarningProductRequest,
    reader: protoscript.BinaryReader,
  ): GetMyEarningProductRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMyEarningProductResponse = {
  /**
   * Serializes GetMyEarningProductResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetMyEarningProductResponse>): Uint8Array {
    return GetMyEarningProductResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMyEarningProductResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetMyEarningProductResponse {
    return GetMyEarningProductResponse._readMessage(
      GetMyEarningProductResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetMyEarningProductResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetMyEarningProductResponse>,
  ): GetMyEarningProductResponse {
    return {
      product: UserEarningProduct.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetMyEarningProductResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.product) {
      writer.writeMessage(1, msg.product, UserEarningProduct._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMyEarningProductResponse,
    reader: protoscript.BinaryReader,
  ): GetMyEarningProductResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.product, UserEarningProduct._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetEventRequest = {
  /**
   * Serializes GetEventRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetEventRequest>): Uint8Array {
    return GetEventRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetEventRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetEventRequest {
    return GetEventRequest._readMessage(
      GetEventRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetEventRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetEventRequest>): GetEventRequest {
    return {
      followId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetEventRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.followId) {
      writer.writeString(1, msg.followId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEventRequest,
    reader: protoscript.BinaryReader,
  ): GetEventRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.followId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Event = {
  /**
   * Serializes Event to protobuf.
   */
  encode: function (msg: PartialDeep<Event>): Uint8Array {
    return Event._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Event from protobuf.
   */
  decode: function (bytes: ByteSource): Event {
    return Event._readMessage(
      Event.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Event with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Event>): Event {
    return {
      id: "",
      userId: "",
      action: EventAction.Enum._fromInt(0),
      productId: 0,
      assetId: "",
      amount: "",
      filledAmount: "",
      status: EventStatus.Enum._fromInt(0),
      error: EventError.Enum._fromInt(0),
      followId: "",
      createdAt: 0,
      queuingAheadAmount: "",
      interestPaymentDate: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Event>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.action && EventAction.Enum._toInt(msg.action)) {
      writer.writeEnum(3, EventAction.Enum._toInt(msg.action));
    }
    if (msg.productId) {
      writer.writeInt32(4, msg.productId);
    }
    if (msg.assetId) {
      writer.writeString(5, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(6, msg.amount);
    }
    if (msg.filledAmount) {
      writer.writeString(7, msg.filledAmount);
    }
    if (msg.status && EventStatus.Enum._toInt(msg.status)) {
      writer.writeEnum(8, EventStatus.Enum._toInt(msg.status));
    }
    if (msg.error && EventError.Enum._toInt(msg.error)) {
      writer.writeEnum(9, EventError.Enum._toInt(msg.error));
    }
    if (msg.followId) {
      writer.writeString(10, msg.followId);
    }
    if (msg.createdAt) {
      writer.writeInt32(11, msg.createdAt);
    }
    if (msg.queuingAheadAmount) {
      writer.writeString(12, msg.queuingAheadAmount);
    }
    if (msg.interestPaymentDate) {
      writer.writeString(13, msg.interestPaymentDate);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Event, reader: protoscript.BinaryReader): Event {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.action = EventAction.Enum._fromInt(reader.readEnum());
          break;
        }
        case 4: {
          msg.productId = reader.readInt32();
          break;
        }
        case 5: {
          msg.assetId = reader.readString();
          break;
        }
        case 6: {
          msg.amount = reader.readString();
          break;
        }
        case 7: {
          msg.filledAmount = reader.readString();
          break;
        }
        case 8: {
          msg.status = EventStatus.Enum._fromInt(reader.readEnum());
          break;
        }
        case 9: {
          msg.error = EventError.Enum._fromInt(reader.readEnum());
          break;
        }
        case 10: {
          msg.followId = reader.readString();
          break;
        }
        case 11: {
          msg.createdAt = reader.readInt32();
          break;
        }
        case 12: {
          msg.queuingAheadAmount = reader.readString();
          break;
        }
        case 13: {
          msg.interestPaymentDate = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetEventResponse = {
  /**
   * Serializes GetEventResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetEventResponse>): Uint8Array {
    return GetEventResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetEventResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetEventResponse {
    return GetEventResponse._readMessage(
      GetEventResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetEventResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetEventResponse>): GetEventResponse {
    return {
      event: Event.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetEventResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.event) {
      writer.writeMessage(1, msg.event, Event._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEventResponse,
    reader: protoscript.BinaryReader,
  ): GetEventResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.event, Event._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListEventsRequest = {
  /**
   * Serializes ListEventsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListEventsRequest>): Uint8Array {
    return ListEventsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListEventsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListEventsRequest {
    return ListEventsRequest._readMessage(
      ListEventsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListEventsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListEventsRequest>): ListEventsRequest {
    return {
      earningProductId: 0,
      actions: [],
      statuses: [],
      offset: 0,
      limit: 0,
      startAt: 0,
      endAt: 0,
      productType: EarningProductType.Enum._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListEventsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.earningProductId) {
      writer.writeInt32(1, msg.earningProductId);
    }
    if (msg.actions?.length) {
      writer.writePackedEnum(2, msg.actions.map(EventAction.Enum._toInt));
    }
    if (msg.statuses?.length) {
      writer.writePackedEnum(3, msg.statuses.map(EventStatus.Enum._toInt));
    }
    if (msg.offset) {
      writer.writeInt32(4, msg.offset);
    }
    if (msg.limit) {
      writer.writeInt32(5, msg.limit);
    }
    if (msg.startAt) {
      writer.writeInt32(6, msg.startAt);
    }
    if (msg.endAt) {
      writer.writeInt32(7, msg.endAt);
    }
    if (msg.productType && EarningProductType.Enum._toInt(msg.productType)) {
      writer.writeEnum(8, EarningProductType.Enum._toInt(msg.productType));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEventsRequest,
    reader: protoscript.BinaryReader,
  ): ListEventsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.earningProductId = reader.readInt32();
          break;
        }
        case 2: {
          if (reader.isDelimited()) {
            msg.actions.push(
              ...reader.readPackedEnum().map(EventAction.Enum._fromInt),
            );
          } else {
            msg.actions.push(EventAction.Enum._fromInt(reader.readEnum()));
          }
          break;
        }
        case 3: {
          if (reader.isDelimited()) {
            msg.statuses.push(
              ...reader.readPackedEnum().map(EventStatus.Enum._fromInt),
            );
          } else {
            msg.statuses.push(EventStatus.Enum._fromInt(reader.readEnum()));
          }
          break;
        }
        case 4: {
          msg.offset = reader.readInt32();
          break;
        }
        case 5: {
          msg.limit = reader.readInt32();
          break;
        }
        case 6: {
          msg.startAt = reader.readInt32();
          break;
        }
        case 7: {
          msg.endAt = reader.readInt32();
          break;
        }
        case 8: {
          msg.productType = EarningProductType.Enum._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListEventsResponse = {
  /**
   * Serializes ListEventsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListEventsResponse>): Uint8Array {
    return ListEventsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListEventsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListEventsResponse {
    return ListEventsResponse._readMessage(
      ListEventsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListEventsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListEventsResponse>): ListEventsResponse {
    return {
      events: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListEventsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.events?.length) {
      writer.writeRepeatedMessage(1, msg.events as any, Event._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEventsResponse,
    reader: protoscript.BinaryReader,
  ): ListEventsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Event.initialize();
          reader.readMessage(m, Event._readMessage);
          msg.events.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Audit = {
  /**
   * Serializes Audit to protobuf.
   */
  encode: function (msg: PartialDeep<Audit>): Uint8Array {
    return Audit._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Audit from protobuf.
   */
  decode: function (bytes: ByteSource): Audit {
    return Audit._readMessage(
      Audit.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Audit with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Audit>): Audit {
    return {
      id: "",
      createdAt: protoscript.Timestamp.initialize(),
      assetId: "",
      amount: "",
      userId: "",
      status: Audit.Status._fromInt(0),
      memo: "",
      reviewedBy: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Audit>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        2,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.assetId) {
      writer.writeString(3, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(4, msg.amount);
    }
    if (msg.userId) {
      writer.writeString(5, msg.userId);
    }
    if (msg.status && Audit.Status._toInt(msg.status)) {
      writer.writeEnum(6, Audit.Status._toInt(msg.status));
    }
    if (msg.memo) {
      writer.writeString(7, msg.memo);
    }
    if (msg.reviewedBy) {
      writer.writeString(8, msg.reviewedBy);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Audit, reader: protoscript.BinaryReader): Audit {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.assetId = reader.readString();
          break;
        }
        case 4: {
          msg.amount = reader.readString();
          break;
        }
        case 5: {
          msg.userId = reader.readString();
          break;
        }
        case 6: {
          msg.status = Audit.Status._fromInt(reader.readEnum());
          break;
        }
        case 7: {
          msg.memo = reader.readString();
          break;
        }
        case 8: {
          msg.reviewedBy = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Status: {
    NOT_SET: "NOT_SET",
    REJECTED: "REJECTED",
    APPROVED: "APPROVED",
    /**
     * @private
     */
    _fromInt: function (i: number): Audit.Status {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "REJECTED";
        }
        case 2: {
          return "APPROVED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Audit.Status;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Audit.Status): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "REJECTED": {
          return 1;
        }
        case "APPROVED": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const FindAuditRequest = {
  /**
   * Serializes FindAuditRequest to protobuf.
   */
  encode: function (msg: PartialDeep<FindAuditRequest>): Uint8Array {
    return FindAuditRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindAuditRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindAuditRequest {
    return FindAuditRequest._readMessage(
      FindAuditRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindAuditRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindAuditRequest>): FindAuditRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindAuditRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindAuditRequest,
    reader: protoscript.BinaryReader,
  ): FindAuditRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindAuditResponse = {
  /**
   * Serializes FindAuditResponse to protobuf.
   */
  encode: function (msg: PartialDeep<FindAuditResponse>): Uint8Array {
    return FindAuditResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FindAuditResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindAuditResponse {
    return FindAuditResponse._readMessage(
      FindAuditResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FindAuditResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindAuditResponse>): FindAuditResponse {
    return {
      audit: Audit.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindAuditResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.audit) {
      writer.writeMessage(1, msg.audit, Audit._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindAuditResponse,
    reader: protoscript.BinaryReader,
  ): FindAuditResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.audit, Audit._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAuditsRequest = {
  /**
   * Serializes ListAuditsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListAuditsRequest>): Uint8Array {
    return ListAuditsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAuditsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListAuditsRequest {
    return ListAuditsRequest._readMessage(
      ListAuditsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListAuditsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAuditsRequest>): ListAuditsRequest {
    return {
      offset: protoscript.Timestamp.initialize(),
      limit: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAuditsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.offset) {
      writer.writeMessage(1, msg.offset, protoscript.Timestamp._writeMessage);
    }
    if (msg.limit) {
      writer.writeInt64String(2, msg.limit.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsRequest,
    reader: protoscript.BinaryReader,
  ): ListAuditsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.offset, protoscript.Timestamp._readMessage);
          break;
        }
        case 2: {
          msg.limit = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAuditsResponse = {
  /**
   * Serializes ListAuditsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListAuditsResponse>): Uint8Array {
    return ListAuditsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAuditsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListAuditsResponse {
    return ListAuditsResponse._readMessage(
      ListAuditsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListAuditsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAuditsResponse>): ListAuditsResponse {
    return {
      audits: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAuditsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.audits?.length) {
      writer.writeRepeatedMessage(1, msg.audits as any, Audit._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsResponse,
    reader: protoscript.BinaryReader,
  ): ListAuditsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Audit.initialize();
          reader.readMessage(m, Audit._readMessage);
          msg.audits.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const EventErrorJSON = {
  /**
   * Serializes EventError to JSON.
   */
  encode: function (_msg?: PartialDeep<EventError>): string {
    return "{}";
  },

  /**
   * Deserializes EventError from JSON.
   */
  decode: function (_json?: string): EventError {
    return {};
  },

  /**
   * Initializes EventError with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EventError>): EventError {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EventError>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventError, _json: any): EventError {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    /**
     * buy / redeem / admin_expand / admin_merge_expansion
     */
    EARNING_PRODUCT_STATUS_MISMATCH: "EARNING_PRODUCT_STATUS_MISMATCH",
    /**
     * buy / admin_interest_payment
     */
    EARNING_PRODUCT_ASSET_MISMATCH: "EARNING_PRODUCT_ASSET_MISMATCH",
    /**
     * buy
     */
    EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED:
      "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED",
    /**
     * buy
     */
    EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED:
      "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED",
    /**
     * buy
     */
    EARNING_PRODUCT_INSUFFICIENT: "EARNING_PRODUCT_INSUFFICIENT",
    /**
     * redeem
     */
    USER_EARNING_PRODUCT_SHARE_INSUFFICIENT:
      "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT",
    /**
     * cancel_queue
     */
    EARNING_EVENT_MISMATCH: "EARNING_EVENT_MISMATCH",
    /**
     * buy or redeem
     */
    USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT:
      "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT",
    /**
     * admin_interest_payment
     */
    EARNING_PRODUCT_NOT_FOUND: "EARNING_PRODUCT_NOT_FOUND",
    /**
     * admin_interest_payment
     */
    USER_EARNING_PRODUCT_EOD_NOT_FOUND: "USER_EARNING_PRODUCT_EOD_NOT_FOUND",
    /**
     * redeem
     */
    USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED:
      "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED",
    /**
     * admin_interest_payment
     */
    EOD_ALREADY_APPLIED: "EOD_ALREADY_APPLIED",
    /**
     * admin_audit_approve / admin_audit_reject
     */
    AUDIT_NOT_FOUND: "AUDIT_NOT_FOUND",
    /**
     * admin_audit_approve / admin_audit_reject
     */
    AUDIT_STATUS_MISMATCH: "AUDIT_STATUS_MISMATCH",
    /**
     * buy / redeem
     */
    EARNING_PRODUCT_PRECISION_UNSATISFIED:
      "EARNING_PRODUCT_PRECISION_UNSATISFIED",
    /**
     * buy
     */
    USER_NOT_IN_WHITELIST: "USER_NOT_IN_WHITELIST",
    /**
     * @private
     */
    _fromInt: function (i: number): EventError.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "EARNING_PRODUCT_STATUS_MISMATCH";
        }
        case 2: {
          return "EARNING_PRODUCT_ASSET_MISMATCH";
        }
        case 3: {
          return "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED";
        }
        case 4: {
          return "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED";
        }
        case 5: {
          return "EARNING_PRODUCT_INSUFFICIENT";
        }
        case 6: {
          return "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT";
        }
        case 7: {
          return "EARNING_EVENT_MISMATCH";
        }
        case 8: {
          return "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT";
        }
        case 9: {
          return "EARNING_PRODUCT_NOT_FOUND";
        }
        case 10: {
          return "USER_EARNING_PRODUCT_EOD_NOT_FOUND";
        }
        case 11: {
          return "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED";
        }
        case 12: {
          return "EOD_ALREADY_APPLIED";
        }
        case 13: {
          return "AUDIT_NOT_FOUND";
        }
        case 14: {
          return "AUDIT_STATUS_MISMATCH";
        }
        case 15: {
          return "EARNING_PRODUCT_PRECISION_UNSATISFIED";
        }
        case 16: {
          return "USER_NOT_IN_WHITELIST";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventError.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventError.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "EARNING_PRODUCT_STATUS_MISMATCH": {
          return 1;
        }
        case "EARNING_PRODUCT_ASSET_MISMATCH": {
          return 2;
        }
        case "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED": {
          return 3;
        }
        case "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED": {
          return 4;
        }
        case "EARNING_PRODUCT_INSUFFICIENT": {
          return 5;
        }
        case "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT": {
          return 6;
        }
        case "EARNING_EVENT_MISMATCH": {
          return 7;
        }
        case "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT": {
          return 8;
        }
        case "EARNING_PRODUCT_NOT_FOUND": {
          return 9;
        }
        case "USER_EARNING_PRODUCT_EOD_NOT_FOUND": {
          return 10;
        }
        case "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED": {
          return 11;
        }
        case "EOD_ALREADY_APPLIED": {
          return 12;
        }
        case "AUDIT_NOT_FOUND": {
          return 13;
        }
        case "AUDIT_STATUS_MISMATCH": {
          return 14;
        }
        case "EARNING_PRODUCT_PRECISION_UNSATISFIED": {
          return 15;
        }
        case "USER_NOT_IN_WHITELIST": {
          return 16;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EventActionJSON = {
  /**
   * Serializes EventAction to JSON.
   */
  encode: function (_msg?: PartialDeep<EventAction>): string {
    return "{}";
  },

  /**
   * Deserializes EventAction from JSON.
   */
  decode: function (_json?: string): EventAction {
    return {};
  },

  /**
   * Initializes EventAction with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EventAction>): EventAction {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EventAction>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventAction, _json: any): EventAction {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    BUY: "BUY",
    REDEEM: "REDEEM",
    DEPOSIT: "DEPOSIT",
    INTEREST_PAYMENT: "INTEREST_PAYMENT",
    CANCEL_QUEUE: "CANCEL_QUEUE",
    ADMIN_INTEREST_PAYMENT: "ADMIN_INTEREST_PAYMENT",
    ADMIN_PRODUCT_EXPAND: "ADMIN_PRODUCT_EXPAND",
    ADMIN_PRODUCT_MERGE_EXPANSION: "ADMIN_PRODUCT_MERGE_EXPANSION",
    ADMIN_PLEDGE: "ADMIN_PLEDGE",
    ADMIN_CANCEL_PLEDGE: "ADMIN_CANCEL_PLEDGE",
    ADMIN_LEGACY_ASSET_MIGRATION: "ADMIN_LEGACY_ASSET_MIGRATION",
    ADMIN_AUDIT_APPROVE: "ADMIN_AUDIT_APPROVE",
    ADMIN_AUDIT_REJECT: "ADMIN_AUDIT_REJECT",
    ADMIN_AUTO_REVISE_PRODUCT_CAPACITY: "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY",
    /**
     * @private
     */
    _fromInt: function (i: number): EventAction.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "BUY";
        }
        case 2: {
          return "REDEEM";
        }
        case 3: {
          return "DEPOSIT";
        }
        case 4: {
          return "INTEREST_PAYMENT";
        }
        case 5: {
          return "CANCEL_QUEUE";
        }
        case 100: {
          return "ADMIN_INTEREST_PAYMENT";
        }
        case 101: {
          return "ADMIN_PRODUCT_EXPAND";
        }
        case 102: {
          return "ADMIN_PRODUCT_MERGE_EXPANSION";
        }
        case 103: {
          return "ADMIN_PLEDGE";
        }
        case 104: {
          return "ADMIN_CANCEL_PLEDGE";
        }
        case 105: {
          return "ADMIN_LEGACY_ASSET_MIGRATION";
        }
        case 106: {
          return "ADMIN_AUDIT_APPROVE";
        }
        case 107: {
          return "ADMIN_AUDIT_REJECT";
        }
        case 108: {
          return "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventAction.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventAction.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "BUY": {
          return 1;
        }
        case "REDEEM": {
          return 2;
        }
        case "DEPOSIT": {
          return 3;
        }
        case "INTEREST_PAYMENT": {
          return 4;
        }
        case "CANCEL_QUEUE": {
          return 5;
        }
        case "ADMIN_INTEREST_PAYMENT": {
          return 100;
        }
        case "ADMIN_PRODUCT_EXPAND": {
          return 101;
        }
        case "ADMIN_PRODUCT_MERGE_EXPANSION": {
          return 102;
        }
        case "ADMIN_PLEDGE": {
          return 103;
        }
        case "ADMIN_CANCEL_PLEDGE": {
          return 104;
        }
        case "ADMIN_LEGACY_ASSET_MIGRATION": {
          return 105;
        }
        case "ADMIN_AUDIT_APPROVE": {
          return 106;
        }
        case "ADMIN_AUDIT_REJECT": {
          return 107;
        }
        case "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY": {
          return 108;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EventStatusJSON = {
  /**
   * Serializes EventStatus to JSON.
   */
  encode: function (_msg?: PartialDeep<EventStatus>): string {
    return "{}";
  },

  /**
   * Deserializes EventStatus from JSON.
   */
  decode: function (_json?: string): EventStatus {
    return {};
  },

  /**
   * Initializes EventStatus with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EventStatus>): EventStatus {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EventStatus>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventStatus, _json: any): EventStatus {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    INIT: "INIT",
    PENDING: "PENDING",
    QUEUING: "QUEUING",
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    /**
     * @private
     */
    _fromInt: function (i: number): EventStatus.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "INIT";
        }
        case 2: {
          return "PENDING";
        }
        case 3: {
          return "QUEUING";
        }
        case 4: {
          return "CANCELLED";
        }
        case 5: {
          return "COMPLETED";
        }
        case 6: {
          return "FAILED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventStatus.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventStatus.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "INIT": {
          return 1;
        }
        case "PENDING": {
          return 2;
        }
        case "QUEUING": {
          return 3;
        }
        case "CANCELLED": {
          return 4;
        }
        case "COMPLETED": {
          return 5;
        }
        case "FAILED": {
          return 6;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningProductStatusJSON = {
  /**
   * Serializes EarningProductStatus to JSON.
   */
  encode: function (_msg?: PartialDeep<EarningProductStatus>): string {
    return "{}";
  },

  /**
   * Deserializes EarningProductStatus from JSON.
   */
  decode: function (_json?: string): EarningProductStatus {
    return {};
  },

  /**
   * Initializes EarningProductStatus with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningProductStatus>,
  ): EarningProductStatus {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EarningProductStatus>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningProductStatus,
    _json: any,
  ): EarningProductStatus {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    RECRUITING: "RECRUITING",
    RUNNING: "RUNNING",
    EXPANDING: "EXPANDING",
    DEACTIVATED: "DEACTIVATED",
    /**
     * @private
     */
    _fromInt: function (i: number): EarningProductStatus.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "RECRUITING";
        }
        case 2: {
          return "RUNNING";
        }
        case 3: {
          return "EXPANDING";
        }
        case 4: {
          return "DEACTIVATED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EarningProductStatus.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EarningProductStatus.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "RECRUITING": {
          return 1;
        }
        case "RUNNING": {
          return 2;
        }
        case "EXPANDING": {
          return 3;
        }
        case "DEACTIVATED": {
          return 4;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningProductTypeJSON = {
  /**
   * Serializes EarningProductType to JSON.
   */
  encode: function (_msg?: PartialDeep<EarningProductType>): string {
    return "{}";
  },

  /**
   * Deserializes EarningProductType from JSON.
   */
  decode: function (_json?: string): EarningProductType {
    return {};
  },

  /**
   * Initializes EarningProductType with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EarningProductType>): EarningProductType {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EarningProductType>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningProductType,
    _json: any,
  ): EarningProductType {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    STAKING: "STAKING",
    SAVINGS: "SAVINGS",
    /**
     * @private
     */
    _fromInt: function (i: number): EarningProductType.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "STAKING";
        }
        case 2: {
          return "SAVINGS";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EarningProductType.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EarningProductType.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "STAKING": {
          return 1;
        }
        case "SAVINGS": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningSnapshotBuyDataJSON = {
  /**
   * Serializes EarningSnapshotBuyData to JSON.
   */
  encode: function (msg: PartialDeep<EarningSnapshotBuyData>): string {
    return JSON.stringify(EarningSnapshotBuyDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes EarningSnapshotBuyData from JSON.
   */
  decode: function (json: string): EarningSnapshotBuyData {
    return EarningSnapshotBuyDataJSON._readMessage(
      EarningSnapshotBuyDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotBuyData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotBuyData>,
  ): EarningSnapshotBuyData {
    return {
      productId: 0,
      productStatus: EarningProductStatus.Enum._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotBuyData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json["productId"] = msg.productId;
    }
    if (
      msg.productStatus &&
      EarningProductStatusJSON.Enum._toInt(msg.productStatus)
    ) {
      json["productStatus"] = msg.productStatus;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotBuyData,
    json: any,
  ): EarningSnapshotBuyData {
    const _productId_ = json["productId"] ?? json["product_id"];
    if (_productId_) {
      msg.productId = protoscript.parseNumber(_productId_);
    }
    const _productStatus_ = json["productStatus"] ?? json["product_status"];
    if (_productStatus_) {
      msg.productStatus = EarningProductStatus.Enum._fromInt(_productStatus_);
    }
    return msg;
  },
};

export const EarningSnapshotRedeemDataJSON = {
  /**
   * Serializes EarningSnapshotRedeemData to JSON.
   */
  encode: function (msg: PartialDeep<EarningSnapshotRedeemData>): string {
    return JSON.stringify(EarningSnapshotRedeemDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes EarningSnapshotRedeemData from JSON.
   */
  decode: function (json: string): EarningSnapshotRedeemData {
    return EarningSnapshotRedeemDataJSON._readMessage(
      EarningSnapshotRedeemDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotRedeemData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotRedeemData>,
  ): EarningSnapshotRedeemData {
    return {
      productId: 0,
      amount: 0n,
      productStatus: EarningProductStatus.Enum._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotRedeemData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json["productId"] = msg.productId;
    }
    if (msg.amount) {
      json["amount"] = String(msg.amount);
    }
    if (
      msg.productStatus &&
      EarningProductStatusJSON.Enum._toInt(msg.productStatus)
    ) {
      json["productStatus"] = msg.productStatus;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotRedeemData,
    json: any,
  ): EarningSnapshotRedeemData {
    const _productId_ = json["productId"] ?? json["product_id"];
    if (_productId_) {
      msg.productId = protoscript.parseNumber(_productId_);
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = BigInt(_amount_);
    }
    const _productStatus_ = json["productStatus"] ?? json["product_status"];
    if (_productStatus_) {
      msg.productStatus = EarningProductStatus.Enum._fromInt(_productStatus_);
    }
    return msg;
  },
};

export const EarningSnapshotCancelQueueDataJSON = {
  /**
   * Serializes EarningSnapshotCancelQueueData to JSON.
   */
  encode: function (msg: PartialDeep<EarningSnapshotCancelQueueData>): string {
    return JSON.stringify(
      EarningSnapshotCancelQueueDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotCancelQueueData from JSON.
   */
  decode: function (json: string): EarningSnapshotCancelQueueData {
    return EarningSnapshotCancelQueueDataJSON._readMessage(
      EarningSnapshotCancelQueueDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotCancelQueueData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotCancelQueueData>,
  ): EarningSnapshotCancelQueueData {
    return {
      eventId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotCancelQueueData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotCancelQueueData,
    json: any,
  ): EarningSnapshotCancelQueueData {
    const _eventId_ = json["eventId"] ?? json["event_id"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const EarningSnapshotAdminInterestPaymentDataJSON = {
  /**
   * Serializes EarningSnapshotAdminInterestPaymentData to JSON.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminInterestPaymentData>,
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminInterestPaymentDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotAdminInterestPaymentData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminInterestPaymentData {
    return EarningSnapshotAdminInterestPaymentDataJSON._readMessage(
      EarningSnapshotAdminInterestPaymentDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotAdminInterestPaymentData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminInterestPaymentData>,
  ): EarningSnapshotAdminInterestPaymentData {
    return {
      productId: 0,
      productType: EarningProductType.Enum._fromInt(0),
      date: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminInterestPaymentData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json["productId"] = msg.productId;
    }
    if (
      msg.productType &&
      EarningProductTypeJSON.Enum._toInt(msg.productType)
    ) {
      json["productType"] = msg.productType;
    }
    if (msg.date) {
      json["date"] = msg.date;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminInterestPaymentData,
    json: any,
  ): EarningSnapshotAdminInterestPaymentData {
    const _productId_ = json["productId"] ?? json["product_id"];
    if (_productId_) {
      msg.productId = protoscript.parseNumber(_productId_);
    }
    const _productType_ = json["productType"] ?? json["product_type"];
    if (_productType_) {
      msg.productType = EarningProductType.Enum._fromInt(_productType_);
    }
    const _date_ = json["date"];
    if (_date_) {
      msg.date = _date_;
    }
    return msg;
  },
};

export const EarningSnapshotAdminProductExpandDataJSON = {
  /**
   * Serializes EarningSnapshotAdminProductExpandData to JSON.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminProductExpandData>,
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminProductExpandDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotAdminProductExpandData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminProductExpandData {
    return EarningSnapshotAdminProductExpandDataJSON._readMessage(
      EarningSnapshotAdminProductExpandDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotAdminProductExpandData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminProductExpandData>,
  ): EarningSnapshotAdminProductExpandData {
    return {
      productId: 0,
      amount: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminProductExpandData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json["productId"] = msg.productId;
    }
    if (msg.amount) {
      json["amount"] = String(msg.amount);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminProductExpandData,
    json: any,
  ): EarningSnapshotAdminProductExpandData {
    const _productId_ = json["productId"] ?? json["product_id"];
    if (_productId_) {
      msg.productId = protoscript.parseNumber(_productId_);
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = BigInt(_amount_);
    }
    return msg;
  },
};

export const EarningSnapshotAdminProductMergeExpansionDataJSON = {
  /**
   * Serializes EarningSnapshotAdminProductMergeExpansionData to JSON.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminProductMergeExpansionData>,
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminProductMergeExpansionDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotAdminProductMergeExpansionData from JSON.
   */
  decode: function (
    json: string,
  ): EarningSnapshotAdminProductMergeExpansionData {
    return EarningSnapshotAdminProductMergeExpansionDataJSON._readMessage(
      EarningSnapshotAdminProductMergeExpansionDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotAdminProductMergeExpansionData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminProductMergeExpansionData>,
  ): EarningSnapshotAdminProductMergeExpansionData {
    return {
      productId: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminProductMergeExpansionData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json["productId"] = msg.productId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminProductMergeExpansionData,
    json: any,
  ): EarningSnapshotAdminProductMergeExpansionData {
    const _productId_ = json["productId"] ?? json["product_id"];
    if (_productId_) {
      msg.productId = protoscript.parseNumber(_productId_);
    }
    return msg;
  },
};

export const EarningSnapshotAdminPledgeDataJSON = {
  /**
   * Serializes EarningSnapshotAdminPledgeData to JSON.
   */
  encode: function (msg: PartialDeep<EarningSnapshotAdminPledgeData>): string {
    return JSON.stringify(
      EarningSnapshotAdminPledgeDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotAdminPledgeData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminPledgeData {
    return EarningSnapshotAdminPledgeDataJSON._readMessage(
      EarningSnapshotAdminPledgeDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotAdminPledgeData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminPledgeData>,
  ): EarningSnapshotAdminPledgeData {
    return {
      userId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminPledgeData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminPledgeData,
    json: any,
  ): EarningSnapshotAdminPledgeData {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    return msg;
  },
};

export const EarningSnapshotAdminCancelPledgeDataJSON = {
  /**
   * Serializes EarningSnapshotAdminCancelPledgeData to JSON.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminCancelPledgeData>,
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminCancelPledgeDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotAdminCancelPledgeData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminCancelPledgeData {
    return EarningSnapshotAdminCancelPledgeDataJSON._readMessage(
      EarningSnapshotAdminCancelPledgeDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotAdminCancelPledgeData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminCancelPledgeData>,
  ): EarningSnapshotAdminCancelPledgeData {
    return {
      userId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminCancelPledgeData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminCancelPledgeData,
    json: any,
  ): EarningSnapshotAdminCancelPledgeData {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    return msg;
  },
};

export const EarningSnapshotAdminLegacyAssetMigrationDataJSON = {
  /**
   * Serializes EarningSnapshotAdminLegacyAssetMigrationData to JSON.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminLegacyAssetMigrationData>,
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminLegacyAssetMigrationDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotAdminLegacyAssetMigrationData from JSON.
   */
  decode: function (
    json: string,
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    return EarningSnapshotAdminLegacyAssetMigrationDataJSON._readMessage(
      EarningSnapshotAdminLegacyAssetMigrationDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotAdminLegacyAssetMigrationData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminLegacyAssetMigrationData>,
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    return {
      userId: "",
      productId: 0,
      amount: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminLegacyAssetMigrationData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.productId) {
      json["productId"] = msg.productId;
    }
    if (msg.amount) {
      json["amount"] = String(msg.amount);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminLegacyAssetMigrationData,
    json: any,
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _productId_ = json["productId"] ?? json["product_id"];
    if (_productId_) {
      msg.productId = protoscript.parseNumber(_productId_);
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = BigInt(_amount_);
    }
    return msg;
  },
};

export const EarningSnapshotAdminAuditApproveDataJSON = {
  /**
   * Serializes EarningSnapshotAdminAuditApproveData to JSON.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminAuditApproveData>,
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminAuditApproveDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotAdminAuditApproveData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminAuditApproveData {
    return EarningSnapshotAdminAuditApproveDataJSON._readMessage(
      EarningSnapshotAdminAuditApproveDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotAdminAuditApproveData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminAuditApproveData>,
  ): EarningSnapshotAdminAuditApproveData {
    return {
      traceId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminAuditApproveData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json["traceId"] = msg.traceId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAuditApproveData,
    json: any,
  ): EarningSnapshotAdminAuditApproveData {
    const _traceId_ = json["traceId"] ?? json["trace_id"];
    if (_traceId_) {
      msg.traceId = _traceId_;
    }
    return msg;
  },
};

export const EarningSnapshotAdminAuditRejectDataJSON = {
  /**
   * Serializes EarningSnapshotAdminAuditRejectData to JSON.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminAuditRejectData>,
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminAuditRejectDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotAdminAuditRejectData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminAuditRejectData {
    return EarningSnapshotAdminAuditRejectDataJSON._readMessage(
      EarningSnapshotAdminAuditRejectDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotAdminAuditRejectData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminAuditRejectData>,
  ): EarningSnapshotAdminAuditRejectData {
    return {
      traceId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminAuditRejectData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json["traceId"] = msg.traceId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAuditRejectData,
    json: any,
  ): EarningSnapshotAdminAuditRejectData {
    const _traceId_ = json["traceId"] ?? json["trace_id"];
    if (_traceId_) {
      msg.traceId = _traceId_;
    }
    return msg;
  },
};

export const EarningSnapshotAdminAutoReviseProductCapacityDataJSON = {
  /**
   * Serializes EarningSnapshotAdminAutoReviseProductCapacityData to JSON.
   */
  encode: function (
    msg: PartialDeep<EarningSnapshotAdminAutoReviseProductCapacityData>,
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminAutoReviseProductCapacityDataJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes EarningSnapshotAdminAutoReviseProductCapacityData from JSON.
   */
  decode: function (
    json: string,
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    return EarningSnapshotAdminAutoReviseProductCapacityDataJSON._readMessage(
      EarningSnapshotAdminAutoReviseProductCapacityDataJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningSnapshotAdminAutoReviseProductCapacityData with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<EarningSnapshotAdminAutoReviseProductCapacityData>,
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    return {
      productId: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningSnapshotAdminAutoReviseProductCapacityData>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json["productId"] = msg.productId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAutoReviseProductCapacityData,
    json: any,
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    const _productId_ = json["productId"] ?? json["product_id"];
    if (_productId_) {
      msg.productId = protoscript.parseNumber(_productId_);
    }
    return msg;
  },
};

export const ListAssetsRequestJSON = {
  /**
   * Serializes ListAssetsRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<ListAssetsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ListAssetsRequest from JSON.
   */
  decode: function (_json?: string): ListAssetsRequest {
    return {};
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAssetsRequest>): ListAssetsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListAssetsRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsRequest,
    _json: any,
  ): ListAssetsRequest {
    return msg;
  },
};

export const AssetJSON = {
  /**
   * Serializes Asset to JSON.
   */
  encode: function (msg: PartialDeep<Asset>): string {
    return JSON.stringify(AssetJSON._writeMessage(msg));
  },

  /**
   * Deserializes Asset from JSON.
   */
  decode: function (json: string): Asset {
    return AssetJSON._readMessage(AssetJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Asset>): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      priceUsd: "",
      priceBtc: "",
      order: 0,
      updatedAt: 0,
      chainLogo: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Asset>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.chainId) {
      json["chainId"] = msg.chainId;
    }
    if (msg.symbol) {
      json["symbol"] = msg.symbol;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.logo) {
      json["logo"] = msg.logo;
    }
    if (msg.priceUsd) {
      json["priceUsd"] = msg.priceUsd;
    }
    if (msg.priceBtc) {
      json["priceBtc"] = msg.priceBtc;
    }
    if (msg.order) {
      json["order"] = msg.order;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    if (msg.chainLogo) {
      json["chainLogo"] = msg.chainLogo;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, json: any): Asset {
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _chainId_ = json["chainId"] ?? json["chain_id"];
    if (_chainId_) {
      msg.chainId = _chainId_;
    }
    const _symbol_ = json["symbol"];
    if (_symbol_) {
      msg.symbol = _symbol_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _logo_ = json["logo"];
    if (_logo_) {
      msg.logo = _logo_;
    }
    const _priceUsd_ = json["priceUsd"] ?? json["price_usd"];
    if (_priceUsd_) {
      msg.priceUsd = _priceUsd_;
    }
    const _priceBtc_ = json["priceBtc"] ?? json["price_btc"];
    if (_priceBtc_) {
      msg.priceBtc = _priceBtc_;
    }
    const _order_ = json["order"];
    if (_order_) {
      msg.order = protoscript.parseNumber(_order_);
    }
    const _updatedAt_ = json["updatedAt"] ?? json["updated_at"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseNumber(_updatedAt_);
    }
    const _chainLogo_ = json["chainLogo"] ?? json["chain_logo"];
    if (_chainLogo_) {
      msg.chainLogo = _chainLogo_;
    }
    return msg;
  },
};

export const ListAssetsResponseJSON = {
  /**
   * Serializes ListAssetsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListAssetsResponse>): string {
    return JSON.stringify(ListAssetsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAssetsResponse from JSON.
   */
  decode: function (json: string): ListAssetsResponse {
    return ListAssetsResponseJSON._readMessage(
      ListAssetsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAssetsResponse>): ListAssetsResponse {
    return {
      assets: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAssetsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assets?.length) {
      json["assets"] = msg.assets.map(AssetJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    json: any,
  ): ListAssetsResponse {
    const _assets_ = json["assets"];
    if (_assets_) {
      for (const item of _assets_) {
        const m = AssetJSON.initialize();
        AssetJSON._readMessage(m, item);
        msg.assets.push(m);
      }
    }
    return msg;
  },
};

export const EarningProductJSON = {
  /**
   * Serializes EarningProduct to JSON.
   */
  encode: function (msg: PartialDeep<EarningProduct>): string {
    return JSON.stringify(EarningProductJSON._writeMessage(msg));
  },

  /**
   * Deserializes EarningProduct from JSON.
   */
  decode: function (json: string): EarningProduct {
    return EarningProductJSON._readMessage(
      EarningProductJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes EarningProduct with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EarningProduct>): EarningProduct {
    return {
      id: 0,
      name: "",
      description: "",
      assetId: "",
      interestRate: "",
      minAmountPerOrder: "",
      maxAmountPerOrder: "",
      capacity: "",
      sold: "",
      queuingBuyAmount: "",
      queuingRedeemAmount: "",
      version: "",
      createdAt: 0,
      type: EarningProductType.Enum._fromInt(0),
      status: EarningProductStatus.Enum._fromInt(0),
      runningNodes: 0,
      interestPaymentDuration: 0,
      expandingAmount: "",
      filledExpandingAmount: "",
      expectedExpandingEndAt: 0,
      userIsInWhitelist: false,
      descriptionRules: "",
      descriptionRiskDisclosure: "",
      enabledWhitelistLimit: false,
      precision: 0,
      buyDisabled: false,
      redeemDisabled: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<EarningProduct>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.interestRate) {
      json["interestRate"] = msg.interestRate;
    }
    if (msg.minAmountPerOrder) {
      json["minAmountPerOrder"] = msg.minAmountPerOrder;
    }
    if (msg.maxAmountPerOrder) {
      json["maxAmountPerOrder"] = msg.maxAmountPerOrder;
    }
    if (msg.capacity) {
      json["capacity"] = msg.capacity;
    }
    if (msg.sold) {
      json["sold"] = msg.sold;
    }
    if (msg.queuingBuyAmount) {
      json["queuingBuyAmount"] = msg.queuingBuyAmount;
    }
    if (msg.queuingRedeemAmount) {
      json["queuingRedeemAmount"] = msg.queuingRedeemAmount;
    }
    if (msg.version) {
      json["version"] = msg.version;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.type && EarningProductTypeJSON.Enum._toInt(msg.type)) {
      json["type"] = msg.type;
    }
    if (msg.status && EarningProductStatusJSON.Enum._toInt(msg.status)) {
      json["status"] = msg.status;
    }
    if (msg.runningNodes) {
      json["runningNodes"] = msg.runningNodes;
    }
    if (msg.interestPaymentDuration) {
      json["interestPaymentDuration"] = msg.interestPaymentDuration;
    }
    if (msg.expandingAmount) {
      json["expandingAmount"] = msg.expandingAmount;
    }
    if (msg.filledExpandingAmount) {
      json["filledExpandingAmount"] = msg.filledExpandingAmount;
    }
    if (msg.expectedExpandingEndAt) {
      json["expectedExpandingEndAt"] = msg.expectedExpandingEndAt;
    }
    if (msg.userIsInWhitelist) {
      json["userIsInWhitelist"] = msg.userIsInWhitelist;
    }
    if (msg.descriptionRules) {
      json["descriptionRules"] = msg.descriptionRules;
    }
    if (msg.descriptionRiskDisclosure) {
      json["descriptionRiskDisclosure"] = msg.descriptionRiskDisclosure;
    }
    if (msg.enabledWhitelistLimit) {
      json["enabledWhitelistLimit"] = msg.enabledWhitelistLimit;
    }
    if (msg.precision) {
      json["precision"] = msg.precision;
    }
    if (msg.buyDisabled) {
      json["buyDisabled"] = msg.buyDisabled;
    }
    if (msg.redeemDisabled) {
      json["redeemDisabled"] = msg.redeemDisabled;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: EarningProduct, json: any): EarningProduct {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = protoscript.parseNumber(_id_);
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _interestRate_ = json["interestRate"] ?? json["interest_rate"];
    if (_interestRate_) {
      msg.interestRate = _interestRate_;
    }
    const _minAmountPerOrder_ =
      json["minAmountPerOrder"] ?? json["min_amount_per_order"];
    if (_minAmountPerOrder_) {
      msg.minAmountPerOrder = _minAmountPerOrder_;
    }
    const _maxAmountPerOrder_ =
      json["maxAmountPerOrder"] ?? json["max_amount_per_order"];
    if (_maxAmountPerOrder_) {
      msg.maxAmountPerOrder = _maxAmountPerOrder_;
    }
    const _capacity_ = json["capacity"];
    if (_capacity_) {
      msg.capacity = _capacity_;
    }
    const _sold_ = json["sold"];
    if (_sold_) {
      msg.sold = _sold_;
    }
    const _queuingBuyAmount_ =
      json["queuingBuyAmount"] ?? json["queuing_buy_amount"];
    if (_queuingBuyAmount_) {
      msg.queuingBuyAmount = _queuingBuyAmount_;
    }
    const _queuingRedeemAmount_ =
      json["queuingRedeemAmount"] ?? json["queuing_redeem_amount"];
    if (_queuingRedeemAmount_) {
      msg.queuingRedeemAmount = _queuingRedeemAmount_;
    }
    const _version_ = json["version"];
    if (_version_) {
      msg.version = _version_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseNumber(_createdAt_);
    }
    const _type_ = json["type"];
    if (_type_) {
      msg.type = EarningProductType.Enum._fromInt(_type_);
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = EarningProductStatus.Enum._fromInt(_status_);
    }
    const _runningNodes_ = json["runningNodes"] ?? json["running_nodes"];
    if (_runningNodes_) {
      msg.runningNodes = protoscript.parseNumber(_runningNodes_);
    }
    const _interestPaymentDuration_ =
      json["interestPaymentDuration"] ?? json["interest_payment_duration"];
    if (_interestPaymentDuration_) {
      msg.interestPaymentDuration = protoscript.parseNumber(
        _interestPaymentDuration_,
      );
    }
    const _expandingAmount_ =
      json["expandingAmount"] ?? json["expanding_amount"];
    if (_expandingAmount_) {
      msg.expandingAmount = _expandingAmount_;
    }
    const _filledExpandingAmount_ =
      json["filledExpandingAmount"] ?? json["filled_expanding_amount"];
    if (_filledExpandingAmount_) {
      msg.filledExpandingAmount = _filledExpandingAmount_;
    }
    const _expectedExpandingEndAt_ =
      json["expectedExpandingEndAt"] ?? json["expected_expanding_end_at"];
    if (_expectedExpandingEndAt_) {
      msg.expectedExpandingEndAt = protoscript.parseNumber(
        _expectedExpandingEndAt_,
      );
    }
    const _userIsInWhitelist_ =
      json["userIsInWhitelist"] ?? json["user_is_in_whitelist"];
    if (_userIsInWhitelist_) {
      msg.userIsInWhitelist = _userIsInWhitelist_;
    }
    const _descriptionRules_ =
      json["descriptionRules"] ?? json["description_rules"];
    if (_descriptionRules_) {
      msg.descriptionRules = _descriptionRules_;
    }
    const _descriptionRiskDisclosure_ =
      json["descriptionRiskDisclosure"] ?? json["description_risk_disclosure"];
    if (_descriptionRiskDisclosure_) {
      msg.descriptionRiskDisclosure = _descriptionRiskDisclosure_;
    }
    const _enabledWhitelistLimit_ =
      json["enabledWhitelistLimit"] ?? json["enabled_whitelist_limit"];
    if (_enabledWhitelistLimit_) {
      msg.enabledWhitelistLimit = _enabledWhitelistLimit_;
    }
    const _precision_ = json["precision"];
    if (_precision_) {
      msg.precision = protoscript.parseNumber(_precision_);
    }
    const _buyDisabled_ = json["buyDisabled"] ?? json["buy_disabled"];
    if (_buyDisabled_) {
      msg.buyDisabled = _buyDisabled_;
    }
    const _redeemDisabled_ = json["redeemDisabled"] ?? json["redeem_disabled"];
    if (_redeemDisabled_) {
      msg.redeemDisabled = _redeemDisabled_;
    }
    return msg;
  },
};

export const GetEarningProductRequestJSON = {
  /**
   * Serializes GetEarningProductRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetEarningProductRequest>): string {
    return JSON.stringify(GetEarningProductRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetEarningProductRequest from JSON.
   */
  decode: function (json: string): GetEarningProductRequest {
    return GetEarningProductRequestJSON._readMessage(
      GetEarningProductRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetEarningProductRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetEarningProductRequest>,
  ): GetEarningProductRequest {
    return {
      id: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetEarningProductRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEarningProductRequest,
    json: any,
  ): GetEarningProductRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = protoscript.parseNumber(_id_);
    }
    return msg;
  },
};

export const GetEarningProductResponseJSON = {
  /**
   * Serializes GetEarningProductResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetEarningProductResponse>): string {
    return JSON.stringify(GetEarningProductResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetEarningProductResponse from JSON.
   */
  decode: function (json: string): GetEarningProductResponse {
    return GetEarningProductResponseJSON._readMessage(
      GetEarningProductResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetEarningProductResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetEarningProductResponse>,
  ): GetEarningProductResponse {
    return {
      product: EarningProductJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetEarningProductResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.product) {
      const _product_ = EarningProductJSON._writeMessage(msg.product);
      if (Object.keys(_product_).length > 0) {
        json["product"] = _product_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEarningProductResponse,
    json: any,
  ): GetEarningProductResponse {
    const _product_ = json["product"];
    if (_product_) {
      EarningProductJSON._readMessage(msg.product, _product_);
    }
    return msg;
  },
};

export const ListEarningProductsRequestJSON = {
  /**
   * Serializes ListEarningProductsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListEarningProductsRequest>): string {
    return JSON.stringify(ListEarningProductsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListEarningProductsRequest from JSON.
   */
  decode: function (json: string): ListEarningProductsRequest {
    return ListEarningProductsRequestJSON._readMessage(
      ListEarningProductsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListEarningProductsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListEarningProductsRequest>,
  ): ListEarningProductsRequest {
    return {
      type: EarningProductType.Enum._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListEarningProductsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.type && EarningProductTypeJSON.Enum._toInt(msg.type)) {
      json["type"] = msg.type;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEarningProductsRequest,
    json: any,
  ): ListEarningProductsRequest {
    const _type_ = json["type"];
    if (_type_) {
      msg.type = EarningProductType.Enum._fromInt(_type_);
    }
    return msg;
  },
};

export const ListEarningProductsResponseJSON = {
  /**
   * Serializes ListEarningProductsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListEarningProductsResponse>): string {
    return JSON.stringify(ListEarningProductsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListEarningProductsResponse from JSON.
   */
  decode: function (json: string): ListEarningProductsResponse {
    return ListEarningProductsResponseJSON._readMessage(
      ListEarningProductsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListEarningProductsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListEarningProductsResponse>,
  ): ListEarningProductsResponse {
    return {
      products: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListEarningProductsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.products?.length) {
      json["products"] = msg.products.map(EarningProductJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEarningProductsResponse,
    json: any,
  ): ListEarningProductsResponse {
    const _products_ = json["products"];
    if (_products_) {
      for (const item of _products_) {
        const m = EarningProductJSON.initialize();
        EarningProductJSON._readMessage(m, item);
        msg.products.push(m);
      }
    }
    return msg;
  },
};

export const UserEarningProductJSON = {
  /**
   * Serializes UserEarningProduct to JSON.
   */
  encode: function (msg: PartialDeep<UserEarningProduct>): string {
    return JSON.stringify(UserEarningProductJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserEarningProduct from JSON.
   */
  decode: function (json: string): UserEarningProduct {
    return UserEarningProductJSON._readMessage(
      UserEarningProductJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UserEarningProduct with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserEarningProduct>): UserEarningProduct {
    return {
      id: 0,
      userId: "",
      earningProductId: 0,
      amount: "",
      queuingBuyAmount: "",
      queuingRedeemAmount: "",
      version: "",
      createdAt: 0,
      updatedAt: 0,
      totalRevenue: "",
      pledged: false,
      expandBuyAmount: "",
      buyDisabled: false,
      redeemDisabled: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserEarningProduct>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.earningProductId) {
      json["earningProductId"] = msg.earningProductId;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.queuingBuyAmount) {
      json["queuingBuyAmount"] = msg.queuingBuyAmount;
    }
    if (msg.queuingRedeemAmount) {
      json["queuingRedeemAmount"] = msg.queuingRedeemAmount;
    }
    if (msg.version) {
      json["version"] = msg.version;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    if (msg.totalRevenue) {
      json["totalRevenue"] = msg.totalRevenue;
    }
    if (msg.pledged) {
      json["pledged"] = msg.pledged;
    }
    if (msg.expandBuyAmount) {
      json["expandBuyAmount"] = msg.expandBuyAmount;
    }
    if (msg.buyDisabled) {
      json["buyDisabled"] = msg.buyDisabled;
    }
    if (msg.redeemDisabled) {
      json["redeemDisabled"] = msg.redeemDisabled;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserEarningProduct,
    json: any,
  ): UserEarningProduct {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = protoscript.parseNumber(_id_);
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _earningProductId_ =
      json["earningProductId"] ?? json["earning_product_id"];
    if (_earningProductId_) {
      msg.earningProductId = protoscript.parseNumber(_earningProductId_);
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _queuingBuyAmount_ =
      json["queuingBuyAmount"] ?? json["queuing_buy_amount"];
    if (_queuingBuyAmount_) {
      msg.queuingBuyAmount = _queuingBuyAmount_;
    }
    const _queuingRedeemAmount_ =
      json["queuingRedeemAmount"] ?? json["queuing_redeem_amount"];
    if (_queuingRedeemAmount_) {
      msg.queuingRedeemAmount = _queuingRedeemAmount_;
    }
    const _version_ = json["version"];
    if (_version_) {
      msg.version = _version_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseNumber(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"] ?? json["updated_at"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseNumber(_updatedAt_);
    }
    const _totalRevenue_ = json["totalRevenue"] ?? json["total_revenue"];
    if (_totalRevenue_) {
      msg.totalRevenue = _totalRevenue_;
    }
    const _pledged_ = json["pledged"];
    if (_pledged_) {
      msg.pledged = _pledged_;
    }
    const _expandBuyAmount_ =
      json["expandBuyAmount"] ?? json["expand_buy_amount"];
    if (_expandBuyAmount_) {
      msg.expandBuyAmount = _expandBuyAmount_;
    }
    const _buyDisabled_ = json["buyDisabled"] ?? json["buy_disabled"];
    if (_buyDisabled_) {
      msg.buyDisabled = _buyDisabled_;
    }
    const _redeemDisabled_ = json["redeemDisabled"] ?? json["redeem_disabled"];
    if (_redeemDisabled_) {
      msg.redeemDisabled = _redeemDisabled_;
    }
    return msg;
  },
};

export const ListMyEarningProductsRequestJSON = {
  /**
   * Serializes ListMyEarningProductsRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<ListMyEarningProductsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ListMyEarningProductsRequest from JSON.
   */
  decode: function (_json?: string): ListMyEarningProductsRequest {
    return {};
  },

  /**
   * Initializes ListMyEarningProductsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMyEarningProductsRequest>,
  ): ListMyEarningProductsRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ListMyEarningProductsRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMyEarningProductsRequest,
    _json: any,
  ): ListMyEarningProductsRequest {
    return msg;
  },
};

export const ListMyEarningProductsResponseJSON = {
  /**
   * Serializes ListMyEarningProductsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListMyEarningProductsResponse>): string {
    return JSON.stringify(ListMyEarningProductsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListMyEarningProductsResponse from JSON.
   */
  decode: function (json: string): ListMyEarningProductsResponse {
    return ListMyEarningProductsResponseJSON._readMessage(
      ListMyEarningProductsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListMyEarningProductsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMyEarningProductsResponse>,
  ): ListMyEarningProductsResponse {
    return {
      products: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMyEarningProductsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.products?.length) {
      json["products"] = msg.products.map(UserEarningProductJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMyEarningProductsResponse,
    json: any,
  ): ListMyEarningProductsResponse {
    const _products_ = json["products"];
    if (_products_) {
      for (const item of _products_) {
        const m = UserEarningProductJSON.initialize();
        UserEarningProductJSON._readMessage(m, item);
        msg.products.push(m);
      }
    }
    return msg;
  },
};

export const GetMyEarningProductRequestJSON = {
  /**
   * Serializes GetMyEarningProductRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetMyEarningProductRequest>): string {
    return JSON.stringify(GetMyEarningProductRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMyEarningProductRequest from JSON.
   */
  decode: function (json: string): GetMyEarningProductRequest {
    return GetMyEarningProductRequestJSON._readMessage(
      GetMyEarningProductRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetMyEarningProductRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetMyEarningProductRequest>,
  ): GetMyEarningProductRequest {
    return {
      id: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetMyEarningProductRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMyEarningProductRequest,
    json: any,
  ): GetMyEarningProductRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = protoscript.parseNumber(_id_);
    }
    return msg;
  },
};

export const GetMyEarningProductResponseJSON = {
  /**
   * Serializes GetMyEarningProductResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetMyEarningProductResponse>): string {
    return JSON.stringify(GetMyEarningProductResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMyEarningProductResponse from JSON.
   */
  decode: function (json: string): GetMyEarningProductResponse {
    return GetMyEarningProductResponseJSON._readMessage(
      GetMyEarningProductResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetMyEarningProductResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetMyEarningProductResponse>,
  ): GetMyEarningProductResponse {
    return {
      product: UserEarningProductJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetMyEarningProductResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.product) {
      const _product_ = UserEarningProductJSON._writeMessage(msg.product);
      if (Object.keys(_product_).length > 0) {
        json["product"] = _product_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMyEarningProductResponse,
    json: any,
  ): GetMyEarningProductResponse {
    const _product_ = json["product"];
    if (_product_) {
      UserEarningProductJSON._readMessage(msg.product, _product_);
    }
    return msg;
  },
};

export const GetEventRequestJSON = {
  /**
   * Serializes GetEventRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetEventRequest>): string {
    return JSON.stringify(GetEventRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetEventRequest from JSON.
   */
  decode: function (json: string): GetEventRequest {
    return GetEventRequestJSON._readMessage(
      GetEventRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetEventRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetEventRequest>): GetEventRequest {
    return {
      followId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetEventRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.followId) {
      json["followId"] = msg.followId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetEventRequest, json: any): GetEventRequest {
    const _followId_ = json["followId"] ?? json["follow_id"];
    if (_followId_) {
      msg.followId = _followId_;
    }
    return msg;
  },
};

export const EventJSON = {
  /**
   * Serializes Event to JSON.
   */
  encode: function (msg: PartialDeep<Event>): string {
    return JSON.stringify(EventJSON._writeMessage(msg));
  },

  /**
   * Deserializes Event from JSON.
   */
  decode: function (json: string): Event {
    return EventJSON._readMessage(EventJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Event with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Event>): Event {
    return {
      id: "",
      userId: "",
      action: EventAction.Enum._fromInt(0),
      productId: 0,
      assetId: "",
      amount: "",
      filledAmount: "",
      status: EventStatus.Enum._fromInt(0),
      error: EventError.Enum._fromInt(0),
      followId: "",
      createdAt: 0,
      queuingAheadAmount: "",
      interestPaymentDate: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Event>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.action && EventActionJSON.Enum._toInt(msg.action)) {
      json["action"] = msg.action;
    }
    if (msg.productId) {
      json["productId"] = msg.productId;
    }
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.filledAmount) {
      json["filledAmount"] = msg.filledAmount;
    }
    if (msg.status && EventStatusJSON.Enum._toInt(msg.status)) {
      json["status"] = msg.status;
    }
    if (msg.error && EventErrorJSON.Enum._toInt(msg.error)) {
      json["error"] = msg.error;
    }
    if (msg.followId) {
      json["followId"] = msg.followId;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.queuingAheadAmount) {
      json["queuingAheadAmount"] = msg.queuingAheadAmount;
    }
    if (msg.interestPaymentDate) {
      json["interestPaymentDate"] = msg.interestPaymentDate;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Event, json: any): Event {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _action_ = json["action"];
    if (_action_) {
      msg.action = EventAction.Enum._fromInt(_action_);
    }
    const _productId_ = json["productId"] ?? json["product_id"];
    if (_productId_) {
      msg.productId = protoscript.parseNumber(_productId_);
    }
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _filledAmount_ = json["filledAmount"] ?? json["filled_amount"];
    if (_filledAmount_) {
      msg.filledAmount = _filledAmount_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = EventStatus.Enum._fromInt(_status_);
    }
    const _error_ = json["error"];
    if (_error_) {
      msg.error = EventError.Enum._fromInt(_error_);
    }
    const _followId_ = json["followId"] ?? json["follow_id"];
    if (_followId_) {
      msg.followId = _followId_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseNumber(_createdAt_);
    }
    const _queuingAheadAmount_ =
      json["queuingAheadAmount"] ?? json["queuing_ahead_amount"];
    if (_queuingAheadAmount_) {
      msg.queuingAheadAmount = _queuingAheadAmount_;
    }
    const _interestPaymentDate_ =
      json["interestPaymentDate"] ?? json["interest_payment_date"];
    if (_interestPaymentDate_) {
      msg.interestPaymentDate = _interestPaymentDate_;
    }
    return msg;
  },
};

export const GetEventResponseJSON = {
  /**
   * Serializes GetEventResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetEventResponse>): string {
    return JSON.stringify(GetEventResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetEventResponse from JSON.
   */
  decode: function (json: string): GetEventResponse {
    return GetEventResponseJSON._readMessage(
      GetEventResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetEventResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetEventResponse>): GetEventResponse {
    return {
      event: EventJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetEventResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.event) {
      const _event_ = EventJSON._writeMessage(msg.event);
      if (Object.keys(_event_).length > 0) {
        json["event"] = _event_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetEventResponse, json: any): GetEventResponse {
    const _event_ = json["event"];
    if (_event_) {
      EventJSON._readMessage(msg.event, _event_);
    }
    return msg;
  },
};

export const ListEventsRequestJSON = {
  /**
   * Serializes ListEventsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListEventsRequest>): string {
    return JSON.stringify(ListEventsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListEventsRequest from JSON.
   */
  decode: function (json: string): ListEventsRequest {
    return ListEventsRequestJSON._readMessage(
      ListEventsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListEventsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListEventsRequest>): ListEventsRequest {
    return {
      earningProductId: 0,
      actions: [],
      statuses: [],
      offset: 0,
      limit: 0,
      startAt: 0,
      endAt: 0,
      productType: EarningProductType.Enum._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListEventsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.earningProductId) {
      json["earningProductId"] = msg.earningProductId;
    }
    if (msg.actions?.length) {
      json["actions"] = msg.actions;
    }
    if (msg.statuses?.length) {
      json["statuses"] = msg.statuses;
    }
    if (msg.offset) {
      json["offset"] = msg.offset;
    }
    if (msg.limit) {
      json["limit"] = msg.limit;
    }
    if (msg.startAt) {
      json["startAt"] = msg.startAt;
    }
    if (msg.endAt) {
      json["endAt"] = msg.endAt;
    }
    if (
      msg.productType &&
      EarningProductTypeJSON.Enum._toInt(msg.productType)
    ) {
      json["productType"] = msg.productType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEventsRequest,
    json: any,
  ): ListEventsRequest {
    const _earningProductId_ =
      json["earningProductId"] ?? json["earning_product_id"];
    if (_earningProductId_) {
      msg.earningProductId = protoscript.parseNumber(_earningProductId_);
    }
    const _actions_ = json["actions"];
    if (_actions_) {
      msg.actions = _actions_.map(EventAction.Enum._fromInt);
    }
    const _statuses_ = json["statuses"];
    if (_statuses_) {
      msg.statuses = _statuses_.map(EventStatus.Enum._fromInt);
    }
    const _offset_ = json["offset"];
    if (_offset_) {
      msg.offset = protoscript.parseNumber(_offset_);
    }
    const _limit_ = json["limit"];
    if (_limit_) {
      msg.limit = protoscript.parseNumber(_limit_);
    }
    const _startAt_ = json["startAt"] ?? json["start_at"];
    if (_startAt_) {
      msg.startAt = protoscript.parseNumber(_startAt_);
    }
    const _endAt_ = json["endAt"] ?? json["end_at"];
    if (_endAt_) {
      msg.endAt = protoscript.parseNumber(_endAt_);
    }
    const _productType_ = json["productType"] ?? json["product_type"];
    if (_productType_) {
      msg.productType = EarningProductType.Enum._fromInt(_productType_);
    }
    return msg;
  },
};

export const ListEventsResponseJSON = {
  /**
   * Serializes ListEventsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListEventsResponse>): string {
    return JSON.stringify(ListEventsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListEventsResponse from JSON.
   */
  decode: function (json: string): ListEventsResponse {
    return ListEventsResponseJSON._readMessage(
      ListEventsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListEventsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListEventsResponse>): ListEventsResponse {
    return {
      events: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListEventsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.events?.length) {
      json["events"] = msg.events.map(EventJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEventsResponse,
    json: any,
  ): ListEventsResponse {
    const _events_ = json["events"];
    if (_events_) {
      for (const item of _events_) {
        const m = EventJSON.initialize();
        EventJSON._readMessage(m, item);
        msg.events.push(m);
      }
    }
    return msg;
  },
};

export const AuditJSON = {
  /**
   * Serializes Audit to JSON.
   */
  encode: function (msg: PartialDeep<Audit>): string {
    return JSON.stringify(AuditJSON._writeMessage(msg));
  },

  /**
   * Deserializes Audit from JSON.
   */
  decode: function (json: string): Audit {
    return AuditJSON._readMessage(AuditJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Audit with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Audit>): Audit {
    return {
      id: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      assetId: "",
      amount: "",
      userId: "",
      status: Audit.Status._fromInt(0),
      memo: "",
      reviewedBy: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Audit>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.assetId) {
      json["assetId"] = msg.assetId;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.status && AuditJSON.Status._toInt(msg.status)) {
      json["status"] = msg.status;
    }
    if (msg.memo) {
      json["memo"] = msg.memo;
    }
    if (msg.reviewedBy) {
      json["reviewedBy"] = msg.reviewedBy;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Audit, json: any): Audit {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _assetId_ = json["assetId"] ?? json["asset_id"];
    if (_assetId_) {
      msg.assetId = _assetId_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = Audit.Status._fromInt(_status_);
    }
    const _memo_ = json["memo"];
    if (_memo_) {
      msg.memo = _memo_;
    }
    const _reviewedBy_ = json["reviewedBy"] ?? json["reviewed_by"];
    if (_reviewedBy_) {
      msg.reviewedBy = _reviewedBy_;
    }
    return msg;
  },

  Status: {
    NOT_SET: "NOT_SET",
    REJECTED: "REJECTED",
    APPROVED: "APPROVED",
    /**
     * @private
     */
    _fromInt: function (i: number): Audit.Status {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "REJECTED";
        }
        case 2: {
          return "APPROVED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Audit.Status;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Audit.Status): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "REJECTED": {
          return 1;
        }
        case "APPROVED": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const FindAuditRequestJSON = {
  /**
   * Serializes FindAuditRequest to JSON.
   */
  encode: function (msg: PartialDeep<FindAuditRequest>): string {
    return JSON.stringify(FindAuditRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindAuditRequest from JSON.
   */
  decode: function (json: string): FindAuditRequest {
    return FindAuditRequestJSON._readMessage(
      FindAuditRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindAuditRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindAuditRequest>): FindAuditRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindAuditRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FindAuditRequest, json: any): FindAuditRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const FindAuditResponseJSON = {
  /**
   * Serializes FindAuditResponse to JSON.
   */
  encode: function (msg: PartialDeep<FindAuditResponse>): string {
    return JSON.stringify(FindAuditResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindAuditResponse from JSON.
   */
  decode: function (json: string): FindAuditResponse {
    return FindAuditResponseJSON._readMessage(
      FindAuditResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FindAuditResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FindAuditResponse>): FindAuditResponse {
    return {
      audit: AuditJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FindAuditResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.audit) {
      const _audit_ = AuditJSON._writeMessage(msg.audit);
      if (Object.keys(_audit_).length > 0) {
        json["audit"] = _audit_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindAuditResponse,
    json: any,
  ): FindAuditResponse {
    const _audit_ = json["audit"];
    if (_audit_) {
      AuditJSON._readMessage(msg.audit, _audit_);
    }
    return msg;
  },
};

export const ListAuditsRequestJSON = {
  /**
   * Serializes ListAuditsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListAuditsRequest>): string {
    return JSON.stringify(ListAuditsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAuditsRequest from JSON.
   */
  decode: function (json: string): ListAuditsRequest {
    return ListAuditsRequestJSON._readMessage(
      ListAuditsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListAuditsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAuditsRequest>): ListAuditsRequest {
    return {
      offset: protoscript.TimestampJSON.initialize(),
      limit: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAuditsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.offset && msg.offset.seconds && msg.offset.nanos) {
      json["offset"] = protoscript.serializeTimestamp(msg.offset);
    }
    if (msg.limit) {
      json["limit"] = String(msg.limit);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsRequest,
    json: any,
  ): ListAuditsRequest {
    const _offset_ = json["offset"];
    if (_offset_) {
      msg.offset = protoscript.parseTimestamp(_offset_);
    }
    const _limit_ = json["limit"];
    if (_limit_) {
      msg.limit = BigInt(_limit_);
    }
    return msg;
  },
};

export const ListAuditsResponseJSON = {
  /**
   * Serializes ListAuditsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListAuditsResponse>): string {
    return JSON.stringify(ListAuditsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAuditsResponse from JSON.
   */
  decode: function (json: string): ListAuditsResponse {
    return ListAuditsResponseJSON._readMessage(
      ListAuditsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListAuditsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListAuditsResponse>): ListAuditsResponse {
    return {
      audits: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListAuditsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.audits?.length) {
      json["audits"] = msg.audits.map(AuditJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsResponse,
    json: any,
  ): ListAuditsResponse {
    const _audits_ = json["audits"];
    if (_audits_) {
      for (const item of _audits_) {
        const m = AuditJSON.initialize();
        AuditJSON._readMessage(m, item);
        msg.audits.push(m);
      }
    }
    return msg;
  },
};
