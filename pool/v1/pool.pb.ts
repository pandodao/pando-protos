// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: pool/v1/pool.proto
/* eslint-disable */

import type { ByteSource, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";

import { Timestamp, TimestampJSON } from "../../google/protobuf/timestamp.pb";

//========================================//
//      PoolService Protobuf Client       //
//========================================//

export async function ListAssets(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration
): Promise<ListAssetsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListAssets",
    ListAssetsRequest.encode(listAssetsRequest),
    config
  );
  return ListAssetsResponse.decode(response);
}

export async function GetEvent(
  getEventRequest: GetEventRequest,
  config?: ClientConfiguration
): Promise<GetEventResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/GetEvent",
    GetEventRequest.encode(getEventRequest),
    config
  );
  return GetEventResponse.decode(response);
}

export async function ListEvents(
  listEventsRequest: ListEventsRequest,
  config?: ClientConfiguration
): Promise<ListEventsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListEvents",
    ListEventsRequest.encode(listEventsRequest),
    config
  );
  return ListEventsResponse.decode(response);
}

export async function GetEarningProduct(
  getEarningProductRequest: GetEarningProductRequest,
  config?: ClientConfiguration
): Promise<GetEarningProductResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/GetEarningProduct",
    GetEarningProductRequest.encode(getEarningProductRequest),
    config
  );
  return GetEarningProductResponse.decode(response);
}

export async function ListEarningProducts(
  listEarningProductsRequest: ListEarningProductsRequest,
  config?: ClientConfiguration
): Promise<ListEarningProductsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListEarningProducts",
    ListEarningProductsRequest.encode(listEarningProductsRequest),
    config
  );
  return ListEarningProductsResponse.decode(response);
}

export async function ListMyEarningProducts(
  listMyEarningProductsRequest: ListMyEarningProductsRequest,
  config?: ClientConfiguration
): Promise<ListMyEarningProductsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListMyEarningProducts",
    ListMyEarningProductsRequest.encode(listMyEarningProductsRequest),
    config
  );
  return ListMyEarningProductsResponse.decode(response);
}

export async function GetMyEarningProduct(
  getMyEarningProductRequest: GetMyEarningProductRequest,
  config?: ClientConfiguration
): Promise<GetMyEarningProductResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/GetMyEarningProduct",
    GetMyEarningProductRequest.encode(getMyEarningProductRequest),
    config
  );
  return GetMyEarningProductResponse.decode(response);
}

/**
 * by admins
 */
export async function GetUserVaults(
  getUserVaultsRequest: GetUserVaultsRequest,
  config?: ClientConfiguration
): Promise<GetUserVaultsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/GetUserVaults",
    GetUserVaultsRequest.encode(getUserVaultsRequest),
    config
  );
  return GetUserVaultsResponse.decode(response);
}

export async function GetUserEvent(
  getUserEventRequest: GetUserEventRequest,
  config?: ClientConfiguration
): Promise<GetUserEventResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/GetUserEvent",
    GetUserEventRequest.encode(getUserEventRequest),
    config
  );
  return GetUserEventResponse.decode(response);
}

/**
 * audit
 */
export async function FindAudit(
  findAuditRequest: FindAuditRequest,
  config?: ClientConfiguration
): Promise<FindAuditResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/FindAudit",
    FindAuditRequest.encode(findAuditRequest),
    config
  );
  return FindAuditResponse.decode(response);
}

export async function ListAudits(
  listAuditsRequest: ListAuditsRequest,
  config?: ClientConfiguration
): Promise<ListAuditsResponse> {
  const response = await PBrequest(
    "/pool.v1.PoolService/ListAudits",
    ListAuditsRequest.encode(listAuditsRequest),
    config
  );
  return ListAuditsResponse.decode(response);
}

//========================================//
//        PoolService JSON Client         //
//========================================//

export async function ListAssetsJSON(
  listAssetsRequest: ListAssetsRequest,
  config?: ClientConfiguration
): Promise<ListAssetsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListAssets",
    ListAssetsRequestJSON.encode(listAssetsRequest),
    config
  );
  return ListAssetsResponseJSON.decode(response);
}

export async function GetEventJSON(
  getEventRequest: GetEventRequest,
  config?: ClientConfiguration
): Promise<GetEventResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/GetEvent",
    GetEventRequestJSON.encode(getEventRequest),
    config
  );
  return GetEventResponseJSON.decode(response);
}

export async function ListEventsJSON(
  listEventsRequest: ListEventsRequest,
  config?: ClientConfiguration
): Promise<ListEventsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListEvents",
    ListEventsRequestJSON.encode(listEventsRequest),
    config
  );
  return ListEventsResponseJSON.decode(response);
}

export async function GetEarningProductJSON(
  getEarningProductRequest: GetEarningProductRequest,
  config?: ClientConfiguration
): Promise<GetEarningProductResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/GetEarningProduct",
    GetEarningProductRequestJSON.encode(getEarningProductRequest),
    config
  );
  return GetEarningProductResponseJSON.decode(response);
}

export async function ListEarningProductsJSON(
  listEarningProductsRequest: ListEarningProductsRequest,
  config?: ClientConfiguration
): Promise<ListEarningProductsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListEarningProducts",
    ListEarningProductsRequestJSON.encode(listEarningProductsRequest),
    config
  );
  return ListEarningProductsResponseJSON.decode(response);
}

export async function ListMyEarningProductsJSON(
  listMyEarningProductsRequest: ListMyEarningProductsRequest,
  config?: ClientConfiguration
): Promise<ListMyEarningProductsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListMyEarningProducts",
    ListMyEarningProductsRequestJSON.encode(listMyEarningProductsRequest),
    config
  );
  return ListMyEarningProductsResponseJSON.decode(response);
}

export async function GetMyEarningProductJSON(
  getMyEarningProductRequest: GetMyEarningProductRequest,
  config?: ClientConfiguration
): Promise<GetMyEarningProductResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/GetMyEarningProduct",
    GetMyEarningProductRequestJSON.encode(getMyEarningProductRequest),
    config
  );
  return GetMyEarningProductResponseJSON.decode(response);
}

/**
 * by admins
 */
export async function GetUserVaultsJSON(
  getUserVaultsRequest: GetUserVaultsRequest,
  config?: ClientConfiguration
): Promise<GetUserVaultsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/GetUserVaults",
    GetUserVaultsRequestJSON.encode(getUserVaultsRequest),
    config
  );
  return GetUserVaultsResponseJSON.decode(response);
}

export async function GetUserEventJSON(
  getUserEventRequest: GetUserEventRequest,
  config?: ClientConfiguration
): Promise<GetUserEventResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/GetUserEvent",
    GetUserEventRequestJSON.encode(getUserEventRequest),
    config
  );
  return GetUserEventResponseJSON.decode(response);
}

/**
 * audit
 */
export async function FindAuditJSON(
  findAuditRequest: FindAuditRequest,
  config?: ClientConfiguration
): Promise<FindAuditResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/FindAudit",
    FindAuditRequestJSON.encode(findAuditRequest),
    config
  );
  return FindAuditResponseJSON.decode(response);
}

export async function ListAuditsJSON(
  listAuditsRequest: ListAuditsRequest,
  config?: ClientConfiguration
): Promise<ListAuditsResponse> {
  const response = await JSONrequest(
    "/pool.v1.PoolService/ListAudits",
    ListAuditsRequestJSON.encode(listAuditsRequest),
    config
  );
  return ListAuditsResponseJSON.decode(response);
}

//========================================//
//              PoolService               //
//========================================//

export interface PoolService<Context = unknown> {
  ListAssets: (
    listAssetsRequest: ListAssetsRequest,
    context: Context
  ) => Promise<ListAssetsResponse> | ListAssetsResponse;
  GetEvent: (
    getEventRequest: GetEventRequest,
    context: Context
  ) => Promise<GetEventResponse> | GetEventResponse;
  ListEvents: (
    listEventsRequest: ListEventsRequest,
    context: Context
  ) => Promise<ListEventsResponse> | ListEventsResponse;
  GetEarningProduct: (
    getEarningProductRequest: GetEarningProductRequest,
    context: Context
  ) => Promise<GetEarningProductResponse> | GetEarningProductResponse;
  ListEarningProducts: (
    listEarningProductsRequest: ListEarningProductsRequest,
    context: Context
  ) => Promise<ListEarningProductsResponse> | ListEarningProductsResponse;
  ListMyEarningProducts: (
    listMyEarningProductsRequest: ListMyEarningProductsRequest,
    context: Context
  ) => Promise<ListMyEarningProductsResponse> | ListMyEarningProductsResponse;
  GetMyEarningProduct: (
    getMyEarningProductRequest: GetMyEarningProductRequest,
    context: Context
  ) => Promise<GetMyEarningProductResponse> | GetMyEarningProductResponse;
  /**
   * by admins
   */
  GetUserVaults: (
    getUserVaultsRequest: GetUserVaultsRequest,
    context: Context
  ) => Promise<GetUserVaultsResponse> | GetUserVaultsResponse;
  GetUserEvent: (
    getUserEventRequest: GetUserEventRequest,
    context: Context
  ) => Promise<GetUserEventResponse> | GetUserEventResponse;
  /**
   * audit
   */
  FindAudit: (
    findAuditRequest: FindAuditRequest,
    context: Context
  ) => Promise<FindAuditResponse> | FindAuditResponse;
  ListAudits: (
    listAuditsRequest: ListAuditsRequest,
    context: Context
  ) => Promise<ListAuditsResponse> | ListAuditsResponse;
}

export function createPoolService<Context>(service: PoolService<Context>) {
  return {
    name: "pool.v1.PoolService",
    methods: {
      ListAssets: {
        name: "ListAssets",
        handler: service.ListAssets,
        input: { protobuf: ListAssetsRequest, json: ListAssetsRequestJSON },
        output: { protobuf: ListAssetsResponse, json: ListAssetsResponseJSON },
      },
      GetEvent: {
        name: "GetEvent",
        handler: service.GetEvent,
        input: { protobuf: GetEventRequest, json: GetEventRequestJSON },
        output: { protobuf: GetEventResponse, json: GetEventResponseJSON },
      },
      ListEvents: {
        name: "ListEvents",
        handler: service.ListEvents,
        input: { protobuf: ListEventsRequest, json: ListEventsRequestJSON },
        output: { protobuf: ListEventsResponse, json: ListEventsResponseJSON },
      },
      GetEarningProduct: {
        name: "GetEarningProduct",
        handler: service.GetEarningProduct,
        input: {
          protobuf: GetEarningProductRequest,
          json: GetEarningProductRequestJSON,
        },
        output: {
          protobuf: GetEarningProductResponse,
          json: GetEarningProductResponseJSON,
        },
      },
      ListEarningProducts: {
        name: "ListEarningProducts",
        handler: service.ListEarningProducts,
        input: {
          protobuf: ListEarningProductsRequest,
          json: ListEarningProductsRequestJSON,
        },
        output: {
          protobuf: ListEarningProductsResponse,
          json: ListEarningProductsResponseJSON,
        },
      },
      ListMyEarningProducts: {
        name: "ListMyEarningProducts",
        handler: service.ListMyEarningProducts,
        input: {
          protobuf: ListMyEarningProductsRequest,
          json: ListMyEarningProductsRequestJSON,
        },
        output: {
          protobuf: ListMyEarningProductsResponse,
          json: ListMyEarningProductsResponseJSON,
        },
      },
      GetMyEarningProduct: {
        name: "GetMyEarningProduct",
        handler: service.GetMyEarningProduct,
        input: {
          protobuf: GetMyEarningProductRequest,
          json: GetMyEarningProductRequestJSON,
        },
        output: {
          protobuf: GetMyEarningProductResponse,
          json: GetMyEarningProductResponseJSON,
        },
      },
      GetUserVaults: {
        name: "GetUserVaults",
        handler: service.GetUserVaults,
        input: {
          protobuf: GetUserVaultsRequest,
          json: GetUserVaultsRequestJSON,
        },
        output: {
          protobuf: GetUserVaultsResponse,
          json: GetUserVaultsResponseJSON,
        },
      },
      GetUserEvent: {
        name: "GetUserEvent",
        handler: service.GetUserEvent,
        input: { protobuf: GetUserEventRequest, json: GetUserEventRequestJSON },
        output: {
          protobuf: GetUserEventResponse,
          json: GetUserEventResponseJSON,
        },
      },
      FindAudit: {
        name: "FindAudit",
        handler: service.FindAudit,
        input: { protobuf: FindAuditRequest, json: FindAuditRequestJSON },
        output: { protobuf: FindAuditResponse, json: FindAuditResponseJSON },
      },
      ListAudits: {
        name: "ListAudits",
        handler: service.ListAudits,
        input: { protobuf: ListAuditsRequest, json: ListAuditsRequestJSON },
        output: { protobuf: ListAuditsResponse, json: ListAuditsResponseJSON },
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export interface EventError {}

export declare namespace EventError {
  export type Enum =
    | "NOT_SET"
    | "EARNING_PRODUCT_STATUS_MISMATCH"
    | "EARNING_PRODUCT_ASSET_MISMATCH"
    | "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED"
    | "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED"
    | "EARNING_PRODUCT_INSUFFICIENT"
    | "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT"
    | "EARNING_EVENT_MISMATCH"
    | "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT"
    | "EARNING_PRODUCT_NOT_FOUND"
    | "USER_EARNING_PRODUCT_EOD_NOT_FOUND"
    | "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED"
    | "EOD_ALREADY_APPLIED"
    | "AUDIT_NOT_FOUND"
    | "AUDIT_STATUS_MISMATCH"
    | "EARNING_PRODUCT_PRECISION_UNSATISFIED"
    | "USER_NOT_IN_WHITELIST"
    | "USER_EARNING_PRODUCT_NOT_FOUND";
}

export interface EventAction {}

export declare namespace EventAction {
  export type Enum =
    | "NOT_SET"
    | "BUY"
    | "REDEEM"
    | "DEPOSIT"
    | "INTEREST_PAYMENT"
    | "CANCEL_QUEUE"
    | "ADMIN_INTEREST_PAYMENT"
    | "ADMIN_PRODUCT_EXPAND"
    | "ADMIN_PRODUCT_MERGE_EXPANSION"
    | "ADMIN_PLEDGE"
    | "ADMIN_CANCEL_PLEDGE"
    | "ADMIN_LEGACY_ASSET_MIGRATION"
    | "ADMIN_AUDIT_APPROVE"
    | "ADMIN_AUDIT_REJECT"
    | "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY"
    | "ADMIN_LIQUIDATION";
}

export interface EventStatus {}

export declare namespace EventStatus {
  export type Enum =
    | "NOT_SET"
    | "INIT"
    | "PENDING"
    | "QUEUING"
    | "CANCELLED"
    | "COMPLETED"
    | "FAILED";
}

export interface EarningProductStatus {}

export declare namespace EarningProductStatus {
  export type Enum =
    | "NOT_SET"
    | "RECRUITING"
    | "RUNNING"
    | "EXPANDING"
    | "DEACTIVATED";
}

export interface EarningProductType {}

export declare namespace EarningProductType {
  export type Enum = "NOT_SET" | "STAKING" | "SAVINGS";
}

export interface EarningSnapshotBuyData {
  productId: number;
  productStatus: EarningProductStatus.Enum;
}

export interface EarningSnapshotRedeemData {
  productId: number;
  amount: bigint;
  productStatus: EarningProductStatus.Enum;
}

export interface EarningSnapshotCancelQueueData {
  eventId: string;
}

export interface EarningSnapshotAdminInterestPaymentData {
  productId: number;
  productType: EarningProductType.Enum;
  date: string;
}

export interface EarningSnapshotAdminProductExpandData {
  productId: number;
  amount: bigint;
}

export interface EarningSnapshotAdminProductMergeExpansionData {
  productId: number;
}

export interface EarningSnapshotAdminPledgeData {
  userId: string;
  productId: number;
}

export interface EarningSnapshotAdminCancelPledgeData {
  userId: string;
  productId: number;
}

export interface EarningSnapshotAdminLegacyAssetMigrationData {
  userId: string;
  productId: number;
  amount: bigint;
}

export interface EarningSnapshotAdminLiquidationData {
  userId: string;
  productId: number;
}

export interface EarningSnapshotAdminAuditApproveData {
  traceId: string;
}

export interface EarningSnapshotAdminAuditRejectData {
  traceId: string;
}

export interface EarningSnapshotAdminAutoReviseProductCapacityData {
  productId: number;
}

export interface ListAssetsRequest {}

export interface Asset {
  assetId: string;
  chainId: string;
  symbol: string;
  name: string;
  logo: string;
  priceUsd: string;
  priceBtc: string;
  order: number;
  updatedAt: number;
  chainLogo: string;
}

export interface ListAssetsResponse {
  assets: Asset[];
}

export interface EarningProduct {
  id: number;
  name: string;
  description: string;
  assetId: string;
  interestRate: string;
  minAmountPerOrder: string;
  maxAmountPerOrder: string;
  capacity: string;
  sold: string;
  queuingBuyAmount: string;
  queuingRedeemAmount: string;
  version: string;
  createdAt: number;
  type: EarningProductType.Enum;
  status: EarningProductStatus.Enum;
  runningNodes: number;
  interestPaymentDuration: number;
  expandingAmount: string;
  filledExpandingAmount: string;
  expectedExpandingEndAt: number;
  userIsInWhitelist: boolean;
  descriptionRules: string;
  descriptionRiskDisclosure: string;
  enabledWhitelistLimit: boolean;
  precision: number;
}

export interface GetEarningProductRequest {
  id: number;
}

export interface GetEarningProductResponse {
  product: EarningProduct;
}

export interface ListEarningProductsRequest {
  type: EarningProductType.Enum;
}

export interface ListEarningProductsResponse {
  products: EarningProduct[];
}

export interface UserEarningProduct {
  id: number;
  userId: string;
  earningProductId: number;
  amount: string;
  queuingBuyAmount: string;
  queuingRedeemAmount: string;
  version: string;
  createdAt: number;
  updatedAt: number;
  totalRevenue: string;
  pledged: boolean;
  expandBuyAmount: string;
}

export interface ListMyEarningProductsRequest {}

export interface ListMyEarningProductsResponse {
  products: UserEarningProduct[];
}

export interface GetMyEarningProductRequest {
  id: number;
}

export interface GetMyEarningProductResponse {
  product: UserEarningProduct;
}

export interface GetEventRequest {
  followId: string;
}

export interface Event {
  id: string;
  userId: string;
  action: EventAction.Enum;
  productId: number;
  assetId: string;
  amount: string;
  filledAmount: string;
  status: EventStatus.Enum;
  /**
   * set only if the status is failed
   */
  error: EventError.Enum;
  followId: string;
  createdAt: number;
  queuingAheadAmount: string;
  interestPaymentDate: string;
}

export interface GetEventResponse {
  event: Event;
}

export interface ListEventsRequest {
  earningProductId: number;
  actions: EventAction.Enum[];
  statuses: EventStatus.Enum[];
  offset: number;
  limit: number;
  startAt: number;
  endAt: number;
  productType: EarningProductType.Enum;
}

export interface ListEventsResponse {
  events: Event[];
}

export interface Audit {
  id: string;
  createdAt: Timestamp;
  assetId: string;
  amount: string;
  userId: string;
  status: Audit.Status;
  memo: string;
  reviewedBy: string;
}

export declare namespace Audit {
  export type Status = "NOT_SET" | "REJECTED" | "APPROVED";
}

export interface FindAuditRequest {
  id: string;
}

export interface FindAuditResponse {
  audit: Audit;
}

export interface ListAuditsRequest {
  offset: Timestamp;
  limit: bigint;
}

export interface ListAuditsResponse {
  audits: Audit[];
}

export interface UserVault {
  userId: string;
  productId: number;
  productName: string;
  assetId: string;
  amount: string;
  pledged: boolean;
}

export interface GetUserVaultsRequest {
  userId: string;
}

export interface GetUserVaultsResponse {
  vaults: UserVault[];
}

export interface GetUserEventRequest {
  followId: string;
}

export interface GetUserEventResponse {
  event: Event;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const EventError = {
  /**
   * Serializes EventError to protobuf.
   */
  encode: function (_msg?: Partial<EventError>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EventError from protobuf.
   */
  decode: function (_bytes?: ByteSource): EventError {
    return {};
  },

  /**
   * Initializes EventError with all fields set to their default value.
   */
  initialize: function (): EventError {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<EventError>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg: EventError, _reader: BinaryReader): EventError {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    /**
     * buy / redeem / admin_expand / admin_merge_expansion
     */
    EARNING_PRODUCT_STATUS_MISMATCH: "EARNING_PRODUCT_STATUS_MISMATCH",
    /**
     * buy / admin_interest_payment
     */
    EARNING_PRODUCT_ASSET_MISMATCH: "EARNING_PRODUCT_ASSET_MISMATCH",
    /**
     * buy
     */
    EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED:
      "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED",
    /**
     * buy
     */
    EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED:
      "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED",
    /**
     * buy
     */
    EARNING_PRODUCT_INSUFFICIENT: "EARNING_PRODUCT_INSUFFICIENT",
    /**
     * redeem
     */
    USER_EARNING_PRODUCT_SHARE_INSUFFICIENT:
      "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT",
    /**
     * cancel_queue
     */
    EARNING_EVENT_MISMATCH: "EARNING_EVENT_MISMATCH",
    /**
     * buy or redeem
     */
    USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT:
      "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT",
    /**
     * admin_interest_payment
     */
    EARNING_PRODUCT_NOT_FOUND: "EARNING_PRODUCT_NOT_FOUND",
    /**
     * admin_interest_payment
     */
    USER_EARNING_PRODUCT_EOD_NOT_FOUND: "USER_EARNING_PRODUCT_EOD_NOT_FOUND",
    /**
     * redeem
     */
    USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED:
      "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED",
    /**
     * admin_interest_payment
     */
    EOD_ALREADY_APPLIED: "EOD_ALREADY_APPLIED",
    /**
     * admin_audit_approve / admin_audit_reject
     */
    AUDIT_NOT_FOUND: "AUDIT_NOT_FOUND",
    /**
     * admin_audit_approve / admin_audit_reject
     */
    AUDIT_STATUS_MISMATCH: "AUDIT_STATUS_MISMATCH",
    /**
     * buy / redeem
     */
    EARNING_PRODUCT_PRECISION_UNSATISFIED:
      "EARNING_PRODUCT_PRECISION_UNSATISFIED",
    /**
     * buy
     */
    USER_NOT_IN_WHITELIST: "USER_NOT_IN_WHITELIST",
    /**
     * pledge / cancel_pledge / redeem
     */
    USER_EARNING_PRODUCT_NOT_FOUND: "USER_EARNING_PRODUCT_NOT_FOUND",
    /**
     * @private
     */
    _fromInt: function (i: number): EventError.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "EARNING_PRODUCT_STATUS_MISMATCH";
        }
        case 2: {
          return "EARNING_PRODUCT_ASSET_MISMATCH";
        }
        case 3: {
          return "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED";
        }
        case 4: {
          return "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED";
        }
        case 5: {
          return "EARNING_PRODUCT_INSUFFICIENT";
        }
        case 6: {
          return "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT";
        }
        case 7: {
          return "EARNING_EVENT_MISMATCH";
        }
        case 8: {
          return "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT";
        }
        case 9: {
          return "EARNING_PRODUCT_NOT_FOUND";
        }
        case 10: {
          return "USER_EARNING_PRODUCT_EOD_NOT_FOUND";
        }
        case 11: {
          return "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED";
        }
        case 12: {
          return "EOD_ALREADY_APPLIED";
        }
        case 13: {
          return "AUDIT_NOT_FOUND";
        }
        case 14: {
          return "AUDIT_STATUS_MISMATCH";
        }
        case 15: {
          return "EARNING_PRODUCT_PRECISION_UNSATISFIED";
        }
        case 16: {
          return "USER_NOT_IN_WHITELIST";
        }
        case 17: {
          return "USER_EARNING_PRODUCT_NOT_FOUND";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventError.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventError.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "EARNING_PRODUCT_STATUS_MISMATCH": {
          return 1;
        }
        case "EARNING_PRODUCT_ASSET_MISMATCH": {
          return 2;
        }
        case "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED": {
          return 3;
        }
        case "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED": {
          return 4;
        }
        case "EARNING_PRODUCT_INSUFFICIENT": {
          return 5;
        }
        case "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT": {
          return 6;
        }
        case "EARNING_EVENT_MISMATCH": {
          return 7;
        }
        case "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT": {
          return 8;
        }
        case "EARNING_PRODUCT_NOT_FOUND": {
          return 9;
        }
        case "USER_EARNING_PRODUCT_EOD_NOT_FOUND": {
          return 10;
        }
        case "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED": {
          return 11;
        }
        case "EOD_ALREADY_APPLIED": {
          return 12;
        }
        case "AUDIT_NOT_FOUND": {
          return 13;
        }
        case "AUDIT_STATUS_MISMATCH": {
          return 14;
        }
        case "EARNING_PRODUCT_PRECISION_UNSATISFIED": {
          return 15;
        }
        case "USER_NOT_IN_WHITELIST": {
          return 16;
        }
        case "USER_EARNING_PRODUCT_NOT_FOUND": {
          return 17;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EventAction = {
  /**
   * Serializes EventAction to protobuf.
   */
  encode: function (_msg?: Partial<EventAction>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EventAction from protobuf.
   */
  decode: function (_bytes?: ByteSource): EventAction {
    return {};
  },

  /**
   * Initializes EventAction with all fields set to their default value.
   */
  initialize: function (): EventAction {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<EventAction>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EventAction,
    _reader: BinaryReader
  ): EventAction {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    BUY: "BUY",
    REDEEM: "REDEEM",
    DEPOSIT: "DEPOSIT",
    INTEREST_PAYMENT: "INTEREST_PAYMENT",
    CANCEL_QUEUE: "CANCEL_QUEUE",
    ADMIN_INTEREST_PAYMENT: "ADMIN_INTEREST_PAYMENT",
    ADMIN_PRODUCT_EXPAND: "ADMIN_PRODUCT_EXPAND",
    ADMIN_PRODUCT_MERGE_EXPANSION: "ADMIN_PRODUCT_MERGE_EXPANSION",
    ADMIN_PLEDGE: "ADMIN_PLEDGE",
    ADMIN_CANCEL_PLEDGE: "ADMIN_CANCEL_PLEDGE",
    ADMIN_LEGACY_ASSET_MIGRATION: "ADMIN_LEGACY_ASSET_MIGRATION",
    ADMIN_AUDIT_APPROVE: "ADMIN_AUDIT_APPROVE",
    ADMIN_AUDIT_REJECT: "ADMIN_AUDIT_REJECT",
    ADMIN_AUTO_REVISE_PRODUCT_CAPACITY: "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY",
    ADMIN_LIQUIDATION: "ADMIN_LIQUIDATION",
    /**
     * @private
     */
    _fromInt: function (i: number): EventAction.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "BUY";
        }
        case 2: {
          return "REDEEM";
        }
        case 3: {
          return "DEPOSIT";
        }
        case 4: {
          return "INTEREST_PAYMENT";
        }
        case 5: {
          return "CANCEL_QUEUE";
        }
        case 100: {
          return "ADMIN_INTEREST_PAYMENT";
        }
        case 101: {
          return "ADMIN_PRODUCT_EXPAND";
        }
        case 102: {
          return "ADMIN_PRODUCT_MERGE_EXPANSION";
        }
        case 103: {
          return "ADMIN_PLEDGE";
        }
        case 104: {
          return "ADMIN_CANCEL_PLEDGE";
        }
        case 105: {
          return "ADMIN_LEGACY_ASSET_MIGRATION";
        }
        case 106: {
          return "ADMIN_AUDIT_APPROVE";
        }
        case 107: {
          return "ADMIN_AUDIT_REJECT";
        }
        case 108: {
          return "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY";
        }
        case 109: {
          return "ADMIN_LIQUIDATION";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventAction.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventAction.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "BUY": {
          return 1;
        }
        case "REDEEM": {
          return 2;
        }
        case "DEPOSIT": {
          return 3;
        }
        case "INTEREST_PAYMENT": {
          return 4;
        }
        case "CANCEL_QUEUE": {
          return 5;
        }
        case "ADMIN_INTEREST_PAYMENT": {
          return 100;
        }
        case "ADMIN_PRODUCT_EXPAND": {
          return 101;
        }
        case "ADMIN_PRODUCT_MERGE_EXPANSION": {
          return 102;
        }
        case "ADMIN_PLEDGE": {
          return 103;
        }
        case "ADMIN_CANCEL_PLEDGE": {
          return 104;
        }
        case "ADMIN_LEGACY_ASSET_MIGRATION": {
          return 105;
        }
        case "ADMIN_AUDIT_APPROVE": {
          return 106;
        }
        case "ADMIN_AUDIT_REJECT": {
          return 107;
        }
        case "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY": {
          return 108;
        }
        case "ADMIN_LIQUIDATION": {
          return 109;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EventStatus = {
  /**
   * Serializes EventStatus to protobuf.
   */
  encode: function (_msg?: Partial<EventStatus>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EventStatus from protobuf.
   */
  decode: function (_bytes?: ByteSource): EventStatus {
    return {};
  },

  /**
   * Initializes EventStatus with all fields set to their default value.
   */
  initialize: function (): EventStatus {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<EventStatus>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EventStatus,
    _reader: BinaryReader
  ): EventStatus {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    INIT: "INIT",
    PENDING: "PENDING",
    QUEUING: "QUEUING",
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    /**
     * @private
     */
    _fromInt: function (i: number): EventStatus.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "INIT";
        }
        case 2: {
          return "PENDING";
        }
        case 3: {
          return "QUEUING";
        }
        case 4: {
          return "CANCELLED";
        }
        case 5: {
          return "COMPLETED";
        }
        case 6: {
          return "FAILED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventStatus.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventStatus.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "INIT": {
          return 1;
        }
        case "PENDING": {
          return 2;
        }
        case "QUEUING": {
          return 3;
        }
        case "CANCELLED": {
          return 4;
        }
        case "COMPLETED": {
          return 5;
        }
        case "FAILED": {
          return 6;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningProductStatus = {
  /**
   * Serializes EarningProductStatus to protobuf.
   */
  encode: function (_msg?: Partial<EarningProductStatus>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EarningProductStatus from protobuf.
   */
  decode: function (_bytes?: ByteSource): EarningProductStatus {
    return {};
  },

  /**
   * Initializes EarningProductStatus with all fields set to their default value.
   */
  initialize: function (): EarningProductStatus {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<EarningProductStatus>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EarningProductStatus,
    _reader: BinaryReader
  ): EarningProductStatus {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    RECRUITING: "RECRUITING",
    RUNNING: "RUNNING",
    EXPANDING: "EXPANDING",
    DEACTIVATED: "DEACTIVATED",
    /**
     * @private
     */
    _fromInt: function (i: number): EarningProductStatus.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "RECRUITING";
        }
        case 2: {
          return "RUNNING";
        }
        case 3: {
          return "EXPANDING";
        }
        case 4: {
          return "DEACTIVATED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EarningProductStatus.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EarningProductStatus.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "RECRUITING": {
          return 1;
        }
        case "RUNNING": {
          return 2;
        }
        case "EXPANDING": {
          return 3;
        }
        case "DEACTIVATED": {
          return 4;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningProductType = {
  /**
   * Serializes EarningProductType to protobuf.
   */
  encode: function (_msg?: Partial<EarningProductType>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EarningProductType from protobuf.
   */
  decode: function (_bytes?: ByteSource): EarningProductType {
    return {};
  },

  /**
   * Initializes EarningProductType with all fields set to their default value.
   */
  initialize: function (): EarningProductType {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<EarningProductType>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EarningProductType,
    _reader: BinaryReader
  ): EarningProductType {
    return _msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    STAKING: "STAKING",
    SAVINGS: "SAVINGS",
    /**
     * @private
     */
    _fromInt: function (i: number): EarningProductType.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "STAKING";
        }
        case 2: {
          return "SAVINGS";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EarningProductType.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EarningProductType.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "STAKING": {
          return 1;
        }
        case "SAVINGS": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningSnapshotBuyData = {
  /**
   * Serializes EarningSnapshotBuyData to protobuf.
   */
  encode: function (msg: Partial<EarningSnapshotBuyData>): Uint8Array {
    return EarningSnapshotBuyData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotBuyData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotBuyData {
    return EarningSnapshotBuyData._readMessage(
      EarningSnapshotBuyData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotBuyData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotBuyData {
    return {
      productId: 0,
      productStatus: EarningProductStatus.Enum._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotBuyData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    if (
      msg.productStatus &&
      EarningProductStatus.Enum._toInt(msg.productStatus)
    ) {
      writer.writeEnum(2, EarningProductStatus.Enum._toInt(msg.productStatus));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotBuyData,
    reader: BinaryReader
  ): EarningSnapshotBuyData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        case 2: {
          msg.productStatus = EarningProductStatus.Enum._fromInt(
            reader.readEnum()
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotRedeemData = {
  /**
   * Serializes EarningSnapshotRedeemData to protobuf.
   */
  encode: function (msg: Partial<EarningSnapshotRedeemData>): Uint8Array {
    return EarningSnapshotRedeemData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotRedeemData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotRedeemData {
    return EarningSnapshotRedeemData._readMessage(
      EarningSnapshotRedeemData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotRedeemData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotRedeemData {
    return {
      productId: 0,
      amount: 0n,
      productStatus: EarningProductStatus.Enum._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotRedeemData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    if (msg.amount) {
      writer.writeInt64String(2, msg.amount.toString() as any);
    }
    if (
      msg.productStatus &&
      EarningProductStatus.Enum._toInt(msg.productStatus)
    ) {
      writer.writeEnum(3, EarningProductStatus.Enum._toInt(msg.productStatus));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotRedeemData,
    reader: BinaryReader
  ): EarningSnapshotRedeemData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        case 2: {
          msg.amount = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.productStatus = EarningProductStatus.Enum._fromInt(
            reader.readEnum()
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotCancelQueueData = {
  /**
   * Serializes EarningSnapshotCancelQueueData to protobuf.
   */
  encode: function (msg: Partial<EarningSnapshotCancelQueueData>): Uint8Array {
    return EarningSnapshotCancelQueueData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotCancelQueueData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotCancelQueueData {
    return EarningSnapshotCancelQueueData._readMessage(
      EarningSnapshotCancelQueueData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotCancelQueueData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotCancelQueueData {
    return {
      eventId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotCancelQueueData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.eventId) {
      writer.writeString(1, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotCancelQueueData,
    reader: BinaryReader
  ): EarningSnapshotCancelQueueData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminInterestPaymentData = {
  /**
   * Serializes EarningSnapshotAdminInterestPaymentData to protobuf.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminInterestPaymentData>
  ): Uint8Array {
    return EarningSnapshotAdminInterestPaymentData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminInterestPaymentData from protobuf.
   */
  decode: function (
    bytes: ByteSource
  ): EarningSnapshotAdminInterestPaymentData {
    return EarningSnapshotAdminInterestPaymentData._readMessage(
      EarningSnapshotAdminInterestPaymentData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminInterestPaymentData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminInterestPaymentData {
    return {
      productId: 0,
      productType: EarningProductType.Enum._fromInt(0),
      date: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminInterestPaymentData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    if (msg.productType && EarningProductType.Enum._toInt(msg.productType)) {
      writer.writeEnum(2, EarningProductType.Enum._toInt(msg.productType));
    }
    if (msg.date) {
      writer.writeString(3, msg.date);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminInterestPaymentData,
    reader: BinaryReader
  ): EarningSnapshotAdminInterestPaymentData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        case 2: {
          msg.productType = EarningProductType.Enum._fromInt(reader.readEnum());
          break;
        }
        case 3: {
          msg.date = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminProductExpandData = {
  /**
   * Serializes EarningSnapshotAdminProductExpandData to protobuf.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminProductExpandData>
  ): Uint8Array {
    return EarningSnapshotAdminProductExpandData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminProductExpandData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminProductExpandData {
    return EarningSnapshotAdminProductExpandData._readMessage(
      EarningSnapshotAdminProductExpandData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminProductExpandData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminProductExpandData {
    return {
      productId: 0,
      amount: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminProductExpandData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    if (msg.amount) {
      writer.writeInt64String(2, msg.amount.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminProductExpandData,
    reader: BinaryReader
  ): EarningSnapshotAdminProductExpandData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        case 2: {
          msg.amount = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminProductMergeExpansionData = {
  /**
   * Serializes EarningSnapshotAdminProductMergeExpansionData to protobuf.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminProductMergeExpansionData>
  ): Uint8Array {
    return EarningSnapshotAdminProductMergeExpansionData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminProductMergeExpansionData from protobuf.
   */
  decode: function (
    bytes: ByteSource
  ): EarningSnapshotAdminProductMergeExpansionData {
    return EarningSnapshotAdminProductMergeExpansionData._readMessage(
      EarningSnapshotAdminProductMergeExpansionData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminProductMergeExpansionData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminProductMergeExpansionData {
    return {
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminProductMergeExpansionData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminProductMergeExpansionData,
    reader: BinaryReader
  ): EarningSnapshotAdminProductMergeExpansionData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminPledgeData = {
  /**
   * Serializes EarningSnapshotAdminPledgeData to protobuf.
   */
  encode: function (msg: Partial<EarningSnapshotAdminPledgeData>): Uint8Array {
    return EarningSnapshotAdminPledgeData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminPledgeData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminPledgeData {
    return EarningSnapshotAdminPledgeData._readMessage(
      EarningSnapshotAdminPledgeData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminPledgeData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminPledgeData {
    return {
      userId: "",
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminPledgeData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.productId) {
      writer.writeInt32(2, msg.productId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminPledgeData,
    reader: BinaryReader
  ): EarningSnapshotAdminPledgeData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.productId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminCancelPledgeData = {
  /**
   * Serializes EarningSnapshotAdminCancelPledgeData to protobuf.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminCancelPledgeData>
  ): Uint8Array {
    return EarningSnapshotAdminCancelPledgeData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminCancelPledgeData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminCancelPledgeData {
    return EarningSnapshotAdminCancelPledgeData._readMessage(
      EarningSnapshotAdminCancelPledgeData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminCancelPledgeData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminCancelPledgeData {
    return {
      userId: "",
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminCancelPledgeData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.productId) {
      writer.writeInt32(2, msg.productId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminCancelPledgeData,
    reader: BinaryReader
  ): EarningSnapshotAdminCancelPledgeData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.productId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminLegacyAssetMigrationData = {
  /**
   * Serializes EarningSnapshotAdminLegacyAssetMigrationData to protobuf.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminLegacyAssetMigrationData>
  ): Uint8Array {
    return EarningSnapshotAdminLegacyAssetMigrationData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminLegacyAssetMigrationData from protobuf.
   */
  decode: function (
    bytes: ByteSource
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    return EarningSnapshotAdminLegacyAssetMigrationData._readMessage(
      EarningSnapshotAdminLegacyAssetMigrationData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminLegacyAssetMigrationData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminLegacyAssetMigrationData {
    return {
      userId: "",
      productId: 0,
      amount: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminLegacyAssetMigrationData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.productId) {
      writer.writeInt32(2, msg.productId);
    }
    if (msg.amount) {
      writer.writeInt64String(3, msg.amount.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminLegacyAssetMigrationData,
    reader: BinaryReader
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.productId = reader.readInt32();
          break;
        }
        case 3: {
          msg.amount = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminLiquidationData = {
  /**
   * Serializes EarningSnapshotAdminLiquidationData to protobuf.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminLiquidationData>
  ): Uint8Array {
    return EarningSnapshotAdminLiquidationData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminLiquidationData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminLiquidationData {
    return EarningSnapshotAdminLiquidationData._readMessage(
      EarningSnapshotAdminLiquidationData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminLiquidationData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminLiquidationData {
    return {
      userId: "",
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminLiquidationData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.productId) {
      writer.writeInt32(2, msg.productId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminLiquidationData,
    reader: BinaryReader
  ): EarningSnapshotAdminLiquidationData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.productId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminAuditApproveData = {
  /**
   * Serializes EarningSnapshotAdminAuditApproveData to protobuf.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminAuditApproveData>
  ): Uint8Array {
    return EarningSnapshotAdminAuditApproveData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminAuditApproveData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminAuditApproveData {
    return EarningSnapshotAdminAuditApproveData._readMessage(
      EarningSnapshotAdminAuditApproveData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminAuditApproveData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminAuditApproveData {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminAuditApproveData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAuditApproveData,
    reader: BinaryReader
  ): EarningSnapshotAdminAuditApproveData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminAuditRejectData = {
  /**
   * Serializes EarningSnapshotAdminAuditRejectData to protobuf.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminAuditRejectData>
  ): Uint8Array {
    return EarningSnapshotAdminAuditRejectData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminAuditRejectData from protobuf.
   */
  decode: function (bytes: ByteSource): EarningSnapshotAdminAuditRejectData {
    return EarningSnapshotAdminAuditRejectData._readMessage(
      EarningSnapshotAdminAuditRejectData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminAuditRejectData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminAuditRejectData {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminAuditRejectData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.traceId) {
      writer.writeString(1, msg.traceId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAuditRejectData,
    reader: BinaryReader
  ): EarningSnapshotAdminAuditRejectData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.traceId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningSnapshotAdminAutoReviseProductCapacityData = {
  /**
   * Serializes EarningSnapshotAdminAutoReviseProductCapacityData to protobuf.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminAutoReviseProductCapacityData>
  ): Uint8Array {
    return EarningSnapshotAdminAutoReviseProductCapacityData._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningSnapshotAdminAutoReviseProductCapacityData from protobuf.
   */
  decode: function (
    bytes: ByteSource
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    return EarningSnapshotAdminAutoReviseProductCapacityData._readMessage(
      EarningSnapshotAdminAutoReviseProductCapacityData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningSnapshotAdminAutoReviseProductCapacityData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminAutoReviseProductCapacityData {
    return {
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminAutoReviseProductCapacityData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.productId) {
      writer.writeInt32(1, msg.productId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAutoReviseProductCapacityData,
    reader: BinaryReader
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.productId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAssetsRequest = {
  /**
   * Serializes ListAssetsRequest to protobuf.
   */
  encode: function (_msg?: Partial<ListAssetsRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ListAssetsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ListAssetsRequest {
    return {};
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (): ListAssetsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ListAssetsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ListAssetsRequest,
    _reader: BinaryReader
  ): ListAssetsRequest {
    return _msg;
  },
};

export const Asset = {
  /**
   * Serializes Asset to protobuf.
   */
  encode: function (msg: Partial<Asset>): Uint8Array {
    return Asset._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Asset from protobuf.
   */
  decode: function (bytes: ByteSource): Asset {
    return Asset._readMessage(Asset.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      priceUsd: "",
      priceBtc: "",
      order: 0,
      updatedAt: 0,
      chainLogo: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Asset>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.assetId) {
      writer.writeString(1, msg.assetId);
    }
    if (msg.chainId) {
      writer.writeString(2, msg.chainId);
    }
    if (msg.symbol) {
      writer.writeString(3, msg.symbol);
    }
    if (msg.name) {
      writer.writeString(4, msg.name);
    }
    if (msg.logo) {
      writer.writeString(5, msg.logo);
    }
    if (msg.priceUsd) {
      writer.writeString(6, msg.priceUsd);
    }
    if (msg.priceBtc) {
      writer.writeString(7, msg.priceBtc);
    }
    if (msg.order) {
      writer.writeInt32(8, msg.order);
    }
    if (msg.updatedAt) {
      writer.writeInt32(9, msg.updatedAt);
    }
    if (msg.chainLogo) {
      writer.writeString(10, msg.chainLogo);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, reader: BinaryReader): Asset {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.assetId = reader.readString();
          break;
        }
        case 2: {
          msg.chainId = reader.readString();
          break;
        }
        case 3: {
          msg.symbol = reader.readString();
          break;
        }
        case 4: {
          msg.name = reader.readString();
          break;
        }
        case 5: {
          msg.logo = reader.readString();
          break;
        }
        case 6: {
          msg.priceUsd = reader.readString();
          break;
        }
        case 7: {
          msg.priceBtc = reader.readString();
          break;
        }
        case 8: {
          msg.order = reader.readInt32();
          break;
        }
        case 9: {
          msg.updatedAt = reader.readInt32();
          break;
        }
        case 10: {
          msg.chainLogo = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAssetsResponse = {
  /**
   * Serializes ListAssetsResponse to protobuf.
   */
  encode: function (msg: Partial<ListAssetsResponse>): Uint8Array {
    return ListAssetsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAssetsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListAssetsResponse {
    return ListAssetsResponse._readMessage(
      ListAssetsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (): ListAssetsResponse {
    return {
      assets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAssetsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.assets?.length) {
      writer.writeRepeatedMessage(1, msg.assets as any, Asset._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    reader: BinaryReader
  ): ListAssetsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Asset.initialize();
          reader.readMessage(m, Asset._readMessage);
          msg.assets.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EarningProduct = {
  /**
   * Serializes EarningProduct to protobuf.
   */
  encode: function (msg: Partial<EarningProduct>): Uint8Array {
    return EarningProduct._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EarningProduct from protobuf.
   */
  decode: function (bytes: ByteSource): EarningProduct {
    return EarningProduct._readMessage(
      EarningProduct.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EarningProduct with all fields set to their default value.
   */
  initialize: function (): EarningProduct {
    return {
      id: 0,
      name: "",
      description: "",
      assetId: "",
      interestRate: "",
      minAmountPerOrder: "",
      maxAmountPerOrder: "",
      capacity: "",
      sold: "",
      queuingBuyAmount: "",
      queuingRedeemAmount: "",
      version: "",
      createdAt: 0,
      type: EarningProductType.Enum._fromInt(0),
      status: EarningProductStatus.Enum._fromInt(0),
      runningNodes: 0,
      interestPaymentDuration: 0,
      expandingAmount: "",
      filledExpandingAmount: "",
      expectedExpandingEndAt: 0,
      userIsInWhitelist: false,
      descriptionRules: "",
      descriptionRiskDisclosure: "",
      enabledWhitelistLimit: false,
      precision: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningProduct>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    if (msg.description) {
      writer.writeString(3, msg.description);
    }
    if (msg.assetId) {
      writer.writeString(4, msg.assetId);
    }
    if (msg.interestRate) {
      writer.writeString(5, msg.interestRate);
    }
    if (msg.minAmountPerOrder) {
      writer.writeString(6, msg.minAmountPerOrder);
    }
    if (msg.maxAmountPerOrder) {
      writer.writeString(7, msg.maxAmountPerOrder);
    }
    if (msg.capacity) {
      writer.writeString(8, msg.capacity);
    }
    if (msg.sold) {
      writer.writeString(9, msg.sold);
    }
    if (msg.queuingBuyAmount) {
      writer.writeString(10, msg.queuingBuyAmount);
    }
    if (msg.queuingRedeemAmount) {
      writer.writeString(11, msg.queuingRedeemAmount);
    }
    if (msg.version) {
      writer.writeString(12, msg.version);
    }
    if (msg.createdAt) {
      writer.writeInt32(13, msg.createdAt);
    }
    if (msg.type && EarningProductType.Enum._toInt(msg.type)) {
      writer.writeEnum(14, EarningProductType.Enum._toInt(msg.type));
    }
    if (msg.status && EarningProductStatus.Enum._toInt(msg.status)) {
      writer.writeEnum(15, EarningProductStatus.Enum._toInt(msg.status));
    }
    if (msg.runningNodes) {
      writer.writeInt32(16, msg.runningNodes);
    }
    if (msg.interestPaymentDuration) {
      writer.writeInt32(17, msg.interestPaymentDuration);
    }
    if (msg.expandingAmount) {
      writer.writeString(18, msg.expandingAmount);
    }
    if (msg.filledExpandingAmount) {
      writer.writeString(19, msg.filledExpandingAmount);
    }
    if (msg.expectedExpandingEndAt) {
      writer.writeInt32(20, msg.expectedExpandingEndAt);
    }
    if (msg.userIsInWhitelist) {
      writer.writeBool(21, msg.userIsInWhitelist);
    }
    if (msg.descriptionRules) {
      writer.writeString(22, msg.descriptionRules);
    }
    if (msg.descriptionRiskDisclosure) {
      writer.writeString(23, msg.descriptionRiskDisclosure);
    }
    if (msg.enabledWhitelistLimit) {
      writer.writeBool(24, msg.enabledWhitelistLimit);
    }
    if (msg.precision) {
      writer.writeInt32(26, msg.precision);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningProduct,
    reader: BinaryReader
  ): EarningProduct {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.description = reader.readString();
          break;
        }
        case 4: {
          msg.assetId = reader.readString();
          break;
        }
        case 5: {
          msg.interestRate = reader.readString();
          break;
        }
        case 6: {
          msg.minAmountPerOrder = reader.readString();
          break;
        }
        case 7: {
          msg.maxAmountPerOrder = reader.readString();
          break;
        }
        case 8: {
          msg.capacity = reader.readString();
          break;
        }
        case 9: {
          msg.sold = reader.readString();
          break;
        }
        case 10: {
          msg.queuingBuyAmount = reader.readString();
          break;
        }
        case 11: {
          msg.queuingRedeemAmount = reader.readString();
          break;
        }
        case 12: {
          msg.version = reader.readString();
          break;
        }
        case 13: {
          msg.createdAt = reader.readInt32();
          break;
        }
        case 14: {
          msg.type = EarningProductType.Enum._fromInt(reader.readEnum());
          break;
        }
        case 15: {
          msg.status = EarningProductStatus.Enum._fromInt(reader.readEnum());
          break;
        }
        case 16: {
          msg.runningNodes = reader.readInt32();
          break;
        }
        case 17: {
          msg.interestPaymentDuration = reader.readInt32();
          break;
        }
        case 18: {
          msg.expandingAmount = reader.readString();
          break;
        }
        case 19: {
          msg.filledExpandingAmount = reader.readString();
          break;
        }
        case 20: {
          msg.expectedExpandingEndAt = reader.readInt32();
          break;
        }
        case 21: {
          msg.userIsInWhitelist = reader.readBool();
          break;
        }
        case 22: {
          msg.descriptionRules = reader.readString();
          break;
        }
        case 23: {
          msg.descriptionRiskDisclosure = reader.readString();
          break;
        }
        case 24: {
          msg.enabledWhitelistLimit = reader.readBool();
          break;
        }
        case 26: {
          msg.precision = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetEarningProductRequest = {
  /**
   * Serializes GetEarningProductRequest to protobuf.
   */
  encode: function (msg: Partial<GetEarningProductRequest>): Uint8Array {
    return GetEarningProductRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetEarningProductRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetEarningProductRequest {
    return GetEarningProductRequest._readMessage(
      GetEarningProductRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetEarningProductRequest with all fields set to their default value.
   */
  initialize: function (): GetEarningProductRequest {
    return {
      id: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetEarningProductRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEarningProductRequest,
    reader: BinaryReader
  ): GetEarningProductRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetEarningProductResponse = {
  /**
   * Serializes GetEarningProductResponse to protobuf.
   */
  encode: function (msg: Partial<GetEarningProductResponse>): Uint8Array {
    return GetEarningProductResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetEarningProductResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetEarningProductResponse {
    return GetEarningProductResponse._readMessage(
      GetEarningProductResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetEarningProductResponse with all fields set to their default value.
   */
  initialize: function (): GetEarningProductResponse {
    return {
      product: EarningProduct.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetEarningProductResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.product) {
      writer.writeMessage(1, msg.product, EarningProduct._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEarningProductResponse,
    reader: BinaryReader
  ): GetEarningProductResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.product, EarningProduct._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListEarningProductsRequest = {
  /**
   * Serializes ListEarningProductsRequest to protobuf.
   */
  encode: function (msg: Partial<ListEarningProductsRequest>): Uint8Array {
    return ListEarningProductsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListEarningProductsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListEarningProductsRequest {
    return ListEarningProductsRequest._readMessage(
      ListEarningProductsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListEarningProductsRequest with all fields set to their default value.
   */
  initialize: function (): ListEarningProductsRequest {
    return {
      type: EarningProductType.Enum._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListEarningProductsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.type && EarningProductType.Enum._toInt(msg.type)) {
      writer.writeEnum(1, EarningProductType.Enum._toInt(msg.type));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEarningProductsRequest,
    reader: BinaryReader
  ): ListEarningProductsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.type = EarningProductType.Enum._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListEarningProductsResponse = {
  /**
   * Serializes ListEarningProductsResponse to protobuf.
   */
  encode: function (msg: Partial<ListEarningProductsResponse>): Uint8Array {
    return ListEarningProductsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListEarningProductsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListEarningProductsResponse {
    return ListEarningProductsResponse._readMessage(
      ListEarningProductsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListEarningProductsResponse with all fields set to their default value.
   */
  initialize: function (): ListEarningProductsResponse {
    return {
      products: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListEarningProductsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.products?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.products as any,
        EarningProduct._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEarningProductsResponse,
    reader: BinaryReader
  ): ListEarningProductsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = EarningProduct.initialize();
          reader.readMessage(m, EarningProduct._readMessage);
          msg.products.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserEarningProduct = {
  /**
   * Serializes UserEarningProduct to protobuf.
   */
  encode: function (msg: Partial<UserEarningProduct>): Uint8Array {
    return UserEarningProduct._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UserEarningProduct from protobuf.
   */
  decode: function (bytes: ByteSource): UserEarningProduct {
    return UserEarningProduct._readMessage(
      UserEarningProduct.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UserEarningProduct with all fields set to their default value.
   */
  initialize: function (): UserEarningProduct {
    return {
      id: 0,
      userId: "",
      earningProductId: 0,
      amount: "",
      queuingBuyAmount: "",
      queuingRedeemAmount: "",
      version: "",
      createdAt: 0,
      updatedAt: 0,
      totalRevenue: "",
      pledged: false,
      expandBuyAmount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserEarningProduct>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.earningProductId) {
      writer.writeInt32(3, msg.earningProductId);
    }
    if (msg.amount) {
      writer.writeString(4, msg.amount);
    }
    if (msg.queuingBuyAmount) {
      writer.writeString(5, msg.queuingBuyAmount);
    }
    if (msg.queuingRedeemAmount) {
      writer.writeString(6, msg.queuingRedeemAmount);
    }
    if (msg.version) {
      writer.writeString(7, msg.version);
    }
    if (msg.createdAt) {
      writer.writeInt32(8, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeInt32(9, msg.updatedAt);
    }
    if (msg.totalRevenue) {
      writer.writeString(10, msg.totalRevenue);
    }
    if (msg.pledged) {
      writer.writeBool(11, msg.pledged);
    }
    if (msg.expandBuyAmount) {
      writer.writeString(12, msg.expandBuyAmount);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserEarningProduct,
    reader: BinaryReader
  ): UserEarningProduct {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.earningProductId = reader.readInt32();
          break;
        }
        case 4: {
          msg.amount = reader.readString();
          break;
        }
        case 5: {
          msg.queuingBuyAmount = reader.readString();
          break;
        }
        case 6: {
          msg.queuingRedeemAmount = reader.readString();
          break;
        }
        case 7: {
          msg.version = reader.readString();
          break;
        }
        case 8: {
          msg.createdAt = reader.readInt32();
          break;
        }
        case 9: {
          msg.updatedAt = reader.readInt32();
          break;
        }
        case 10: {
          msg.totalRevenue = reader.readString();
          break;
        }
        case 11: {
          msg.pledged = reader.readBool();
          break;
        }
        case 12: {
          msg.expandBuyAmount = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListMyEarningProductsRequest = {
  /**
   * Serializes ListMyEarningProductsRequest to protobuf.
   */
  encode: function (_msg?: Partial<ListMyEarningProductsRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ListMyEarningProductsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ListMyEarningProductsRequest {
    return {};
  },

  /**
   * Initializes ListMyEarningProductsRequest with all fields set to their default value.
   */
  initialize: function (): ListMyEarningProductsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ListMyEarningProductsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ListMyEarningProductsRequest,
    _reader: BinaryReader
  ): ListMyEarningProductsRequest {
    return _msg;
  },
};

export const ListMyEarningProductsResponse = {
  /**
   * Serializes ListMyEarningProductsResponse to protobuf.
   */
  encode: function (msg: Partial<ListMyEarningProductsResponse>): Uint8Array {
    return ListMyEarningProductsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListMyEarningProductsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListMyEarningProductsResponse {
    return ListMyEarningProductsResponse._readMessage(
      ListMyEarningProductsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListMyEarningProductsResponse with all fields set to their default value.
   */
  initialize: function (): ListMyEarningProductsResponse {
    return {
      products: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListMyEarningProductsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.products?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.products as any,
        UserEarningProduct._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMyEarningProductsResponse,
    reader: BinaryReader
  ): ListMyEarningProductsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = UserEarningProduct.initialize();
          reader.readMessage(m, UserEarningProduct._readMessage);
          msg.products.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMyEarningProductRequest = {
  /**
   * Serializes GetMyEarningProductRequest to protobuf.
   */
  encode: function (msg: Partial<GetMyEarningProductRequest>): Uint8Array {
    return GetMyEarningProductRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMyEarningProductRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetMyEarningProductRequest {
    return GetMyEarningProductRequest._readMessage(
      GetMyEarningProductRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetMyEarningProductRequest with all fields set to their default value.
   */
  initialize: function (): GetMyEarningProductRequest {
    return {
      id: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMyEarningProductRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMyEarningProductRequest,
    reader: BinaryReader
  ): GetMyEarningProductRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMyEarningProductResponse = {
  /**
   * Serializes GetMyEarningProductResponse to protobuf.
   */
  encode: function (msg: Partial<GetMyEarningProductResponse>): Uint8Array {
    return GetMyEarningProductResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMyEarningProductResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetMyEarningProductResponse {
    return GetMyEarningProductResponse._readMessage(
      GetMyEarningProductResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetMyEarningProductResponse with all fields set to their default value.
   */
  initialize: function (): GetMyEarningProductResponse {
    return {
      product: UserEarningProduct.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMyEarningProductResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.product) {
      writer.writeMessage(1, msg.product, UserEarningProduct._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMyEarningProductResponse,
    reader: BinaryReader
  ): GetMyEarningProductResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.product, UserEarningProduct._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetEventRequest = {
  /**
   * Serializes GetEventRequest to protobuf.
   */
  encode: function (msg: Partial<GetEventRequest>): Uint8Array {
    return GetEventRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetEventRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetEventRequest {
    return GetEventRequest._readMessage(
      GetEventRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetEventRequest with all fields set to their default value.
   */
  initialize: function (): GetEventRequest {
    return {
      followId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetEventRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.followId) {
      writer.writeString(1, msg.followId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEventRequest,
    reader: BinaryReader
  ): GetEventRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.followId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Event = {
  /**
   * Serializes Event to protobuf.
   */
  encode: function (msg: Partial<Event>): Uint8Array {
    return Event._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Event from protobuf.
   */
  decode: function (bytes: ByteSource): Event {
    return Event._readMessage(Event.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Event with all fields set to their default value.
   */
  initialize: function (): Event {
    return {
      id: "",
      userId: "",
      action: EventAction.Enum._fromInt(0),
      productId: 0,
      assetId: "",
      amount: "",
      filledAmount: "",
      status: EventStatus.Enum._fromInt(0),
      error: EventError.Enum._fromInt(0),
      followId: "",
      createdAt: 0,
      queuingAheadAmount: "",
      interestPaymentDate: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Event>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.action && EventAction.Enum._toInt(msg.action)) {
      writer.writeEnum(3, EventAction.Enum._toInt(msg.action));
    }
    if (msg.productId) {
      writer.writeInt32(4, msg.productId);
    }
    if (msg.assetId) {
      writer.writeString(5, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(6, msg.amount);
    }
    if (msg.filledAmount) {
      writer.writeString(7, msg.filledAmount);
    }
    if (msg.status && EventStatus.Enum._toInt(msg.status)) {
      writer.writeEnum(8, EventStatus.Enum._toInt(msg.status));
    }
    if (msg.error && EventError.Enum._toInt(msg.error)) {
      writer.writeEnum(9, EventError.Enum._toInt(msg.error));
    }
    if (msg.followId) {
      writer.writeString(10, msg.followId);
    }
    if (msg.createdAt) {
      writer.writeInt32(11, msg.createdAt);
    }
    if (msg.queuingAheadAmount) {
      writer.writeString(12, msg.queuingAheadAmount);
    }
    if (msg.interestPaymentDate) {
      writer.writeString(13, msg.interestPaymentDate);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Event, reader: BinaryReader): Event {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.action = EventAction.Enum._fromInt(reader.readEnum());
          break;
        }
        case 4: {
          msg.productId = reader.readInt32();
          break;
        }
        case 5: {
          msg.assetId = reader.readString();
          break;
        }
        case 6: {
          msg.amount = reader.readString();
          break;
        }
        case 7: {
          msg.filledAmount = reader.readString();
          break;
        }
        case 8: {
          msg.status = EventStatus.Enum._fromInt(reader.readEnum());
          break;
        }
        case 9: {
          msg.error = EventError.Enum._fromInt(reader.readEnum());
          break;
        }
        case 10: {
          msg.followId = reader.readString();
          break;
        }
        case 11: {
          msg.createdAt = reader.readInt32();
          break;
        }
        case 12: {
          msg.queuingAheadAmount = reader.readString();
          break;
        }
        case 13: {
          msg.interestPaymentDate = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetEventResponse = {
  /**
   * Serializes GetEventResponse to protobuf.
   */
  encode: function (msg: Partial<GetEventResponse>): Uint8Array {
    return GetEventResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetEventResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetEventResponse {
    return GetEventResponse._readMessage(
      GetEventResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetEventResponse with all fields set to their default value.
   */
  initialize: function (): GetEventResponse {
    return {
      event: Event.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetEventResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.event) {
      writer.writeMessage(1, msg.event, Event._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEventResponse,
    reader: BinaryReader
  ): GetEventResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.event, Event._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListEventsRequest = {
  /**
   * Serializes ListEventsRequest to protobuf.
   */
  encode: function (msg: Partial<ListEventsRequest>): Uint8Array {
    return ListEventsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListEventsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListEventsRequest {
    return ListEventsRequest._readMessage(
      ListEventsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListEventsRequest with all fields set to their default value.
   */
  initialize: function (): ListEventsRequest {
    return {
      earningProductId: 0,
      actions: [],
      statuses: [],
      offset: 0,
      limit: 0,
      startAt: 0,
      endAt: 0,
      productType: EarningProductType.Enum._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListEventsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.earningProductId) {
      writer.writeInt32(1, msg.earningProductId);
    }
    if (msg.actions?.length) {
      writer.writePackedEnum(2, msg.actions.map(EventAction.Enum._toInt));
    }
    if (msg.statuses?.length) {
      writer.writePackedEnum(3, msg.statuses.map(EventStatus.Enum._toInt));
    }
    if (msg.offset) {
      writer.writeInt32(4, msg.offset);
    }
    if (msg.limit) {
      writer.writeInt32(5, msg.limit);
    }
    if (msg.startAt) {
      writer.writeInt32(6, msg.startAt);
    }
    if (msg.endAt) {
      writer.writeInt32(7, msg.endAt);
    }
    if (msg.productType && EarningProductType.Enum._toInt(msg.productType)) {
      writer.writeEnum(8, EarningProductType.Enum._toInt(msg.productType));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEventsRequest,
    reader: BinaryReader
  ): ListEventsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.earningProductId = reader.readInt32();
          break;
        }
        case 2: {
          if (reader.isDelimited()) {
            msg.actions.push(
              ...reader.readPackedEnum().map(EventAction.Enum._fromInt)
            );
          } else {
            msg.actions.push(EventAction.Enum._fromInt(reader.readEnum()));
          }
          break;
        }
        case 3: {
          if (reader.isDelimited()) {
            msg.statuses.push(
              ...reader.readPackedEnum().map(EventStatus.Enum._fromInt)
            );
          } else {
            msg.statuses.push(EventStatus.Enum._fromInt(reader.readEnum()));
          }
          break;
        }
        case 4: {
          msg.offset = reader.readInt32();
          break;
        }
        case 5: {
          msg.limit = reader.readInt32();
          break;
        }
        case 6: {
          msg.startAt = reader.readInt32();
          break;
        }
        case 7: {
          msg.endAt = reader.readInt32();
          break;
        }
        case 8: {
          msg.productType = EarningProductType.Enum._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListEventsResponse = {
  /**
   * Serializes ListEventsResponse to protobuf.
   */
  encode: function (msg: Partial<ListEventsResponse>): Uint8Array {
    return ListEventsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListEventsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListEventsResponse {
    return ListEventsResponse._readMessage(
      ListEventsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListEventsResponse with all fields set to their default value.
   */
  initialize: function (): ListEventsResponse {
    return {
      events: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListEventsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.events?.length) {
      writer.writeRepeatedMessage(1, msg.events as any, Event._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEventsResponse,
    reader: BinaryReader
  ): ListEventsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Event.initialize();
          reader.readMessage(m, Event._readMessage);
          msg.events.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Audit = {
  /**
   * Serializes Audit to protobuf.
   */
  encode: function (msg: Partial<Audit>): Uint8Array {
    return Audit._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Audit from protobuf.
   */
  decode: function (bytes: ByteSource): Audit {
    return Audit._readMessage(Audit.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Audit with all fields set to their default value.
   */
  initialize: function (): Audit {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      assetId: "",
      amount: "",
      userId: "",
      status: Audit.Status._fromInt(0),
      memo: "",
      reviewedBy: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Audit>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.createdAt) {
      writer.writeMessage(2, msg.createdAt, Timestamp._writeMessage);
    }
    if (msg.assetId) {
      writer.writeString(3, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(4, msg.amount);
    }
    if (msg.userId) {
      writer.writeString(5, msg.userId);
    }
    if (msg.status && Audit.Status._toInt(msg.status)) {
      writer.writeEnum(6, Audit.Status._toInt(msg.status));
    }
    if (msg.memo) {
      writer.writeString(7, msg.memo);
    }
    if (msg.reviewedBy) {
      writer.writeString(8, msg.reviewedBy);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Audit, reader: BinaryReader): Audit {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.createdAt, Timestamp._readMessage);
          break;
        }
        case 3: {
          msg.assetId = reader.readString();
          break;
        }
        case 4: {
          msg.amount = reader.readString();
          break;
        }
        case 5: {
          msg.userId = reader.readString();
          break;
        }
        case 6: {
          msg.status = Audit.Status._fromInt(reader.readEnum());
          break;
        }
        case 7: {
          msg.memo = reader.readString();
          break;
        }
        case 8: {
          msg.reviewedBy = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Status: {
    NOT_SET: "NOT_SET",
    REJECTED: "REJECTED",
    APPROVED: "APPROVED",
    /**
     * @private
     */
    _fromInt: function (i: number): Audit.Status {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "REJECTED";
        }
        case 2: {
          return "APPROVED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Audit.Status;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Audit.Status): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "REJECTED": {
          return 1;
        }
        case "APPROVED": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const FindAuditRequest = {
  /**
   * Serializes FindAuditRequest to protobuf.
   */
  encode: function (msg: Partial<FindAuditRequest>): Uint8Array {
    return FindAuditRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes FindAuditRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FindAuditRequest {
    return FindAuditRequest._readMessage(
      FindAuditRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FindAuditRequest with all fields set to their default value.
   */
  initialize: function (): FindAuditRequest {
    return {
      id: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindAuditRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindAuditRequest,
    reader: BinaryReader
  ): FindAuditRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FindAuditResponse = {
  /**
   * Serializes FindAuditResponse to protobuf.
   */
  encode: function (msg: Partial<FindAuditResponse>): Uint8Array {
    return FindAuditResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes FindAuditResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FindAuditResponse {
    return FindAuditResponse._readMessage(
      FindAuditResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FindAuditResponse with all fields set to their default value.
   */
  initialize: function (): FindAuditResponse {
    return {
      audit: Audit.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindAuditResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.audit) {
      writer.writeMessage(1, msg.audit, Audit._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindAuditResponse,
    reader: BinaryReader
  ): FindAuditResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.audit, Audit._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAuditsRequest = {
  /**
   * Serializes ListAuditsRequest to protobuf.
   */
  encode: function (msg: Partial<ListAuditsRequest>): Uint8Array {
    return ListAuditsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAuditsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListAuditsRequest {
    return ListAuditsRequest._readMessage(
      ListAuditsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListAuditsRequest with all fields set to their default value.
   */
  initialize: function (): ListAuditsRequest {
    return {
      offset: Timestamp.initialize(),
      limit: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAuditsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.offset) {
      writer.writeMessage(1, msg.offset, Timestamp._writeMessage);
    }
    if (msg.limit) {
      writer.writeInt64String(2, msg.limit.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsRequest,
    reader: BinaryReader
  ): ListAuditsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.offset, Timestamp._readMessage);
          break;
        }
        case 2: {
          msg.limit = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListAuditsResponse = {
  /**
   * Serializes ListAuditsResponse to protobuf.
   */
  encode: function (msg: Partial<ListAuditsResponse>): Uint8Array {
    return ListAuditsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ListAuditsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListAuditsResponse {
    return ListAuditsResponse._readMessage(
      ListAuditsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ListAuditsResponse with all fields set to their default value.
   */
  initialize: function (): ListAuditsResponse {
    return {
      audits: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAuditsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.audits?.length) {
      writer.writeRepeatedMessage(1, msg.audits as any, Audit._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsResponse,
    reader: BinaryReader
  ): ListAuditsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Audit.initialize();
          reader.readMessage(m, Audit._readMessage);
          msg.audits.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserVault = {
  /**
   * Serializes UserVault to protobuf.
   */
  encode: function (msg: Partial<UserVault>): Uint8Array {
    return UserVault._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes UserVault from protobuf.
   */
  decode: function (bytes: ByteSource): UserVault {
    return UserVault._readMessage(
      UserVault.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UserVault with all fields set to their default value.
   */
  initialize: function (): UserVault {
    return {
      userId: "",
      productId: 0,
      productName: "",
      assetId: "",
      amount: "",
      pledged: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserVault>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.productId) {
      writer.writeInt32(2, msg.productId);
    }
    if (msg.productName) {
      writer.writeString(3, msg.productName);
    }
    if (msg.assetId) {
      writer.writeString(4, msg.assetId);
    }
    if (msg.amount) {
      writer.writeString(5, msg.amount);
    }
    if (msg.pledged) {
      writer.writeBool(6, msg.pledged);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserVault, reader: BinaryReader): UserVault {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.productId = reader.readInt32();
          break;
        }
        case 3: {
          msg.productName = reader.readString();
          break;
        }
        case 4: {
          msg.assetId = reader.readString();
          break;
        }
        case 5: {
          msg.amount = reader.readString();
          break;
        }
        case 6: {
          msg.pledged = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserVaultsRequest = {
  /**
   * Serializes GetUserVaultsRequest to protobuf.
   */
  encode: function (msg: Partial<GetUserVaultsRequest>): Uint8Array {
    return GetUserVaultsRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserVaultsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserVaultsRequest {
    return GetUserVaultsRequest._readMessage(
      GetUserVaultsRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetUserVaultsRequest with all fields set to their default value.
   */
  initialize: function (): GetUserVaultsRequest {
    return {
      userId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserVaultsRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserVaultsRequest,
    reader: BinaryReader
  ): GetUserVaultsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserVaultsResponse = {
  /**
   * Serializes GetUserVaultsResponse to protobuf.
   */
  encode: function (msg: Partial<GetUserVaultsResponse>): Uint8Array {
    return GetUserVaultsResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserVaultsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserVaultsResponse {
    return GetUserVaultsResponse._readMessage(
      GetUserVaultsResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetUserVaultsResponse with all fields set to their default value.
   */
  initialize: function (): GetUserVaultsResponse {
    return {
      vaults: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserVaultsResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.vaults?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.vaults as any,
        UserVault._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserVaultsResponse,
    reader: BinaryReader
  ): GetUserVaultsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = UserVault.initialize();
          reader.readMessage(m, UserVault._readMessage);
          msg.vaults.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserEventRequest = {
  /**
   * Serializes GetUserEventRequest to protobuf.
   */
  encode: function (msg: Partial<GetUserEventRequest>): Uint8Array {
    return GetUserEventRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserEventRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserEventRequest {
    return GetUserEventRequest._readMessage(
      GetUserEventRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetUserEventRequest with all fields set to their default value.
   */
  initialize: function (): GetUserEventRequest {
    return {
      followId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserEventRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.followId) {
      writer.writeString(1, msg.followId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserEventRequest,
    reader: BinaryReader
  ): GetUserEventRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.followId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserEventResponse = {
  /**
   * Serializes GetUserEventResponse to protobuf.
   */
  encode: function (msg: Partial<GetUserEventResponse>): Uint8Array {
    return GetUserEventResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserEventResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserEventResponse {
    return GetUserEventResponse._readMessage(
      GetUserEventResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetUserEventResponse with all fields set to their default value.
   */
  initialize: function (): GetUserEventResponse {
    return {
      event: Event.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserEventResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.event) {
      writer.writeMessage(1, msg.event, Event._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserEventResponse,
    reader: BinaryReader
  ): GetUserEventResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.event, Event._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const EventErrorJSON = {
  /**
   * Serializes EventError to JSON.
   */
  encode: function (_msg?: Partial<EventError>): string {
    return "{}";
  },

  /**
   * Deserializes EventError from JSON.
   */
  decode: function (_json?: string): EventError {
    return {};
  },

  /**
   * Initializes EventError with all fields set to their default value.
   */
  initialize: function (): EventError {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg: Partial<EventError>): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventError, _json: any): EventError {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    /**
     * buy / redeem / admin_expand / admin_merge_expansion
     */
    EARNING_PRODUCT_STATUS_MISMATCH: "EARNING_PRODUCT_STATUS_MISMATCH",
    /**
     * buy / admin_interest_payment
     */
    EARNING_PRODUCT_ASSET_MISMATCH: "EARNING_PRODUCT_ASSET_MISMATCH",
    /**
     * buy
     */
    EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED:
      "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED",
    /**
     * buy
     */
    EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED:
      "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED",
    /**
     * buy
     */
    EARNING_PRODUCT_INSUFFICIENT: "EARNING_PRODUCT_INSUFFICIENT",
    /**
     * redeem
     */
    USER_EARNING_PRODUCT_SHARE_INSUFFICIENT:
      "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT",
    /**
     * cancel_queue
     */
    EARNING_EVENT_MISMATCH: "EARNING_EVENT_MISMATCH",
    /**
     * buy or redeem
     */
    USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT:
      "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT",
    /**
     * admin_interest_payment
     */
    EARNING_PRODUCT_NOT_FOUND: "EARNING_PRODUCT_NOT_FOUND",
    /**
     * admin_interest_payment
     */
    USER_EARNING_PRODUCT_EOD_NOT_FOUND: "USER_EARNING_PRODUCT_EOD_NOT_FOUND",
    /**
     * redeem
     */
    USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED:
      "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED",
    /**
     * admin_interest_payment
     */
    EOD_ALREADY_APPLIED: "EOD_ALREADY_APPLIED",
    /**
     * admin_audit_approve / admin_audit_reject
     */
    AUDIT_NOT_FOUND: "AUDIT_NOT_FOUND",
    /**
     * admin_audit_approve / admin_audit_reject
     */
    AUDIT_STATUS_MISMATCH: "AUDIT_STATUS_MISMATCH",
    /**
     * buy / redeem
     */
    EARNING_PRODUCT_PRECISION_UNSATISFIED:
      "EARNING_PRODUCT_PRECISION_UNSATISFIED",
    /**
     * buy
     */
    USER_NOT_IN_WHITELIST: "USER_NOT_IN_WHITELIST",
    /**
     * pledge / cancel_pledge / redeem
     */
    USER_EARNING_PRODUCT_NOT_FOUND: "USER_EARNING_PRODUCT_NOT_FOUND",
    /**
     * @private
     */
    _fromInt: function (i: number): EventError.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "EARNING_PRODUCT_STATUS_MISMATCH";
        }
        case 2: {
          return "EARNING_PRODUCT_ASSET_MISMATCH";
        }
        case 3: {
          return "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED";
        }
        case 4: {
          return "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED";
        }
        case 5: {
          return "EARNING_PRODUCT_INSUFFICIENT";
        }
        case 6: {
          return "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT";
        }
        case 7: {
          return "EARNING_EVENT_MISMATCH";
        }
        case 8: {
          return "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT";
        }
        case 9: {
          return "EARNING_PRODUCT_NOT_FOUND";
        }
        case 10: {
          return "USER_EARNING_PRODUCT_EOD_NOT_FOUND";
        }
        case 11: {
          return "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED";
        }
        case 12: {
          return "EOD_ALREADY_APPLIED";
        }
        case 13: {
          return "AUDIT_NOT_FOUND";
        }
        case 14: {
          return "AUDIT_STATUS_MISMATCH";
        }
        case 15: {
          return "EARNING_PRODUCT_PRECISION_UNSATISFIED";
        }
        case 16: {
          return "USER_NOT_IN_WHITELIST";
        }
        case 17: {
          return "USER_EARNING_PRODUCT_NOT_FOUND";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventError.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventError.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "EARNING_PRODUCT_STATUS_MISMATCH": {
          return 1;
        }
        case "EARNING_PRODUCT_ASSET_MISMATCH": {
          return 2;
        }
        case "EARNING_PRODUCT_MIN_PER_ORDER_UNSATISFIED": {
          return 3;
        }
        case "EARNING_PRODUCT_MAX_PER_ORDER_UNSATISFIED": {
          return 4;
        }
        case "EARNING_PRODUCT_INSUFFICIENT": {
          return 5;
        }
        case "USER_EARNING_PRODUCT_SHARE_INSUFFICIENT": {
          return 6;
        }
        case "EARNING_EVENT_MISMATCH": {
          return 7;
        }
        case "USER_EARNING_PRODUCT_HAS_REVERSED_QUEUING_EVENT": {
          return 8;
        }
        case "EARNING_PRODUCT_NOT_FOUND": {
          return 9;
        }
        case "USER_EARNING_PRODUCT_EOD_NOT_FOUND": {
          return 10;
        }
        case "USER_EARNING_PRODUCT_HAS_BEEN_PLEDGED": {
          return 11;
        }
        case "EOD_ALREADY_APPLIED": {
          return 12;
        }
        case "AUDIT_NOT_FOUND": {
          return 13;
        }
        case "AUDIT_STATUS_MISMATCH": {
          return 14;
        }
        case "EARNING_PRODUCT_PRECISION_UNSATISFIED": {
          return 15;
        }
        case "USER_NOT_IN_WHITELIST": {
          return 16;
        }
        case "USER_EARNING_PRODUCT_NOT_FOUND": {
          return 17;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EventActionJSON = {
  /**
   * Serializes EventAction to JSON.
   */
  encode: function (_msg?: Partial<EventAction>): string {
    return "{}";
  },

  /**
   * Deserializes EventAction from JSON.
   */
  decode: function (_json?: string): EventAction {
    return {};
  },

  /**
   * Initializes EventAction with all fields set to their default value.
   */
  initialize: function (): EventAction {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<EventAction>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventAction, _json: any): EventAction {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    BUY: "BUY",
    REDEEM: "REDEEM",
    DEPOSIT: "DEPOSIT",
    INTEREST_PAYMENT: "INTEREST_PAYMENT",
    CANCEL_QUEUE: "CANCEL_QUEUE",
    ADMIN_INTEREST_PAYMENT: "ADMIN_INTEREST_PAYMENT",
    ADMIN_PRODUCT_EXPAND: "ADMIN_PRODUCT_EXPAND",
    ADMIN_PRODUCT_MERGE_EXPANSION: "ADMIN_PRODUCT_MERGE_EXPANSION",
    ADMIN_PLEDGE: "ADMIN_PLEDGE",
    ADMIN_CANCEL_PLEDGE: "ADMIN_CANCEL_PLEDGE",
    ADMIN_LEGACY_ASSET_MIGRATION: "ADMIN_LEGACY_ASSET_MIGRATION",
    ADMIN_AUDIT_APPROVE: "ADMIN_AUDIT_APPROVE",
    ADMIN_AUDIT_REJECT: "ADMIN_AUDIT_REJECT",
    ADMIN_AUTO_REVISE_PRODUCT_CAPACITY: "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY",
    ADMIN_LIQUIDATION: "ADMIN_LIQUIDATION",
    /**
     * @private
     */
    _fromInt: function (i: number): EventAction.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "BUY";
        }
        case 2: {
          return "REDEEM";
        }
        case 3: {
          return "DEPOSIT";
        }
        case 4: {
          return "INTEREST_PAYMENT";
        }
        case 5: {
          return "CANCEL_QUEUE";
        }
        case 100: {
          return "ADMIN_INTEREST_PAYMENT";
        }
        case 101: {
          return "ADMIN_PRODUCT_EXPAND";
        }
        case 102: {
          return "ADMIN_PRODUCT_MERGE_EXPANSION";
        }
        case 103: {
          return "ADMIN_PLEDGE";
        }
        case 104: {
          return "ADMIN_CANCEL_PLEDGE";
        }
        case 105: {
          return "ADMIN_LEGACY_ASSET_MIGRATION";
        }
        case 106: {
          return "ADMIN_AUDIT_APPROVE";
        }
        case 107: {
          return "ADMIN_AUDIT_REJECT";
        }
        case 108: {
          return "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY";
        }
        case 109: {
          return "ADMIN_LIQUIDATION";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventAction.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventAction.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "BUY": {
          return 1;
        }
        case "REDEEM": {
          return 2;
        }
        case "DEPOSIT": {
          return 3;
        }
        case "INTEREST_PAYMENT": {
          return 4;
        }
        case "CANCEL_QUEUE": {
          return 5;
        }
        case "ADMIN_INTEREST_PAYMENT": {
          return 100;
        }
        case "ADMIN_PRODUCT_EXPAND": {
          return 101;
        }
        case "ADMIN_PRODUCT_MERGE_EXPANSION": {
          return 102;
        }
        case "ADMIN_PLEDGE": {
          return 103;
        }
        case "ADMIN_CANCEL_PLEDGE": {
          return 104;
        }
        case "ADMIN_LEGACY_ASSET_MIGRATION": {
          return 105;
        }
        case "ADMIN_AUDIT_APPROVE": {
          return 106;
        }
        case "ADMIN_AUDIT_REJECT": {
          return 107;
        }
        case "ADMIN_AUTO_REVISE_PRODUCT_CAPACITY": {
          return 108;
        }
        case "ADMIN_LIQUIDATION": {
          return 109;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EventStatusJSON = {
  /**
   * Serializes EventStatus to JSON.
   */
  encode: function (_msg?: Partial<EventStatus>): string {
    return "{}";
  },

  /**
   * Deserializes EventStatus from JSON.
   */
  decode: function (_json?: string): EventStatus {
    return {};
  },

  /**
   * Initializes EventStatus with all fields set to their default value.
   */
  initialize: function (): EventStatus {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<EventStatus>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventStatus, _json: any): EventStatus {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    INIT: "INIT",
    PENDING: "PENDING",
    QUEUING: "QUEUING",
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    /**
     * @private
     */
    _fromInt: function (i: number): EventStatus.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "INIT";
        }
        case 2: {
          return "PENDING";
        }
        case 3: {
          return "QUEUING";
        }
        case 4: {
          return "CANCELLED";
        }
        case 5: {
          return "COMPLETED";
        }
        case 6: {
          return "FAILED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EventStatus.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EventStatus.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "INIT": {
          return 1;
        }
        case "PENDING": {
          return 2;
        }
        case "QUEUING": {
          return 3;
        }
        case "CANCELLED": {
          return 4;
        }
        case "COMPLETED": {
          return 5;
        }
        case "FAILED": {
          return 6;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningProductStatusJSON = {
  /**
   * Serializes EarningProductStatus to JSON.
   */
  encode: function (_msg?: Partial<EarningProductStatus>): string {
    return "{}";
  },

  /**
   * Deserializes EarningProductStatus from JSON.
   */
  decode: function (_json?: string): EarningProductStatus {
    return {};
  },

  /**
   * Initializes EarningProductStatus with all fields set to their default value.
   */
  initialize: function (): EarningProductStatus {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<EarningProductStatus>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningProductStatus,
    _json: any
  ): EarningProductStatus {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    RECRUITING: "RECRUITING",
    RUNNING: "RUNNING",
    EXPANDING: "EXPANDING",
    DEACTIVATED: "DEACTIVATED",
    /**
     * @private
     */
    _fromInt: function (i: number): EarningProductStatus.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "RECRUITING";
        }
        case 2: {
          return "RUNNING";
        }
        case 3: {
          return "EXPANDING";
        }
        case 4: {
          return "DEACTIVATED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EarningProductStatus.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EarningProductStatus.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "RECRUITING": {
          return 1;
        }
        case "RUNNING": {
          return 2;
        }
        case "EXPANDING": {
          return 3;
        }
        case "DEACTIVATED": {
          return 4;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningProductTypeJSON = {
  /**
   * Serializes EarningProductType to JSON.
   */
  encode: function (_msg?: Partial<EarningProductType>): string {
    return "{}";
  },

  /**
   * Deserializes EarningProductType from JSON.
   */
  decode: function (_json?: string): EarningProductType {
    return {};
  },

  /**
   * Initializes EarningProductType with all fields set to their default value.
   */
  initialize: function (): EarningProductType {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<EarningProductType>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningProductType,
    _json: any
  ): EarningProductType {
    return msg;
  },

  Enum: {
    NOT_SET: "NOT_SET",
    STAKING: "STAKING",
    SAVINGS: "SAVINGS",
    /**
     * @private
     */
    _fromInt: function (i: number): EarningProductType.Enum {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "STAKING";
        }
        case 2: {
          return "SAVINGS";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as EarningProductType.Enum;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: EarningProductType.Enum): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "STAKING": {
          return 1;
        }
        case "SAVINGS": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const EarningSnapshotBuyDataJSON = {
  /**
   * Serializes EarningSnapshotBuyData to JSON.
   */
  encode: function (msg: Partial<EarningSnapshotBuyData>): string {
    return JSON.stringify(EarningSnapshotBuyDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes EarningSnapshotBuyData from JSON.
   */
  decode: function (json: string): EarningSnapshotBuyData {
    return EarningSnapshotBuyDataJSON._readMessage(
      EarningSnapshotBuyDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotBuyData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotBuyData {
    return {
      productId: 0,
      productStatus: EarningProductStatus.Enum._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotBuyData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json.productId = msg.productId;
    }
    if (
      msg.productStatus &&
      EarningProductStatusJSON.Enum._toInt(msg.productStatus)
    ) {
      json.productStatus = msg.productStatus;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotBuyData,
    json: any
  ): EarningSnapshotBuyData {
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    const _productStatus = json.productStatus ?? json.product_status;
    if (_productStatus) {
      msg.productStatus = _productStatus;
    }
    return msg;
  },
};

export const EarningSnapshotRedeemDataJSON = {
  /**
   * Serializes EarningSnapshotRedeemData to JSON.
   */
  encode: function (msg: Partial<EarningSnapshotRedeemData>): string {
    return JSON.stringify(EarningSnapshotRedeemDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes EarningSnapshotRedeemData from JSON.
   */
  decode: function (json: string): EarningSnapshotRedeemData {
    return EarningSnapshotRedeemDataJSON._readMessage(
      EarningSnapshotRedeemDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotRedeemData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotRedeemData {
    return {
      productId: 0,
      amount: 0n,
      productStatus: EarningProductStatus.Enum._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotRedeemData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json.productId = msg.productId;
    }
    if (msg.amount) {
      json.amount = msg.amount.toString();
    }
    if (
      msg.productStatus &&
      EarningProductStatusJSON.Enum._toInt(msg.productStatus)
    ) {
      json.productStatus = msg.productStatus;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotRedeemData,
    json: any
  ): EarningSnapshotRedeemData {
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = BigInt(_amount);
    }
    const _productStatus = json.productStatus ?? json.product_status;
    if (_productStatus) {
      msg.productStatus = _productStatus;
    }
    return msg;
  },
};

export const EarningSnapshotCancelQueueDataJSON = {
  /**
   * Serializes EarningSnapshotCancelQueueData to JSON.
   */
  encode: function (msg: Partial<EarningSnapshotCancelQueueData>): string {
    return JSON.stringify(
      EarningSnapshotCancelQueueDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotCancelQueueData from JSON.
   */
  decode: function (json: string): EarningSnapshotCancelQueueData {
    return EarningSnapshotCancelQueueDataJSON._readMessage(
      EarningSnapshotCancelQueueDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotCancelQueueData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotCancelQueueData {
    return {
      eventId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotCancelQueueData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventId) {
      json.eventId = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotCancelQueueData,
    json: any
  ): EarningSnapshotCancelQueueData {
    const _eventId = json.eventId ?? json.event_id;
    if (_eventId) {
      msg.eventId = _eventId;
    }
    return msg;
  },
};

export const EarningSnapshotAdminInterestPaymentDataJSON = {
  /**
   * Serializes EarningSnapshotAdminInterestPaymentData to JSON.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminInterestPaymentData>
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminInterestPaymentDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminInterestPaymentData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminInterestPaymentData {
    return EarningSnapshotAdminInterestPaymentDataJSON._readMessage(
      EarningSnapshotAdminInterestPaymentDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminInterestPaymentData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminInterestPaymentData {
    return {
      productId: 0,
      productType: EarningProductType.Enum._fromInt(0),
      date: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminInterestPaymentData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json.productId = msg.productId;
    }
    if (
      msg.productType &&
      EarningProductTypeJSON.Enum._toInt(msg.productType)
    ) {
      json.productType = msg.productType;
    }
    if (msg.date) {
      json.date = msg.date;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminInterestPaymentData,
    json: any
  ): EarningSnapshotAdminInterestPaymentData {
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    const _productType = json.productType ?? json.product_type;
    if (_productType) {
      msg.productType = _productType;
    }
    const _date = json.date;
    if (_date) {
      msg.date = _date;
    }
    return msg;
  },
};

export const EarningSnapshotAdminProductExpandDataJSON = {
  /**
   * Serializes EarningSnapshotAdminProductExpandData to JSON.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminProductExpandData>
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminProductExpandDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminProductExpandData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminProductExpandData {
    return EarningSnapshotAdminProductExpandDataJSON._readMessage(
      EarningSnapshotAdminProductExpandDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminProductExpandData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminProductExpandData {
    return {
      productId: 0,
      amount: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminProductExpandData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json.productId = msg.productId;
    }
    if (msg.amount) {
      json.amount = msg.amount.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminProductExpandData,
    json: any
  ): EarningSnapshotAdminProductExpandData {
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = BigInt(_amount);
    }
    return msg;
  },
};

export const EarningSnapshotAdminProductMergeExpansionDataJSON = {
  /**
   * Serializes EarningSnapshotAdminProductMergeExpansionData to JSON.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminProductMergeExpansionData>
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminProductMergeExpansionDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminProductMergeExpansionData from JSON.
   */
  decode: function (
    json: string
  ): EarningSnapshotAdminProductMergeExpansionData {
    return EarningSnapshotAdminProductMergeExpansionDataJSON._readMessage(
      EarningSnapshotAdminProductMergeExpansionDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminProductMergeExpansionData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminProductMergeExpansionData {
    return {
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminProductMergeExpansionData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json.productId = msg.productId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminProductMergeExpansionData,
    json: any
  ): EarningSnapshotAdminProductMergeExpansionData {
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    return msg;
  },
};

export const EarningSnapshotAdminPledgeDataJSON = {
  /**
   * Serializes EarningSnapshotAdminPledgeData to JSON.
   */
  encode: function (msg: Partial<EarningSnapshotAdminPledgeData>): string {
    return JSON.stringify(
      EarningSnapshotAdminPledgeDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminPledgeData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminPledgeData {
    return EarningSnapshotAdminPledgeDataJSON._readMessage(
      EarningSnapshotAdminPledgeDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminPledgeData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminPledgeData {
    return {
      userId: "",
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminPledgeData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.productId) {
      json.productId = msg.productId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminPledgeData,
    json: any
  ): EarningSnapshotAdminPledgeData {
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    return msg;
  },
};

export const EarningSnapshotAdminCancelPledgeDataJSON = {
  /**
   * Serializes EarningSnapshotAdminCancelPledgeData to JSON.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminCancelPledgeData>
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminCancelPledgeDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminCancelPledgeData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminCancelPledgeData {
    return EarningSnapshotAdminCancelPledgeDataJSON._readMessage(
      EarningSnapshotAdminCancelPledgeDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminCancelPledgeData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminCancelPledgeData {
    return {
      userId: "",
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminCancelPledgeData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.productId) {
      json.productId = msg.productId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminCancelPledgeData,
    json: any
  ): EarningSnapshotAdminCancelPledgeData {
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    return msg;
  },
};

export const EarningSnapshotAdminLegacyAssetMigrationDataJSON = {
  /**
   * Serializes EarningSnapshotAdminLegacyAssetMigrationData to JSON.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminLegacyAssetMigrationData>
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminLegacyAssetMigrationDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminLegacyAssetMigrationData from JSON.
   */
  decode: function (
    json: string
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    return EarningSnapshotAdminLegacyAssetMigrationDataJSON._readMessage(
      EarningSnapshotAdminLegacyAssetMigrationDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminLegacyAssetMigrationData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminLegacyAssetMigrationData {
    return {
      userId: "",
      productId: 0,
      amount: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminLegacyAssetMigrationData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.productId) {
      json.productId = msg.productId;
    }
    if (msg.amount) {
      json.amount = msg.amount.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminLegacyAssetMigrationData,
    json: any
  ): EarningSnapshotAdminLegacyAssetMigrationData {
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = BigInt(_amount);
    }
    return msg;
  },
};

export const EarningSnapshotAdminLiquidationDataJSON = {
  /**
   * Serializes EarningSnapshotAdminLiquidationData to JSON.
   */
  encode: function (msg: Partial<EarningSnapshotAdminLiquidationData>): string {
    return JSON.stringify(
      EarningSnapshotAdminLiquidationDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminLiquidationData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminLiquidationData {
    return EarningSnapshotAdminLiquidationDataJSON._readMessage(
      EarningSnapshotAdminLiquidationDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminLiquidationData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminLiquidationData {
    return {
      userId: "",
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminLiquidationData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.productId) {
      json.productId = msg.productId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminLiquidationData,
    json: any
  ): EarningSnapshotAdminLiquidationData {
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    return msg;
  },
};

export const EarningSnapshotAdminAuditApproveDataJSON = {
  /**
   * Serializes EarningSnapshotAdminAuditApproveData to JSON.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminAuditApproveData>
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminAuditApproveDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminAuditApproveData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminAuditApproveData {
    return EarningSnapshotAdminAuditApproveDataJSON._readMessage(
      EarningSnapshotAdminAuditApproveDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminAuditApproveData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminAuditApproveData {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminAuditApproveData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAuditApproveData,
    json: any
  ): EarningSnapshotAdminAuditApproveData {
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    return msg;
  },
};

export const EarningSnapshotAdminAuditRejectDataJSON = {
  /**
   * Serializes EarningSnapshotAdminAuditRejectData to JSON.
   */
  encode: function (msg: Partial<EarningSnapshotAdminAuditRejectData>): string {
    return JSON.stringify(
      EarningSnapshotAdminAuditRejectDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminAuditRejectData from JSON.
   */
  decode: function (json: string): EarningSnapshotAdminAuditRejectData {
    return EarningSnapshotAdminAuditRejectDataJSON._readMessage(
      EarningSnapshotAdminAuditRejectDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminAuditRejectData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminAuditRejectData {
    return {
      traceId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminAuditRejectData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.traceId) {
      json.traceId = msg.traceId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAuditRejectData,
    json: any
  ): EarningSnapshotAdminAuditRejectData {
    const _traceId = json.traceId ?? json.trace_id;
    if (_traceId) {
      msg.traceId = _traceId;
    }
    return msg;
  },
};

export const EarningSnapshotAdminAutoReviseProductCapacityDataJSON = {
  /**
   * Serializes EarningSnapshotAdminAutoReviseProductCapacityData to JSON.
   */
  encode: function (
    msg: Partial<EarningSnapshotAdminAutoReviseProductCapacityData>
  ): string {
    return JSON.stringify(
      EarningSnapshotAdminAutoReviseProductCapacityDataJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes EarningSnapshotAdminAutoReviseProductCapacityData from JSON.
   */
  decode: function (
    json: string
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    return EarningSnapshotAdminAutoReviseProductCapacityDataJSON._readMessage(
      EarningSnapshotAdminAutoReviseProductCapacityDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningSnapshotAdminAutoReviseProductCapacityData with all fields set to their default value.
   */
  initialize: function (): EarningSnapshotAdminAutoReviseProductCapacityData {
    return {
      productId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningSnapshotAdminAutoReviseProductCapacityData>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.productId) {
      json.productId = msg.productId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EarningSnapshotAdminAutoReviseProductCapacityData,
    json: any
  ): EarningSnapshotAdminAutoReviseProductCapacityData {
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    return msg;
  },
};

export const ListAssetsRequestJSON = {
  /**
   * Serializes ListAssetsRequest to JSON.
   */
  encode: function (_msg?: Partial<ListAssetsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ListAssetsRequest from JSON.
   */
  decode: function (_json?: string): ListAssetsRequest {
    return {};
  },

  /**
   * Initializes ListAssetsRequest with all fields set to their default value.
   */
  initialize: function (): ListAssetsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ListAssetsRequest>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsRequest,
    _json: any
  ): ListAssetsRequest {
    return msg;
  },
};

export const AssetJSON = {
  /**
   * Serializes Asset to JSON.
   */
  encode: function (msg: Partial<Asset>): string {
    return JSON.stringify(AssetJSON._writeMessage(msg));
  },

  /**
   * Deserializes Asset from JSON.
   */
  decode: function (json: string): Asset {
    return AssetJSON._readMessage(AssetJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Asset with all fields set to their default value.
   */
  initialize: function (): Asset {
    return {
      assetId: "",
      chainId: "",
      symbol: "",
      name: "",
      logo: "",
      priceUsd: "",
      priceBtc: "",
      order: 0,
      updatedAt: 0,
      chainLogo: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Asset>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.chainId) {
      json.chainId = msg.chainId;
    }
    if (msg.symbol) {
      json.symbol = msg.symbol;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.logo) {
      json.logo = msg.logo;
    }
    if (msg.priceUsd) {
      json.priceUsd = msg.priceUsd;
    }
    if (msg.priceBtc) {
      json.priceBtc = msg.priceBtc;
    }
    if (msg.order) {
      json.order = msg.order;
    }
    if (msg.updatedAt) {
      json.updatedAt = msg.updatedAt;
    }
    if (msg.chainLogo) {
      json.chainLogo = msg.chainLogo;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Asset, json: any): Asset {
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _chainId = json.chainId ?? json.chain_id;
    if (_chainId) {
      msg.chainId = _chainId;
    }
    const _symbol = json.symbol;
    if (_symbol) {
      msg.symbol = _symbol;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _logo = json.logo;
    if (_logo) {
      msg.logo = _logo;
    }
    const _priceUsd = json.priceUsd ?? json.price_usd;
    if (_priceUsd) {
      msg.priceUsd = _priceUsd;
    }
    const _priceBtc = json.priceBtc ?? json.price_btc;
    if (_priceBtc) {
      msg.priceBtc = _priceBtc;
    }
    const _order = json.order;
    if (_order) {
      msg.order = _order;
    }
    const _updatedAt = json.updatedAt ?? json.updated_at;
    if (_updatedAt) {
      msg.updatedAt = _updatedAt;
    }
    const _chainLogo = json.chainLogo ?? json.chain_logo;
    if (_chainLogo) {
      msg.chainLogo = _chainLogo;
    }
    return msg;
  },
};

export const ListAssetsResponseJSON = {
  /**
   * Serializes ListAssetsResponse to JSON.
   */
  encode: function (msg: Partial<ListAssetsResponse>): string {
    return JSON.stringify(ListAssetsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAssetsResponse from JSON.
   */
  decode: function (json: string): ListAssetsResponse {
    return ListAssetsResponseJSON._readMessage(
      ListAssetsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListAssetsResponse with all fields set to their default value.
   */
  initialize: function (): ListAssetsResponse {
    return {
      assets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAssetsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.assets?.length) {
      json.assets = msg.assets.map(AssetJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAssetsResponse,
    json: any
  ): ListAssetsResponse {
    const _assets = json.assets;
    if (_assets) {
      for (const item of _assets) {
        const m = Asset.initialize();
        AssetJSON._readMessage(m, item);
        msg.assets.push(m);
      }
    }
    return msg;
  },
};

export const EarningProductJSON = {
  /**
   * Serializes EarningProduct to JSON.
   */
  encode: function (msg: Partial<EarningProduct>): string {
    return JSON.stringify(EarningProductJSON._writeMessage(msg));
  },

  /**
   * Deserializes EarningProduct from JSON.
   */
  decode: function (json: string): EarningProduct {
    return EarningProductJSON._readMessage(
      EarningProductJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EarningProduct with all fields set to their default value.
   */
  initialize: function (): EarningProduct {
    return {
      id: 0,
      name: "",
      description: "",
      assetId: "",
      interestRate: "",
      minAmountPerOrder: "",
      maxAmountPerOrder: "",
      capacity: "",
      sold: "",
      queuingBuyAmount: "",
      queuingRedeemAmount: "",
      version: "",
      createdAt: 0,
      type: EarningProductType.Enum._fromInt(0),
      status: EarningProductStatus.Enum._fromInt(0),
      runningNodes: 0,
      interestPaymentDuration: 0,
      expandingAmount: "",
      filledExpandingAmount: "",
      expectedExpandingEndAt: 0,
      userIsInWhitelist: false,
      descriptionRules: "",
      descriptionRiskDisclosure: "",
      enabledWhitelistLimit: false,
      precision: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EarningProduct>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.description) {
      json.description = msg.description;
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.interestRate) {
      json.interestRate = msg.interestRate;
    }
    if (msg.minAmountPerOrder) {
      json.minAmountPerOrder = msg.minAmountPerOrder;
    }
    if (msg.maxAmountPerOrder) {
      json.maxAmountPerOrder = msg.maxAmountPerOrder;
    }
    if (msg.capacity) {
      json.capacity = msg.capacity;
    }
    if (msg.sold) {
      json.sold = msg.sold;
    }
    if (msg.queuingBuyAmount) {
      json.queuingBuyAmount = msg.queuingBuyAmount;
    }
    if (msg.queuingRedeemAmount) {
      json.queuingRedeemAmount = msg.queuingRedeemAmount;
    }
    if (msg.version) {
      json.version = msg.version;
    }
    if (msg.createdAt) {
      json.createdAt = msg.createdAt;
    }
    if (msg.type && EarningProductTypeJSON.Enum._toInt(msg.type)) {
      json.type = msg.type;
    }
    if (msg.status && EarningProductStatusJSON.Enum._toInt(msg.status)) {
      json.status = msg.status;
    }
    if (msg.runningNodes) {
      json.runningNodes = msg.runningNodes;
    }
    if (msg.interestPaymentDuration) {
      json.interestPaymentDuration = msg.interestPaymentDuration;
    }
    if (msg.expandingAmount) {
      json.expandingAmount = msg.expandingAmount;
    }
    if (msg.filledExpandingAmount) {
      json.filledExpandingAmount = msg.filledExpandingAmount;
    }
    if (msg.expectedExpandingEndAt) {
      json.expectedExpandingEndAt = msg.expectedExpandingEndAt;
    }
    if (msg.userIsInWhitelist) {
      json.userIsInWhitelist = msg.userIsInWhitelist;
    }
    if (msg.descriptionRules) {
      json.descriptionRules = msg.descriptionRules;
    }
    if (msg.descriptionRiskDisclosure) {
      json.descriptionRiskDisclosure = msg.descriptionRiskDisclosure;
    }
    if (msg.enabledWhitelistLimit) {
      json.enabledWhitelistLimit = msg.enabledWhitelistLimit;
    }
    if (msg.precision) {
      json.precision = msg.precision;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: EarningProduct, json: any): EarningProduct {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _description = json.description;
    if (_description) {
      msg.description = _description;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _interestRate = json.interestRate ?? json.interest_rate;
    if (_interestRate) {
      msg.interestRate = _interestRate;
    }
    const _minAmountPerOrder =
      json.minAmountPerOrder ?? json.min_amount_per_order;
    if (_minAmountPerOrder) {
      msg.minAmountPerOrder = _minAmountPerOrder;
    }
    const _maxAmountPerOrder =
      json.maxAmountPerOrder ?? json.max_amount_per_order;
    if (_maxAmountPerOrder) {
      msg.maxAmountPerOrder = _maxAmountPerOrder;
    }
    const _capacity = json.capacity;
    if (_capacity) {
      msg.capacity = _capacity;
    }
    const _sold = json.sold;
    if (_sold) {
      msg.sold = _sold;
    }
    const _queuingBuyAmount = json.queuingBuyAmount ?? json.queuing_buy_amount;
    if (_queuingBuyAmount) {
      msg.queuingBuyAmount = _queuingBuyAmount;
    }
    const _queuingRedeemAmount =
      json.queuingRedeemAmount ?? json.queuing_redeem_amount;
    if (_queuingRedeemAmount) {
      msg.queuingRedeemAmount = _queuingRedeemAmount;
    }
    const _version = json.version;
    if (_version) {
      msg.version = _version;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      msg.createdAt = _createdAt;
    }
    const _type = json.type;
    if (_type) {
      msg.type = _type;
    }
    const _status = json.status;
    if (_status) {
      msg.status = _status;
    }
    const _runningNodes = json.runningNodes ?? json.running_nodes;
    if (_runningNodes) {
      msg.runningNodes = _runningNodes;
    }
    const _interestPaymentDuration =
      json.interestPaymentDuration ?? json.interest_payment_duration;
    if (_interestPaymentDuration) {
      msg.interestPaymentDuration = _interestPaymentDuration;
    }
    const _expandingAmount = json.expandingAmount ?? json.expanding_amount;
    if (_expandingAmount) {
      msg.expandingAmount = _expandingAmount;
    }
    const _filledExpandingAmount =
      json.filledExpandingAmount ?? json.filled_expanding_amount;
    if (_filledExpandingAmount) {
      msg.filledExpandingAmount = _filledExpandingAmount;
    }
    const _expectedExpandingEndAt =
      json.expectedExpandingEndAt ?? json.expected_expanding_end_at;
    if (_expectedExpandingEndAt) {
      msg.expectedExpandingEndAt = _expectedExpandingEndAt;
    }
    const _userIsInWhitelist =
      json.userIsInWhitelist ?? json.user_is_in_whitelist;
    if (_userIsInWhitelist) {
      msg.userIsInWhitelist = _userIsInWhitelist;
    }
    const _descriptionRules = json.descriptionRules ?? json.description_rules;
    if (_descriptionRules) {
      msg.descriptionRules = _descriptionRules;
    }
    const _descriptionRiskDisclosure =
      json.descriptionRiskDisclosure ?? json.description_risk_disclosure;
    if (_descriptionRiskDisclosure) {
      msg.descriptionRiskDisclosure = _descriptionRiskDisclosure;
    }
    const _enabledWhitelistLimit =
      json.enabledWhitelistLimit ?? json.enabled_whitelist_limit;
    if (_enabledWhitelistLimit) {
      msg.enabledWhitelistLimit = _enabledWhitelistLimit;
    }
    const _precision = json.precision;
    if (_precision) {
      msg.precision = _precision;
    }
    return msg;
  },
};

export const GetEarningProductRequestJSON = {
  /**
   * Serializes GetEarningProductRequest to JSON.
   */
  encode: function (msg: Partial<GetEarningProductRequest>): string {
    return JSON.stringify(GetEarningProductRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetEarningProductRequest from JSON.
   */
  decode: function (json: string): GetEarningProductRequest {
    return GetEarningProductRequestJSON._readMessage(
      GetEarningProductRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetEarningProductRequest with all fields set to their default value.
   */
  initialize: function (): GetEarningProductRequest {
    return {
      id: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetEarningProductRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEarningProductRequest,
    json: any
  ): GetEarningProductRequest {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    return msg;
  },
};

export const GetEarningProductResponseJSON = {
  /**
   * Serializes GetEarningProductResponse to JSON.
   */
  encode: function (msg: Partial<GetEarningProductResponse>): string {
    return JSON.stringify(GetEarningProductResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetEarningProductResponse from JSON.
   */
  decode: function (json: string): GetEarningProductResponse {
    return GetEarningProductResponseJSON._readMessage(
      GetEarningProductResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetEarningProductResponse with all fields set to their default value.
   */
  initialize: function (): GetEarningProductResponse {
    return {
      product: EarningProduct.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetEarningProductResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.product) {
      const product = EarningProductJSON._writeMessage(msg.product);
      if (Object.keys(product).length > 0) {
        json.product = product;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetEarningProductResponse,
    json: any
  ): GetEarningProductResponse {
    const _product = json.product;
    if (_product) {
      const m = EarningProduct.initialize();
      EarningProductJSON._readMessage(m, _product);
      msg.product = m;
    }
    return msg;
  },
};

export const ListEarningProductsRequestJSON = {
  /**
   * Serializes ListEarningProductsRequest to JSON.
   */
  encode: function (msg: Partial<ListEarningProductsRequest>): string {
    return JSON.stringify(ListEarningProductsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListEarningProductsRequest from JSON.
   */
  decode: function (json: string): ListEarningProductsRequest {
    return ListEarningProductsRequestJSON._readMessage(
      ListEarningProductsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListEarningProductsRequest with all fields set to their default value.
   */
  initialize: function (): ListEarningProductsRequest {
    return {
      type: EarningProductType.Enum._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListEarningProductsRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.type && EarningProductTypeJSON.Enum._toInt(msg.type)) {
      json.type = msg.type;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEarningProductsRequest,
    json: any
  ): ListEarningProductsRequest {
    const _type = json.type;
    if (_type) {
      msg.type = _type;
    }
    return msg;
  },
};

export const ListEarningProductsResponseJSON = {
  /**
   * Serializes ListEarningProductsResponse to JSON.
   */
  encode: function (msg: Partial<ListEarningProductsResponse>): string {
    return JSON.stringify(ListEarningProductsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListEarningProductsResponse from JSON.
   */
  decode: function (json: string): ListEarningProductsResponse {
    return ListEarningProductsResponseJSON._readMessage(
      ListEarningProductsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListEarningProductsResponse with all fields set to their default value.
   */
  initialize: function (): ListEarningProductsResponse {
    return {
      products: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListEarningProductsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.products?.length) {
      json.products = msg.products.map(EarningProductJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEarningProductsResponse,
    json: any
  ): ListEarningProductsResponse {
    const _products = json.products;
    if (_products) {
      for (const item of _products) {
        const m = EarningProduct.initialize();
        EarningProductJSON._readMessage(m, item);
        msg.products.push(m);
      }
    }
    return msg;
  },
};

export const UserEarningProductJSON = {
  /**
   * Serializes UserEarningProduct to JSON.
   */
  encode: function (msg: Partial<UserEarningProduct>): string {
    return JSON.stringify(UserEarningProductJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserEarningProduct from JSON.
   */
  decode: function (json: string): UserEarningProduct {
    return UserEarningProductJSON._readMessage(
      UserEarningProductJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UserEarningProduct with all fields set to their default value.
   */
  initialize: function (): UserEarningProduct {
    return {
      id: 0,
      userId: "",
      earningProductId: 0,
      amount: "",
      queuingBuyAmount: "",
      queuingRedeemAmount: "",
      version: "",
      createdAt: 0,
      updatedAt: 0,
      totalRevenue: "",
      pledged: false,
      expandBuyAmount: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserEarningProduct>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.earningProductId) {
      json.earningProductId = msg.earningProductId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.queuingBuyAmount) {
      json.queuingBuyAmount = msg.queuingBuyAmount;
    }
    if (msg.queuingRedeemAmount) {
      json.queuingRedeemAmount = msg.queuingRedeemAmount;
    }
    if (msg.version) {
      json.version = msg.version;
    }
    if (msg.createdAt) {
      json.createdAt = msg.createdAt;
    }
    if (msg.updatedAt) {
      json.updatedAt = msg.updatedAt;
    }
    if (msg.totalRevenue) {
      json.totalRevenue = msg.totalRevenue;
    }
    if (msg.pledged) {
      json.pledged = msg.pledged;
    }
    if (msg.expandBuyAmount) {
      json.expandBuyAmount = msg.expandBuyAmount;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserEarningProduct,
    json: any
  ): UserEarningProduct {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _earningProductId = json.earningProductId ?? json.earning_product_id;
    if (_earningProductId) {
      msg.earningProductId = _earningProductId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _queuingBuyAmount = json.queuingBuyAmount ?? json.queuing_buy_amount;
    if (_queuingBuyAmount) {
      msg.queuingBuyAmount = _queuingBuyAmount;
    }
    const _queuingRedeemAmount =
      json.queuingRedeemAmount ?? json.queuing_redeem_amount;
    if (_queuingRedeemAmount) {
      msg.queuingRedeemAmount = _queuingRedeemAmount;
    }
    const _version = json.version;
    if (_version) {
      msg.version = _version;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      msg.createdAt = _createdAt;
    }
    const _updatedAt = json.updatedAt ?? json.updated_at;
    if (_updatedAt) {
      msg.updatedAt = _updatedAt;
    }
    const _totalRevenue = json.totalRevenue ?? json.total_revenue;
    if (_totalRevenue) {
      msg.totalRevenue = _totalRevenue;
    }
    const _pledged = json.pledged;
    if (_pledged) {
      msg.pledged = _pledged;
    }
    const _expandBuyAmount = json.expandBuyAmount ?? json.expand_buy_amount;
    if (_expandBuyAmount) {
      msg.expandBuyAmount = _expandBuyAmount;
    }
    return msg;
  },
};

export const ListMyEarningProductsRequestJSON = {
  /**
   * Serializes ListMyEarningProductsRequest to JSON.
   */
  encode: function (_msg?: Partial<ListMyEarningProductsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ListMyEarningProductsRequest from JSON.
   */
  decode: function (_json?: string): ListMyEarningProductsRequest {
    return {};
  },

  /**
   * Initializes ListMyEarningProductsRequest with all fields set to their default value.
   */
  initialize: function (): ListMyEarningProductsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<ListMyEarningProductsRequest>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMyEarningProductsRequest,
    _json: any
  ): ListMyEarningProductsRequest {
    return msg;
  },
};

export const ListMyEarningProductsResponseJSON = {
  /**
   * Serializes ListMyEarningProductsResponse to JSON.
   */
  encode: function (msg: Partial<ListMyEarningProductsResponse>): string {
    return JSON.stringify(ListMyEarningProductsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListMyEarningProductsResponse from JSON.
   */
  decode: function (json: string): ListMyEarningProductsResponse {
    return ListMyEarningProductsResponseJSON._readMessage(
      ListMyEarningProductsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListMyEarningProductsResponse with all fields set to their default value.
   */
  initialize: function (): ListMyEarningProductsResponse {
    return {
      products: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListMyEarningProductsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.products?.length) {
      json.products = msg.products.map(UserEarningProductJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMyEarningProductsResponse,
    json: any
  ): ListMyEarningProductsResponse {
    const _products = json.products;
    if (_products) {
      for (const item of _products) {
        const m = UserEarningProduct.initialize();
        UserEarningProductJSON._readMessage(m, item);
        msg.products.push(m);
      }
    }
    return msg;
  },
};

export const GetMyEarningProductRequestJSON = {
  /**
   * Serializes GetMyEarningProductRequest to JSON.
   */
  encode: function (msg: Partial<GetMyEarningProductRequest>): string {
    return JSON.stringify(GetMyEarningProductRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMyEarningProductRequest from JSON.
   */
  decode: function (json: string): GetMyEarningProductRequest {
    return GetMyEarningProductRequestJSON._readMessage(
      GetMyEarningProductRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetMyEarningProductRequest with all fields set to their default value.
   */
  initialize: function (): GetMyEarningProductRequest {
    return {
      id: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMyEarningProductRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMyEarningProductRequest,
    json: any
  ): GetMyEarningProductRequest {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    return msg;
  },
};

export const GetMyEarningProductResponseJSON = {
  /**
   * Serializes GetMyEarningProductResponse to JSON.
   */
  encode: function (msg: Partial<GetMyEarningProductResponse>): string {
    return JSON.stringify(GetMyEarningProductResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMyEarningProductResponse from JSON.
   */
  decode: function (json: string): GetMyEarningProductResponse {
    return GetMyEarningProductResponseJSON._readMessage(
      GetMyEarningProductResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetMyEarningProductResponse with all fields set to their default value.
   */
  initialize: function (): GetMyEarningProductResponse {
    return {
      product: UserEarningProduct.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMyEarningProductResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.product) {
      const product = UserEarningProductJSON._writeMessage(msg.product);
      if (Object.keys(product).length > 0) {
        json.product = product;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMyEarningProductResponse,
    json: any
  ): GetMyEarningProductResponse {
    const _product = json.product;
    if (_product) {
      const m = UserEarningProduct.initialize();
      UserEarningProductJSON._readMessage(m, _product);
      msg.product = m;
    }
    return msg;
  },
};

export const GetEventRequestJSON = {
  /**
   * Serializes GetEventRequest to JSON.
   */
  encode: function (msg: Partial<GetEventRequest>): string {
    return JSON.stringify(GetEventRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetEventRequest from JSON.
   */
  decode: function (json: string): GetEventRequest {
    return GetEventRequestJSON._readMessage(
      GetEventRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetEventRequest with all fields set to their default value.
   */
  initialize: function (): GetEventRequest {
    return {
      followId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetEventRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.followId) {
      json.followId = msg.followId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetEventRequest, json: any): GetEventRequest {
    const _followId = json.followId ?? json.follow_id;
    if (_followId) {
      msg.followId = _followId;
    }
    return msg;
  },
};

export const EventJSON = {
  /**
   * Serializes Event to JSON.
   */
  encode: function (msg: Partial<Event>): string {
    return JSON.stringify(EventJSON._writeMessage(msg));
  },

  /**
   * Deserializes Event from JSON.
   */
  decode: function (json: string): Event {
    return EventJSON._readMessage(EventJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Event with all fields set to their default value.
   */
  initialize: function (): Event {
    return {
      id: "",
      userId: "",
      action: EventAction.Enum._fromInt(0),
      productId: 0,
      assetId: "",
      amount: "",
      filledAmount: "",
      status: EventStatus.Enum._fromInt(0),
      error: EventError.Enum._fromInt(0),
      followId: "",
      createdAt: 0,
      queuingAheadAmount: "",
      interestPaymentDate: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Event>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.action && EventActionJSON.Enum._toInt(msg.action)) {
      json.action = msg.action;
    }
    if (msg.productId) {
      json.productId = msg.productId;
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.filledAmount) {
      json.filledAmount = msg.filledAmount;
    }
    if (msg.status && EventStatusJSON.Enum._toInt(msg.status)) {
      json.status = msg.status;
    }
    if (msg.error && EventErrorJSON.Enum._toInt(msg.error)) {
      json.error = msg.error;
    }
    if (msg.followId) {
      json.followId = msg.followId;
    }
    if (msg.createdAt) {
      json.createdAt = msg.createdAt;
    }
    if (msg.queuingAheadAmount) {
      json.queuingAheadAmount = msg.queuingAheadAmount;
    }
    if (msg.interestPaymentDate) {
      json.interestPaymentDate = msg.interestPaymentDate;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Event, json: any): Event {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _action = json.action;
    if (_action) {
      msg.action = _action;
    }
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _filledAmount = json.filledAmount ?? json.filled_amount;
    if (_filledAmount) {
      msg.filledAmount = _filledAmount;
    }
    const _status = json.status;
    if (_status) {
      msg.status = _status;
    }
    const _error = json.error;
    if (_error) {
      msg.error = _error;
    }
    const _followId = json.followId ?? json.follow_id;
    if (_followId) {
      msg.followId = _followId;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      msg.createdAt = _createdAt;
    }
    const _queuingAheadAmount =
      json.queuingAheadAmount ?? json.queuing_ahead_amount;
    if (_queuingAheadAmount) {
      msg.queuingAheadAmount = _queuingAheadAmount;
    }
    const _interestPaymentDate =
      json.interestPaymentDate ?? json.interest_payment_date;
    if (_interestPaymentDate) {
      msg.interestPaymentDate = _interestPaymentDate;
    }
    return msg;
  },
};

export const GetEventResponseJSON = {
  /**
   * Serializes GetEventResponse to JSON.
   */
  encode: function (msg: Partial<GetEventResponse>): string {
    return JSON.stringify(GetEventResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetEventResponse from JSON.
   */
  decode: function (json: string): GetEventResponse {
    return GetEventResponseJSON._readMessage(
      GetEventResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetEventResponse with all fields set to their default value.
   */
  initialize: function (): GetEventResponse {
    return {
      event: Event.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetEventResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.event) {
      const event = EventJSON._writeMessage(msg.event);
      if (Object.keys(event).length > 0) {
        json.event = event;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetEventResponse, json: any): GetEventResponse {
    const _event = json.event;
    if (_event) {
      const m = Event.initialize();
      EventJSON._readMessage(m, _event);
      msg.event = m;
    }
    return msg;
  },
};

export const ListEventsRequestJSON = {
  /**
   * Serializes ListEventsRequest to JSON.
   */
  encode: function (msg: Partial<ListEventsRequest>): string {
    return JSON.stringify(ListEventsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListEventsRequest from JSON.
   */
  decode: function (json: string): ListEventsRequest {
    return ListEventsRequestJSON._readMessage(
      ListEventsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListEventsRequest with all fields set to their default value.
   */
  initialize: function (): ListEventsRequest {
    return {
      earningProductId: 0,
      actions: [],
      statuses: [],
      offset: 0,
      limit: 0,
      startAt: 0,
      endAt: 0,
      productType: EarningProductType.Enum._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListEventsRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.earningProductId) {
      json.earningProductId = msg.earningProductId;
    }
    if (msg.actions?.length) {
      json.actions = msg.actions;
    }
    if (msg.statuses?.length) {
      json.statuses = msg.statuses;
    }
    if (msg.offset) {
      json.offset = msg.offset;
    }
    if (msg.limit) {
      json.limit = msg.limit;
    }
    if (msg.startAt) {
      json.startAt = msg.startAt;
    }
    if (msg.endAt) {
      json.endAt = msg.endAt;
    }
    if (
      msg.productType &&
      EarningProductTypeJSON.Enum._toInt(msg.productType)
    ) {
      json.productType = msg.productType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEventsRequest,
    json: any
  ): ListEventsRequest {
    const _earningProductId = json.earningProductId ?? json.earning_product_id;
    if (_earningProductId) {
      msg.earningProductId = _earningProductId;
    }
    const _actions = json.actions;
    if (_actions) {
      msg.actions = _actions;
    }
    const _statuses = json.statuses;
    if (_statuses) {
      msg.statuses = _statuses;
    }
    const _offset = json.offset;
    if (_offset) {
      msg.offset = _offset;
    }
    const _limit = json.limit;
    if (_limit) {
      msg.limit = _limit;
    }
    const _startAt = json.startAt ?? json.start_at;
    if (_startAt) {
      msg.startAt = _startAt;
    }
    const _endAt = json.endAt ?? json.end_at;
    if (_endAt) {
      msg.endAt = _endAt;
    }
    const _productType = json.productType ?? json.product_type;
    if (_productType) {
      msg.productType = _productType;
    }
    return msg;
  },
};

export const ListEventsResponseJSON = {
  /**
   * Serializes ListEventsResponse to JSON.
   */
  encode: function (msg: Partial<ListEventsResponse>): string {
    return JSON.stringify(ListEventsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListEventsResponse from JSON.
   */
  decode: function (json: string): ListEventsResponse {
    return ListEventsResponseJSON._readMessage(
      ListEventsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListEventsResponse with all fields set to their default value.
   */
  initialize: function (): ListEventsResponse {
    return {
      events: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListEventsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.events?.length) {
      json.events = msg.events.map(EventJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListEventsResponse,
    json: any
  ): ListEventsResponse {
    const _events = json.events;
    if (_events) {
      for (const item of _events) {
        const m = Event.initialize();
        EventJSON._readMessage(m, item);
        msg.events.push(m);
      }
    }
    return msg;
  },
};

export const AuditJSON = {
  /**
   * Serializes Audit to JSON.
   */
  encode: function (msg: Partial<Audit>): string {
    return JSON.stringify(AuditJSON._writeMessage(msg));
  },

  /**
   * Deserializes Audit from JSON.
   */
  decode: function (json: string): Audit {
    return AuditJSON._readMessage(AuditJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Audit with all fields set to their default value.
   */
  initialize: function (): Audit {
    return {
      id: "",
      createdAt: Timestamp.initialize(),
      assetId: "",
      amount: "",
      userId: "",
      status: Audit.Status._fromInt(0),
      memo: "",
      reviewedBy: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Audit>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.createdAt) {
      const createdAt = TimestampJSON._writeMessage(msg.createdAt);
      if (Object.keys(createdAt).length > 0) {
        json.createdAt = createdAt;
      }
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.status && AuditJSON.Status._toInt(msg.status)) {
      json.status = msg.status;
    }
    if (msg.memo) {
      json.memo = msg.memo;
    }
    if (msg.reviewedBy) {
      json.reviewedBy = msg.reviewedBy;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Audit, json: any): Audit {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _createdAt);
      msg.createdAt = m;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _status = json.status;
    if (_status) {
      msg.status = _status;
    }
    const _memo = json.memo;
    if (_memo) {
      msg.memo = _memo;
    }
    const _reviewedBy = json.reviewedBy ?? json.reviewed_by;
    if (_reviewedBy) {
      msg.reviewedBy = _reviewedBy;
    }
    return msg;
  },

  Status: {
    NOT_SET: "NOT_SET",
    REJECTED: "REJECTED",
    APPROVED: "APPROVED",
    /**
     * @private
     */
    _fromInt: function (i: number): Audit.Status {
      switch (i) {
        case 0: {
          return "NOT_SET";
        }
        case 1: {
          return "REJECTED";
        }
        case 2: {
          return "APPROVED";
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as Audit.Status;
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: Audit.Status): number {
      switch (i) {
        case "NOT_SET": {
          return 0;
        }
        case "REJECTED": {
          return 1;
        }
        case "APPROVED": {
          return 2;
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number;
        }
      }
    },
  } as const,
};

export const FindAuditRequestJSON = {
  /**
   * Serializes FindAuditRequest to JSON.
   */
  encode: function (msg: Partial<FindAuditRequest>): string {
    return JSON.stringify(FindAuditRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindAuditRequest from JSON.
   */
  decode: function (json: string): FindAuditRequest {
    return FindAuditRequestJSON._readMessage(
      FindAuditRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FindAuditRequest with all fields set to their default value.
   */
  initialize: function (): FindAuditRequest {
    return {
      id: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindAuditRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FindAuditRequest, json: any): FindAuditRequest {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    return msg;
  },
};

export const FindAuditResponseJSON = {
  /**
   * Serializes FindAuditResponse to JSON.
   */
  encode: function (msg: Partial<FindAuditResponse>): string {
    return JSON.stringify(FindAuditResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FindAuditResponse from JSON.
   */
  decode: function (json: string): FindAuditResponse {
    return FindAuditResponseJSON._readMessage(
      FindAuditResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FindAuditResponse with all fields set to their default value.
   */
  initialize: function (): FindAuditResponse {
    return {
      audit: Audit.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FindAuditResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.audit) {
      const audit = AuditJSON._writeMessage(msg.audit);
      if (Object.keys(audit).length > 0) {
        json.audit = audit;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FindAuditResponse,
    json: any
  ): FindAuditResponse {
    const _audit = json.audit;
    if (_audit) {
      const m = Audit.initialize();
      AuditJSON._readMessage(m, _audit);
      msg.audit = m;
    }
    return msg;
  },
};

export const ListAuditsRequestJSON = {
  /**
   * Serializes ListAuditsRequest to JSON.
   */
  encode: function (msg: Partial<ListAuditsRequest>): string {
    return JSON.stringify(ListAuditsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAuditsRequest from JSON.
   */
  decode: function (json: string): ListAuditsRequest {
    return ListAuditsRequestJSON._readMessage(
      ListAuditsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListAuditsRequest with all fields set to their default value.
   */
  initialize: function (): ListAuditsRequest {
    return {
      offset: Timestamp.initialize(),
      limit: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAuditsRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.offset) {
      const offset = TimestampJSON._writeMessage(msg.offset);
      if (Object.keys(offset).length > 0) {
        json.offset = offset;
      }
    }
    if (msg.limit) {
      json.limit = msg.limit.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsRequest,
    json: any
  ): ListAuditsRequest {
    const _offset = json.offset;
    if (_offset) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _offset);
      msg.offset = m;
    }
    const _limit = json.limit;
    if (_limit) {
      msg.limit = BigInt(_limit);
    }
    return msg;
  },
};

export const ListAuditsResponseJSON = {
  /**
   * Serializes ListAuditsResponse to JSON.
   */
  encode: function (msg: Partial<ListAuditsResponse>): string {
    return JSON.stringify(ListAuditsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListAuditsResponse from JSON.
   */
  decode: function (json: string): ListAuditsResponse {
    return ListAuditsResponseJSON._readMessage(
      ListAuditsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ListAuditsResponse with all fields set to their default value.
   */
  initialize: function (): ListAuditsResponse {
    return {
      audits: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ListAuditsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.audits?.length) {
      json.audits = msg.audits.map(AuditJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListAuditsResponse,
    json: any
  ): ListAuditsResponse {
    const _audits = json.audits;
    if (_audits) {
      for (const item of _audits) {
        const m = Audit.initialize();
        AuditJSON._readMessage(m, item);
        msg.audits.push(m);
      }
    }
    return msg;
  },
};

export const UserVaultJSON = {
  /**
   * Serializes UserVault to JSON.
   */
  encode: function (msg: Partial<UserVault>): string {
    return JSON.stringify(UserVaultJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserVault from JSON.
   */
  decode: function (json: string): UserVault {
    return UserVaultJSON._readMessage(
      UserVaultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UserVault with all fields set to their default value.
   */
  initialize: function (): UserVault {
    return {
      userId: "",
      productId: 0,
      productName: "",
      assetId: "",
      amount: "",
      pledged: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<UserVault>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.productId) {
      json.productId = msg.productId;
    }
    if (msg.productName) {
      json.productName = msg.productName;
    }
    if (msg.assetId) {
      json.assetId = msg.assetId;
    }
    if (msg.amount) {
      json.amount = msg.amount;
    }
    if (msg.pledged) {
      json.pledged = msg.pledged;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserVault, json: any): UserVault {
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _productId = json.productId ?? json.product_id;
    if (_productId) {
      msg.productId = _productId;
    }
    const _productName = json.productName ?? json.product_name;
    if (_productName) {
      msg.productName = _productName;
    }
    const _assetId = json.assetId ?? json.asset_id;
    if (_assetId) {
      msg.assetId = _assetId;
    }
    const _amount = json.amount;
    if (_amount) {
      msg.amount = _amount;
    }
    const _pledged = json.pledged;
    if (_pledged) {
      msg.pledged = _pledged;
    }
    return msg;
  },
};

export const GetUserVaultsRequestJSON = {
  /**
   * Serializes GetUserVaultsRequest to JSON.
   */
  encode: function (msg: Partial<GetUserVaultsRequest>): string {
    return JSON.stringify(GetUserVaultsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserVaultsRequest from JSON.
   */
  decode: function (json: string): GetUserVaultsRequest {
    return GetUserVaultsRequestJSON._readMessage(
      GetUserVaultsRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetUserVaultsRequest with all fields set to their default value.
   */
  initialize: function (): GetUserVaultsRequest {
    return {
      userId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserVaultsRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json.userId = msg.userId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserVaultsRequest,
    json: any
  ): GetUserVaultsRequest {
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    return msg;
  },
};

export const GetUserVaultsResponseJSON = {
  /**
   * Serializes GetUserVaultsResponse to JSON.
   */
  encode: function (msg: Partial<GetUserVaultsResponse>): string {
    return JSON.stringify(GetUserVaultsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserVaultsResponse from JSON.
   */
  decode: function (json: string): GetUserVaultsResponse {
    return GetUserVaultsResponseJSON._readMessage(
      GetUserVaultsResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetUserVaultsResponse with all fields set to their default value.
   */
  initialize: function (): GetUserVaultsResponse {
    return {
      vaults: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserVaultsResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.vaults?.length) {
      json.vaults = msg.vaults.map(UserVaultJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserVaultsResponse,
    json: any
  ): GetUserVaultsResponse {
    const _vaults = json.vaults;
    if (_vaults) {
      for (const item of _vaults) {
        const m = UserVault.initialize();
        UserVaultJSON._readMessage(m, item);
        msg.vaults.push(m);
      }
    }
    return msg;
  },
};

export const GetUserEventRequestJSON = {
  /**
   * Serializes GetUserEventRequest to JSON.
   */
  encode: function (msg: Partial<GetUserEventRequest>): string {
    return JSON.stringify(GetUserEventRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserEventRequest from JSON.
   */
  decode: function (json: string): GetUserEventRequest {
    return GetUserEventRequestJSON._readMessage(
      GetUserEventRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetUserEventRequest with all fields set to their default value.
   */
  initialize: function (): GetUserEventRequest {
    return {
      followId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserEventRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.followId) {
      json.followId = msg.followId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserEventRequest,
    json: any
  ): GetUserEventRequest {
    const _followId = json.followId ?? json.follow_id;
    if (_followId) {
      msg.followId = _followId;
    }
    return msg;
  },
};

export const GetUserEventResponseJSON = {
  /**
   * Serializes GetUserEventResponse to JSON.
   */
  encode: function (msg: Partial<GetUserEventResponse>): string {
    return JSON.stringify(GetUserEventResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserEventResponse from JSON.
   */
  decode: function (json: string): GetUserEventResponse {
    return GetUserEventResponseJSON._readMessage(
      GetUserEventResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetUserEventResponse with all fields set to their default value.
   */
  initialize: function (): GetUserEventResponse {
    return {
      event: Event.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserEventResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.event) {
      const event = EventJSON._writeMessage(msg.event);
      if (Object.keys(event).length > 0) {
        json.event = event;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserEventResponse,
    json: any
  ): GetUserEventResponse {
    const _event = json.event;
    if (_event) {
      const m = Event.initialize();
      EventJSON._readMessage(m, _event);
      msg.event = m;
    }
    return msg;
  },
};
