// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: bwatch/v1/bwatch.proto

package bwatch

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Subscription_State int32

const (
	Subscription_NOT_SET   Subscription_State = 0
	Subscription_PENDING   Subscription_State = 1
	Subscription_CANCELLED Subscription_State = 2
	Subscription_DONE      Subscription_State = 3
)

// Enum value maps for Subscription_State.
var (
	Subscription_State_name = map[int32]string{
		0: "NOT_SET",
		1: "PENDING",
		2: "CANCELLED",
		3: "DONE",
	}
	Subscription_State_value = map[string]int32{
		"NOT_SET":   0,
		"PENDING":   1,
		"CANCELLED": 2,
		"DONE":      3,
	}
)

func (x Subscription_State) Enum() *Subscription_State {
	p := new(Subscription_State)
	*p = x
	return p
}

func (x Subscription_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subscription_State) Descriptor() protoreflect.EnumDescriptor {
	return file_bwatch_v1_bwatch_proto_enumTypes[0].Descriptor()
}

func (Subscription_State) Type() protoreflect.EnumType {
	return &file_bwatch_v1_bwatch_proto_enumTypes[0]
}

func (x Subscription_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subscription_State.Descriptor instead.
func (Subscription_State) EnumDescriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{3, 0}
}

type Transaction_Type int32

const (
	Transaction_NOT_SET      Transaction_Type = 0
	Transaction_SUBSCRIPTION Transaction_Type = 1
	Transaction_REDEMPTION   Transaction_Type = 2
)

// Enum value maps for Transaction_Type.
var (
	Transaction_Type_name = map[int32]string{
		0: "NOT_SET",
		1: "SUBSCRIPTION",
		2: "REDEMPTION",
	}
	Transaction_Type_value = map[string]int32{
		"NOT_SET":      0,
		"SUBSCRIPTION": 1,
		"REDEMPTION":   2,
	}
)

func (x Transaction_Type) Enum() *Transaction_Type {
	p := new(Transaction_Type)
	*p = x
	return p
}

func (x Transaction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bwatch_v1_bwatch_proto_enumTypes[1].Descriptor()
}

func (Transaction_Type) Type() protoreflect.EnumType {
	return &file_bwatch_v1_bwatch_proto_enumTypes[1]
}

func (x Transaction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_Type.Descriptor instead.
func (Transaction_Type) EnumDescriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{4, 0}
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Symbol  string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo    string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Price   string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{0}
}

func (x *Asset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Asset) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Asset) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Asset) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type Gem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etf     string `protobuf:"bytes,1,opt,name=etf,proto3" json:"etf,omitempty"`
	Share   string `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
	Balance string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	Asset   *Asset `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *Gem) Reset() {
	*x = Gem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gem) ProtoMessage() {}

func (x *Gem) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gem.ProtoReflect.Descriptor instead.
func (*Gem) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{1}
}

func (x *Gem) GetEtf() string {
	if x != nil {
		return x.Etf
	}
	return ""
}

func (x *Gem) GetShare() string {
	if x != nil {
		return x.Share
	}
	return ""
}

func (x *Gem) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Gem) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

type Etf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetId               string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Name                  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Symbol                string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo                  string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Version               int64  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Precision             int32  `protobuf:"varint,7,opt,name=precision,proto3" json:"precision,omitempty"`
	MaxSupply             string `protobuf:"bytes,8,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	MaxSubscriptionAmount string `protobuf:"bytes,9,opt,name=max_subscription_amount,json=maxSubscriptionAmount,proto3" json:"max_subscription_amount,omitempty"`
	MinSubscriptionAmount string `protobuf:"bytes,10,opt,name=min_subscription_amount,json=minSubscriptionAmount,proto3" json:"min_subscription_amount,omitempty"`
	MaxRedemptionAmount   string `protobuf:"bytes,11,opt,name=max_redemption_amount,json=maxRedemptionAmount,proto3" json:"max_redemption_amount,omitempty"`
	MinRedemptionAmount   string `protobuf:"bytes,12,opt,name=min_redemption_amount,json=minRedemptionAmount,proto3" json:"min_redemption_amount,omitempty"`
	RedemptionFeeRate     string `protobuf:"bytes,13,opt,name=redemption_fee_rate,json=redemptionFeeRate,proto3" json:"redemption_fee_rate,omitempty"`
	RedemptionFee         string `protobuf:"bytes,14,opt,name=redemption_fee,json=redemptionFee,proto3" json:"redemption_fee,omitempty"`
	CirculatingSupply     string `protobuf:"bytes,15,opt,name=circulating_supply,json=circulatingSupply,proto3" json:"circulating_supply,omitempty"`
	Gems                  []*Gem `protobuf:"bytes,16,rep,name=gems,proto3" json:"gems,omitempty"`
}

func (x *Etf) Reset() {
	*x = Etf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Etf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Etf) ProtoMessage() {}

func (x *Etf) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Etf.ProtoReflect.Descriptor instead.
func (*Etf) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{2}
}

func (x *Etf) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Etf) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Etf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Etf) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Etf) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Etf) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Etf) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *Etf) GetMaxSupply() string {
	if x != nil {
		return x.MaxSupply
	}
	return ""
}

func (x *Etf) GetMaxSubscriptionAmount() string {
	if x != nil {
		return x.MaxSubscriptionAmount
	}
	return ""
}

func (x *Etf) GetMinSubscriptionAmount() string {
	if x != nil {
		return x.MinSubscriptionAmount
	}
	return ""
}

func (x *Etf) GetMaxRedemptionAmount() string {
	if x != nil {
		return x.MaxRedemptionAmount
	}
	return ""
}

func (x *Etf) GetMinRedemptionAmount() string {
	if x != nil {
		return x.MinRedemptionAmount
	}
	return ""
}

func (x *Etf) GetRedemptionFeeRate() string {
	if x != nil {
		return x.RedemptionFeeRate
	}
	return ""
}

func (x *Etf) GetRedemptionFee() string {
	if x != nil {
		return x.RedemptionFee
	}
	return ""
}

func (x *Etf) GetCirculatingSupply() string {
	if x != nil {
		return x.CirculatingSupply
	}
	return ""
}

func (x *Etf) GetGems() []*Gem {
	if x != nil {
		return x.Gems
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Version   int64                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	State     Subscription_State     `protobuf:"varint,4,opt,name=state,proto3,enum=bwatch.v1.Subscription_State" json:"state,omitempty"`
	Etf       int64                  `protobuf:"varint,5,opt,name=etf,proto3" json:"etf,omitempty"`
	FollowId  string                 `protobuf:"bytes,6,opt,name=follow_id,json=followId,proto3" json:"follow_id,omitempty"`
	Assets    map[string]string      `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Amount    string                 `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	FeeAmount string                 `protobuf:"bytes,9,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{3}
}

func (x *Subscription) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Subscription) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Subscription) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Subscription) GetState() Subscription_State {
	if x != nil {
		return x.State
	}
	return Subscription_NOT_SET
}

func (x *Subscription) GetEtf() int64 {
	if x != nil {
		return x.Etf
	}
	return 0
}

func (x *Subscription) GetFollowId() string {
	if x != nil {
		return x.FollowId
	}
	return ""
}

func (x *Subscription) GetAssets() map[string]string {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Subscription) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Subscription) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group     int64                  `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Index     int32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Etf       int64                  `protobuf:"varint,4,opt,name=etf,proto3" json:"etf,omitempty"`
	Amount    string                 `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	FeeAmount string                 `protobuf:"bytes,6,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
	Assets    map[string]string      `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{4}
}

func (x *Transaction) GetGroup() int64 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *Transaction) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Transaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Transaction) GetEtf() int64 {
	if x != nil {
		return x.Etf
	}
	return 0
}

func (x *Transaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transaction) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *Transaction) GetAssets() map[string]string {
	if x != nil {
		return x.Assets
	}
	return nil
}

type BwatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BwatchReq) Reset() {
	*x = BwatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwatchReq) ProtoMessage() {}

func (x *BwatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwatchReq.ProtoReflect.Descriptor instead.
func (*BwatchReq) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{5}
}

type BwatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BwatchResp) Reset() {
	*x = BwatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwatchResp) ProtoMessage() {}

func (x *BwatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwatchResp.ProtoReflect.Descriptor instead.
func (*BwatchResp) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{6}
}

type BwatchReq_ListAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BwatchReq_ListAssetsRequest) Reset() {
	*x = BwatchReq_ListAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwatchReq_ListAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwatchReq_ListAssetsRequest) ProtoMessage() {}

func (x *BwatchReq_ListAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwatchReq_ListAssetsRequest.ProtoReflect.Descriptor instead.
func (*BwatchReq_ListAssetsRequest) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{5, 0}
}

type BwatchReq_ReadEtfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etf string `protobuf:"bytes,1,opt,name=etf,proto3" json:"etf,omitempty"`
}

func (x *BwatchReq_ReadEtfRequest) Reset() {
	*x = BwatchReq_ReadEtfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwatchReq_ReadEtfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwatchReq_ReadEtfRequest) ProtoMessage() {}

func (x *BwatchReq_ReadEtfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwatchReq_ReadEtfRequest.ProtoReflect.Descriptor instead.
func (*BwatchReq_ReadEtfRequest) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{5, 1}
}

func (x *BwatchReq_ReadEtfRequest) GetEtf() string {
	if x != nil {
		return x.Etf
	}
	return ""
}

type BwatchReq_ReadSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowId string `protobuf:"bytes,1,opt,name=follow_id,json=followId,proto3" json:"follow_id,omitempty"`
}

func (x *BwatchReq_ReadSubscriptionRequest) Reset() {
	*x = BwatchReq_ReadSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwatchReq_ReadSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwatchReq_ReadSubscriptionRequest) ProtoMessage() {}

func (x *BwatchReq_ReadSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwatchReq_ReadSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*BwatchReq_ReadSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{5, 2}
}

func (x *BwatchReq_ReadSubscriptionRequest) GetFollowId() string {
	if x != nil {
		return x.FollowId
	}
	return ""
}

type BwatchResp_ListAssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *BwatchResp_ListAssetsResponse) Reset() {
	*x = BwatchResp_ListAssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwatchResp_ListAssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwatchResp_ListAssetsResponse) ProtoMessage() {}

func (x *BwatchResp_ListAssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwatchResp_ListAssetsResponse.ProtoReflect.Descriptor instead.
func (*BwatchResp_ListAssetsResponse) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BwatchResp_ListAssetsResponse) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type BwatchResp_ReadEtfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etf *Etf `protobuf:"bytes,1,opt,name=etf,proto3" json:"etf,omitempty"`
}

func (x *BwatchResp_ReadEtfResponse) Reset() {
	*x = BwatchResp_ReadEtfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwatchResp_ReadEtfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwatchResp_ReadEtfResponse) ProtoMessage() {}

func (x *BwatchResp_ReadEtfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwatchResp_ReadEtfResponse.ProtoReflect.Descriptor instead.
func (*BwatchResp_ReadEtfResponse) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{6, 1}
}

func (x *BwatchResp_ReadEtfResponse) GetEtf() *Etf {
	if x != nil {
		return x.Etf
	}
	return nil
}

type BwatchResp_ReadSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub *Subscription `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *BwatchResp_ReadSubscriptionResponse) Reset() {
	*x = BwatchResp_ReadSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bwatch_v1_bwatch_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwatchResp_ReadSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwatchResp_ReadSubscriptionResponse) ProtoMessage() {}

func (x *BwatchResp_ReadSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bwatch_v1_bwatch_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwatchResp_ReadSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*BwatchResp_ReadSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_bwatch_v1_bwatch_proto_rawDescGZIP(), []int{6, 2}
}

func (x *BwatchResp_ReadSubscriptionResponse) GetSub() *Subscription {
	if x != nil {
		return x.Sub
	}
	return nil
}

var File_bwatch_v1_bwatch_proto protoreflect.FileDescriptor

var file_bwatch_v1_bwatch_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x6f, 0x0a, 0x03, 0x47, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x74, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x22, 0xc9, 0x04, 0x0a, 0x03, 0x45, 0x74, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x67, 0x65, 0x6d, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6d, 0x52, 0x04, 0x67, 0x65, 0x6d, 0x73, 0x22, 0xed, 0x03, 0x0a,
	0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x65, 0x74, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x22, 0xeb, 0x02, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x65, 0x74, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45,
	0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x7c, 0x0a, 0x09, 0x42, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x0a, 0x0e,
	0x52, 0x65, 0x61, 0x64, 0x45, 0x74, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x74, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x74, 0x66,
	0x1a, 0x36, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0a, 0x42, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x1a, 0x3e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x33, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x45,
	0x74, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x65, 0x74,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x66, 0x52, 0x03, 0x65, 0x74, 0x66, 0x1a, 0x45, 0x0a, 0x18,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x73, 0x75, 0x62, 0x32, 0xd8, 0x01, 0x0a, 0x0d, 0x42, 0x77, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x45, 0x74, 0x66,
	0x12, 0x23, 0x2e, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x74, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x45, 0x74, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x10,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x2e, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x32,
	0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x78,
	0x2d, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x61, 0x6e, 0x64, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x62, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bwatch_v1_bwatch_proto_rawDescOnce sync.Once
	file_bwatch_v1_bwatch_proto_rawDescData = file_bwatch_v1_bwatch_proto_rawDesc
)

func file_bwatch_v1_bwatch_proto_rawDescGZIP() []byte {
	file_bwatch_v1_bwatch_proto_rawDescOnce.Do(func() {
		file_bwatch_v1_bwatch_proto_rawDescData = protoimpl.X.CompressGZIP(file_bwatch_v1_bwatch_proto_rawDescData)
	})
	return file_bwatch_v1_bwatch_proto_rawDescData
}

var file_bwatch_v1_bwatch_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bwatch_v1_bwatch_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_bwatch_v1_bwatch_proto_goTypes = []interface{}{
	(Subscription_State)(0),             // 0: bwatch.v1.Subscription.State
	(Transaction_Type)(0),               // 1: bwatch.v1.Transaction.Type
	(*Asset)(nil),                       // 2: bwatch.v1.Asset
	(*Gem)(nil),                         // 3: bwatch.v1.Gem
	(*Etf)(nil),                         // 4: bwatch.v1.Etf
	(*Subscription)(nil),                // 5: bwatch.v1.Subscription
	(*Transaction)(nil),                 // 6: bwatch.v1.Transaction
	(*BwatchReq)(nil),                   // 7: bwatch.v1.BwatchReq
	(*BwatchResp)(nil),                  // 8: bwatch.v1.BwatchResp
	nil,                                 // 9: bwatch.v1.Subscription.AssetsEntry
	nil,                                 // 10: bwatch.v1.Transaction.AssetsEntry
	(*BwatchReq_ListAssetsRequest)(nil), // 11: bwatch.v1.BwatchReq.ListAssetsRequest
	(*BwatchReq_ReadEtfRequest)(nil),    // 12: bwatch.v1.BwatchReq.ReadEtfRequest
	(*BwatchReq_ReadSubscriptionRequest)(nil),   // 13: bwatch.v1.BwatchReq.ReadSubscriptionRequest
	(*BwatchResp_ListAssetsResponse)(nil),       // 14: bwatch.v1.BwatchResp.ListAssetsResponse
	(*BwatchResp_ReadEtfResponse)(nil),          // 15: bwatch.v1.BwatchResp.ReadEtfResponse
	(*BwatchResp_ReadSubscriptionResponse)(nil), // 16: bwatch.v1.BwatchResp.ReadSubscriptionResponse
	(*timestamppb.Timestamp)(nil),               // 17: google.protobuf.Timestamp
}
var file_bwatch_v1_bwatch_proto_depIdxs = []int32{
	2,  // 0: bwatch.v1.Gem.asset:type_name -> bwatch.v1.Asset
	3,  // 1: bwatch.v1.Etf.gems:type_name -> bwatch.v1.Gem
	17, // 2: bwatch.v1.Subscription.created_at:type_name -> google.protobuf.Timestamp
	17, // 3: bwatch.v1.Subscription.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 4: bwatch.v1.Subscription.state:type_name -> bwatch.v1.Subscription.State
	9,  // 5: bwatch.v1.Subscription.assets:type_name -> bwatch.v1.Subscription.AssetsEntry
	17, // 6: bwatch.v1.Transaction.created_at:type_name -> google.protobuf.Timestamp
	10, // 7: bwatch.v1.Transaction.assets:type_name -> bwatch.v1.Transaction.AssetsEntry
	2,  // 8: bwatch.v1.BwatchResp.ListAssetsResponse.assets:type_name -> bwatch.v1.Asset
	4,  // 9: bwatch.v1.BwatchResp.ReadEtfResponse.etf:type_name -> bwatch.v1.Etf
	5,  // 10: bwatch.v1.BwatchResp.ReadSubscriptionResponse.sub:type_name -> bwatch.v1.Subscription
	12, // 11: bwatch.v1.BwatchService.ReadEtf:input_type -> bwatch.v1.BwatchReq.ReadEtfRequest
	13, // 12: bwatch.v1.BwatchService.ReadSubscription:input_type -> bwatch.v1.BwatchReq.ReadSubscriptionRequest
	15, // 13: bwatch.v1.BwatchService.ReadEtf:output_type -> bwatch.v1.BwatchResp.ReadEtfResponse
	16, // 14: bwatch.v1.BwatchService.ReadSubscription:output_type -> bwatch.v1.BwatchResp.ReadSubscriptionResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_bwatch_v1_bwatch_proto_init() }
func file_bwatch_v1_bwatch_proto_init() {
	if File_bwatch_v1_bwatch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bwatch_v1_bwatch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Etf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwatchReq_ListAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwatchReq_ReadEtfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwatchReq_ReadSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwatchResp_ListAssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwatchResp_ReadEtfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bwatch_v1_bwatch_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwatchResp_ReadSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bwatch_v1_bwatch_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bwatch_v1_bwatch_proto_goTypes,
		DependencyIndexes: file_bwatch_v1_bwatch_proto_depIdxs,
		EnumInfos:         file_bwatch_v1_bwatch_proto_enumTypes,
		MessageInfos:      file_bwatch_v1_bwatch_proto_msgTypes,
	}.Build()
	File_bwatch_v1_bwatch_proto = out.File
	file_bwatch_v1_bwatch_proto_rawDesc = nil
	file_bwatch_v1_bwatch_proto_goTypes = nil
	file_bwatch_v1_bwatch_proto_depIdxs = nil
}
